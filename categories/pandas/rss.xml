<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/categories/pandas/</link>
    <description>Recent content in Pandas on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 May 2020 14:15:47 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/categories/pandas/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Transformation - Merging Data</title>
      <link>https://chloevan.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</link>
      <pubDate>Fri, 29 May 2020 14:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/02_datatransformation/pandas_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터는 코로나 데이터를 활용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-data-transform-overview&#34;&gt;I. Data Transform Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터 변환은 데이터를 하나의 형식이나 구조에서 다른 형식이나 구조로 변환하는 데 사용되는 기법이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Data deduplication&lt;/code&gt; 데이터 중복 제거에는 중복된 데이터 식별 및 제거가 포함된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Key restructuring&lt;/code&gt; 의미가 내장된 모든 키를 일반 키로 변환하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data Cleansing&lt;/code&gt;은 소스 데이터의 정확성을 높이기 위해 의미나 정보를 추출하지 않고 소스 언어에서 단어를 추출하고 구식, 부정확, 불완전한 정보를 삭제하는 것을 포함함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data aggregation&lt;/code&gt;는 서로 다른 유형의 보고 시스템에서 중요한 정보를 검색, 추출, 요약 및 보존하는 것을 포함함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data integration&lt;/code&gt;은 다른 데이터 유형을 변환하여 공통 구조나 스키마로 통합하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data filtering&lt;/code&gt;은 데이터 필터링은 특정 사용자와 관련된 정보를 식별하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data joining&lt;/code&gt;은 두 개 이상의 테이블 간의 관계를 설정하는 것이 포함된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터를 변환하는 주된 이유는 변환된 데이터가 다른 데이터와 호환될 수 있도록 더 나은 대표성을 갖기 위함이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것 외에도, 시스템에서의 상호운용성은 공통 데이터 구조와 포맷을 따름으로써 달성 될 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-merging-database-style-dataframes&#34;&gt;II. Merging database style dataframes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 두개의 데이터를 &lt;code&gt;merge&lt;/code&gt;할 때, &lt;code&gt;concat&lt;/code&gt;이라는 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;사용법은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;dataframe = pd.concat([dataFrame1, dataFrame2], ignore_index=True)

dataframe
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;앞의 코드의 출력은 두 표 모두를 결합한 단일 데이터프레임이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python/02_datatransformation/figure_01.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ignore_index&lt;/code&gt; 인수는 인덱스의 순서와 연관이 있다. 만약 &lt;code&gt;ignore_index=False&lt;/code&gt;로 지정한다면, 기존 인덱스의 순서는 그대로 유지된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-axis0&#34;&gt;(1) axis=0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;두개의 서로 다른 테이블을 위아래로 합친다는 뜻이다. 간단하게 코드를 통해 예를 확인하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# package import&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

&lt;span style=&#34;color:#75715e&#34;&gt;# 데이터 생성&lt;/span&gt;
df1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], 
                   columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;letter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;])

df2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]],
                   columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;letter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number
0      a       1
1      b       2
  letter  number
0      c       3
1      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1, df2], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number
0      a       1
1      b       2
0      c       3
1      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-axis1&#34;&gt;(2) axis=1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;두개의 서로 다른 테이블을 왼쪽에서 오른쪽 순으로 합친다는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1, df2], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number letter  number
0      a       1      c       3
1      b       2      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-real-problems-and-solutions&#34;&gt;III. Real Problems and Solutions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Chapter II.&lt;/code&gt;의 예제들은 기본적으로 쉬운 예제에 속한다. 그런다면 실전은 어떨까?&lt;/li&gt;
&lt;li&gt;다음 예제 데이터프레임을 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df1SE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreSE&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1SE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE
0           9       22
1          11       66
2          13       31
3          15       51
4          17       71
5          19       91
6          21       56
7          23       32
8          25       52
9          27       73
10         29       92
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df2SE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreSE&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]})
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2SE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE
0           2       98
1           4       93
2           6       44
3           8       77
4          10       69
5          12       56
6          14       31
7          16       53
8          18       78
9          20       93
10         22       56
11         24       77
12         26       33
13         28       56
14         30       27
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df1ML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreML&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1ML)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreML
0           1       39
1           3       49
2           5       55
3           7       77
4           9       52
5          11       86
6          13       41
7          15       77
8          17       73
9          19       51
10         21       86
11         23       82
12         25       92
13         27       23
14         29       49
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df2ML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreML&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2ML)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   StudentID  ScoreML
0          2       93
1          4       44
2          6       78
3          8       97
4         10       87
5         12       89
6         14       39
7         16       43
8         18       88
9         20       78
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;실전에서는 이렇게 데이터의 행의 개수가 다른 것이 태반이다.&lt;/li&gt;
&lt;li&gt;또한, 모든 학생이 &lt;code&gt;ML&lt;/code&gt;수업, &lt;code&gt;SE&lt;/code&gt;수업을 수강한 것이 아니다.&lt;/li&gt;
&lt;li&gt;위와 같은 상황에서 하나의 데이터셋으로 만드는 과정을 기술하려고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-concatening-along-with-an-axis&#34;&gt;(1) Concatening along with an axis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 옵션으로 지금까지 진행한 방법으로 &lt;code&gt;axis&lt;/code&gt;를 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dfSE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1SE, df2SE], ignore_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
dfML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1ML, df2ML], ignore_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([dfML, dfSE], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreML  StudentID  ScoreSE
16        4.0     44.0         12       56
17        6.0     78.0         14       31
18        8.0     97.0         16       53
19       10.0     87.0         18       78
20       12.0     89.0         20       93
21       14.0     39.0         22       56
22       16.0     43.0         24       77
23       18.0     88.0         26       33
24       20.0     78.0         28       56
25        NaN      NaN         30       27
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;먼저, &lt;code&gt;SE&lt;/code&gt;데이터끼리 합치고, 그 다음에는 &lt;code&gt;ML&lt;/code&gt;데이터끼리 조합을 했다.&lt;/li&gt;
&lt;li&gt;그 후에 &lt;code&gt;axis=1&lt;/code&gt; 인수를 추가하여 &lt;code&gt;side by side&lt;/code&gt; 데이터를 조합 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-using-dfmerge-with-an-inner-join&#34;&gt;(2) Using df.merge with an inner join&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 &lt;code&gt;merge()&lt;/code&gt;를 활용하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;merge_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfSE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(dfML, how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(merge_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE  ScoreML
0           9       22       52
1          11       66       86
2          13       31       41
3          15       51       77
4          17       71       73
5          19       91       51
6          21       56       86
7          23       32       82
8          25       52       92
9          27       73       23
10         29       92       49
11          2       98       93
12          4       93       44
13          6       44       78
14          8       77       97
15         10       69       87
16         12       56       89
17         14       31       39
18         16       53       43
19         18       78       88
20         20       93       78
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 알 수 있는 것은 &lt;code&gt;SE&lt;/code&gt; 코스와 &lt;code&gt;ML&lt;/code&gt;코스를 두개 모두 수강한 학생 기록을 알 수 있다. (총 21명)&lt;/li&gt;
&lt;li&gt;그 외에도 &lt;code&gt;join&lt;/code&gt;의 여러가지 유형이 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner join&lt;/code&gt; - 내부 조인은 둘 이상의 데이터 프레임에서 교차점을 취한다. 구조화 질의 언어(SQL)의 INER JOIN에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outer join&lt;/code&gt; - 외부 조인은 둘 이상의 데이터 프레임에서 결합을 가져온다. SQL의 FULL OUTER JOIN에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left join&lt;/code&gt; - 왼쪽 조인은 왼쪽 데이터 프레임의 키만 사용한다. SQL의 왼쪽 외부 조인에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right join&lt;/code&gt; - 오른쪽 조인(join)은 오른쪽 데이터 프레임의 키만 사용하며, SQL의 Right OUTER JOIN과 유사하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-merging-on-index&#34;&gt;(3) Merging on index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 프레임의 병합키는 데이터 프레임의 인덱스에 위치한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_index=True&lt;/code&gt; 또는 &lt;code&gt;right_index=True&lt;/code&gt;를 지정하면 각 데이터 프레임의 &lt;code&gt;index&lt;/code&gt;를 병합 키로 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;left1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)})
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(left1)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value
0  apple      0
1   ball      1
2  apple      2
3  apple      3
4   ball      4
5    cat      5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;right1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group_val&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;33.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]}, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(right1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;       group_val
apple       33.4
ball         5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 2개의 데이터에서 &lt;code&gt;right1&lt;/code&gt; 데이터셋의 인덱스는 &lt;code&gt;apple &amp;amp; ball&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;이 때, &lt;code&gt;right1&lt;/code&gt;의 데이터를 병합키로 활용하려면 &lt;code&gt;right_index=True&lt;/code&gt;를 해주면 된다.&lt;/li&gt;
&lt;li&gt;반면에, &lt;code&gt;left1&lt;/code&gt;의 데이터에서 병합키는 &lt;code&gt;key&lt;/code&gt;값이다. 이 때에는 &lt;code&gt;left_on=&#39;key&#39;&lt;/code&gt;라고 지정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(left1, right1, left_on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, right_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value  group_val
0  apple      0       33.4
2  apple      2       33.4
3  apple      3       33.4
1   ball      1        5.0
4   ball      4        5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이 때, 만약에 위에서 배운 &lt;code&gt;join&lt;/code&gt; 유형을 지정하게 되면 지정값에 따라 데이터는 다르게 병합된다.&lt;/li&gt;
&lt;li&gt;간단한 예로 &lt;code&gt;outer join&lt;/code&gt;을 시도하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(left1, right1, left_on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, right_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value  group_val
0  apple      0       33.4
2  apple      2       33.4
3  apple      3       33.4
1   ball      1        5.0
4   ball      4        5.0
5    cat      5        NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;처음에 시도했을 때 나타나지 않았던 &lt;code&gt;cat&lt;/code&gt;값이 등장한 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;Piepenbreier, N. (2020, April 16). Automate Your (Boring!) Excel Reporting with Python!. Retrieved from &lt;a href=&#34;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&#34;&gt;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Dataframe</title>
      <link>https://chloevan.github.io/python/pandas/pandas_dataframe/</link>
      <pubDate>Sat, 18 Apr 2020 11:32:36 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_dataframe/</guid>
      <description>&lt;p&gt;데이터프레임은 2차원 배열의 행과 열로 구성되어져 있다. 대부분의 사람들이 알고 있는 마이크로소프트사의 EXCEL, SQL Table 등을 생각하면 데이터프레임을 쉽게 이해할 수 있다. 판다스에서 가장 많이 사용되는 객체이며, 실제 파이썬을 활용한 데이터 분석을 하고 싶다면 필수적으로 알아야 하는 내용이다. 기본적으로 Python은 행렬 연산에 최적화된 언어라고 할 수 있지만, 판다스 라이브러리는 R의 데이터프레임에서 유래했다고 알려져 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/pandas/data_frame/excel_table.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;여기서 잠깐! 초급자 또는 입문자들이 가장 궁금해하는 것 중의 하나가 R과 Python에 대한 비교가 아닐까 싶다. 통계/컴공 비전공자인 필자가 경험적으로 말씀 드리면 프로그래밍 기초가 전혀 없는 분들 중, 엑셀보다 빠른 데이터 전처리와 간단한 그래프를 그리는 것이 주목적이라면 여전히 R의 데이터프레임은 강력한 무기다. 간단하게 비교를 하자면, R의 대부분은 패키지는 데이터프레임이 기본 객체라고 봐도 무방하다. 그러나 파이썬은 웹개발이 주 언어이기 때문에 쉽게 접근하기가 힘들다. 인덱스, 딕셔너리, 행렬 등 매우 다양한 객체가 존재하기 때문에 이에 대한 인식은 알고서 출발해야 한다. 이 부분 때문에 조금 힘들고 난해할 수 있다. 그러나 데이터를 활용하여 프로그램을 개발하고 싶다면 이 때에는 Python이 가장 강력한 무기가 될 수 있다.&lt;/p&gt;
&lt;p&gt;다시 본론으로 돌아오면, 아래 그림에서 설명하는 것처럼, 여러개의 시리즈들이 한데 모여서 데이터프레임을 이루는 구조가 데이터프레임이라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/pandas/data_frame/series_dataframe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;시리즈가 모여서 데이터프레임이 만들어진다고 보면 더 좋을 듯 하다. 이 때, 데이터프레임의 열은 각각 시리즈의 객체이다. 우선, 판다스를 활용하여 간단하게 데이터프레임을 만들어 본다.&lt;/p&gt;
&lt;h2 id=&#34;i-딕셔너리에서-데이터프레임으로의-변환&#34;&gt;I. 딕셔너리에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

dic_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;벨기에&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;인도&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브라질&amp;#39;&lt;/span&gt;], 
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capital&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브뤼셀&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;뉴델리&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브라질리아&amp;#39;&lt;/span&gt;], 
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;population&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;11190846&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1303171035&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;207847528&lt;/span&gt;]}

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(dic_data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  country capital  population
0     벨기에     브뤼셀    11190846
1      인도     뉴델리  1303171035
2     브라질   브라질리아   207847528
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;country&amp;rsquo;, &amp;lsquo;capital&amp;rsquo;, &amp;lsquo;population&#39;은 열이름과 관련이 있는 것을 볼 수가 있다. 또한 자동적으로 행 인덱스가 0부터 생성됨을 볼수가 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-시리즈에서-데이터프레임으로의-변환&#34;&gt;II. 시리즈에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;p&gt;이번에는 시리즈에서 데이터프레임으로 변환한다. 아래 샘플코드를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;series &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;], index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]), 
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;])}

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(series)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   one  two
a  1.0  1.0
b  2.0  2.0
c  3.0  3.0
d  NaN  4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;한가지 특이점은 각 컬럼마다 값이 달라도 에러가 발생하지는 않고, 다만 NaN이 작성되는 것을 볼 수가 있다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ndarrays--lists에서-데이터프레임으로의-변환&#34;&gt;III. ndArrays &amp;amp; Lists에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;p&gt;파이썬은 행렬과 리스트로 작성되는 코드가 많다. ndArrays에서 데이터프레임으로 변환 시, 특정 열(=column)에 결측치가 있으면 에러가 반환된다. 먼저 정상적인 코드를 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ndArrays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], 
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;]}

pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(ndArrays)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;다음은 결측치가 발생한 코드를 확인한다. 아래코드에서 보는 것처럼 ValueError: arrays must all be same length 에러가 발생하는 것을 확인할 수 있다. (실제 에러코드가 발생하는지 확인해본다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ndArrays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], 
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;]}

pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(ndArrays)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-4-46a98d14f82f&amp;gt; in &amp;lt;module&amp;gt;
      2             &#39;two&#39;: [4., 3., 2.]}
      3 
----&amp;gt; 4 pd.DataFrame(ndArrays)


/usr/local/lib/python3.7/site-packages/pandas/core/frame.py in __init__(self, data, index, columns, dtype, copy)
    433             )
    434         elif isinstance(data, dict):
--&amp;gt; 435             mgr = init_dict(data, index, columns, dtype=dtype)
    436         elif isinstance(data, ma.MaskedArray):
    437             import numpy.ma.mrecords as mrecords


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in init_dict(data, index, columns, dtype)
    252             arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays
    253         ]
--&amp;gt; 254     return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)
    255 
    256 


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in arrays_to_mgr(arrays, arr_names, index, columns, dtype)
     62     # figure out the index, if necessary
     63     if index is None:
---&amp;gt; 64         index = extract_index(arrays)
     65     else:
     66         index = ensure_index(index)


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in extract_index(data)
    363             lengths = list(set(raw_lengths))
    364             if len(lengths) &amp;gt; 1:
--&amp;gt; 365                 raise ValueError(&amp;quot;arrays must all be same length&amp;quot;)
    366 
    367             if have_dicts:


ValueError: arrays must all be same length
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드에서 알 수 있는 것처럼, 딕셔너리 또는 시리즈 객체에서 데이터프레임으로 변환하는 경우 NaN을 반환하지만 데이터프레임으로 변환이 가능했다. 그러나 ndArrays의 경우 데이터프레임 객체 생성이 되지 않기 때문에, 데이터프레임으로 변환할 경우, 해당 객체가 ndArrays인지 우선 확인이 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;“10 Minutes to Pandas¶.” 10 Minutes to Pandas - Pandas 1.0.3 Documentation, pandas.pydata.org/pandas-docs/stable/getting_started/10min.html.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Filtering</title>
      <link>https://chloevan.github.io/python/pandas/filter/</link>
      <pubDate>Fri, 03 Apr 2020 22:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/filter/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;필터링은 특정 조건식을 만족하는 행을 따로 추출하는 개념이다. 특정 행의 값에 조건식 &lt;code&gt;True/False&lt;/code&gt;을 판별하여 값을 추출하는 방법이다. 이 때, 비교 연산자 또는 조건식 &lt;code&gt;(&amp;gt;, &amp;lt;, ==, ...)&lt;/code&gt;을 적용하면 행을 추출할 수 있다.&lt;/p&gt;
&lt;p&gt;우선 데이터부터 확인한다. 아래 소스코드를 복사 붙여넣기 하면 데이터를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39;&lt;/span&gt;
sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House  10 Things I Hate About Unix       child   
2  The Empirical House         The Seaborn Identity       adult   
3     Sumdance Cinemas  10 Things I Hate About Unix       adult   
4  The Empirical House                Mamma Median!      senior   

   ticket_quantity  
0                4  
1                2  
2                4  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-1-accessing-a-single-column&#34;&gt;Step 1. Accessing a Single Column&lt;/h2&gt;
&lt;p&gt;우선 조건식을 적용하기 전, Column에 접근해야 가능하다. 여러 방법이 있지만, 아래와 같이 접근해본다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data[&#39;name_of_column&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 &lt;code&gt;ticket_type&lt;/code&gt; Column에 접근해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    senior
1     child
2     adult
3     adult
4    senior
Name: ticket_type, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 값을 통해서 &lt;code&gt;senior&lt;/code&gt;, &lt;code&gt;child&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt;, &amp;hellip;, 순으로 된 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;여기에서 비교연산자를 통해 참/거짓을 판별해야 한다. 만약에, &amp;lsquo;senior&#39;만 가져오도록 한다면, &lt;code&gt;child&lt;/code&gt; &amp;amp; &lt;code&gt;adult&lt;/code&gt; 값은 &lt;code&gt;False&lt;/code&gt;로 반환이 될 것이다. 확인해보자.&lt;/p&gt;
&lt;h2 id=&#34;step-2-comparing-operators&#34;&gt;Step 2. Comparing Operators&lt;/h2&gt;
&lt;p&gt;주로 사용되는 비교연산자는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; (equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt; (not equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  (less than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;  (greater than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; (greator or equal to)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;isin()&lt;/code&gt; 함수를 적용하면 특정 값을 가진 행들을 따로 추출할 수도 있다. 이 함수를 사용하면, 코드가 좀 더 간결해지도록 작성할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;true_false &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(true_false&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0     True
1    False
2    False
3    False
4     True
Name: ticket_type, dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 값과 비교해보면 &lt;code&gt;child&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt; 값이 모두 &lt;code&gt;False&lt;/code&gt;로 반환된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;step-3-filtering&#34;&gt;Step 3. Filtering&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Column&lt;/code&gt;에 대한 접근 및 &lt;code&gt;비교연산자&lt;/code&gt;를 통해서, 특정 조건식에 맞는 데이터를 추출해본다. 이 때, 데이터셋을 한번 더 입력하는 번거로움만 거치면 문제가 되지 않는다. 소스코드를 통해 빠르게 구현해보자. 역시나, 크게 어려운 것은 아니다.&lt;/p&gt;
&lt;p&gt;조건은 &lt;code&gt;ticket_type&lt;/code&gt;에서 &lt;code&gt;senior&lt;/code&gt;에 해당하는 행만 추출해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;senior_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(senior_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                      theater_name           movie_title ticket_type  \
0                 Sumdance Cinemas         Harry Plotter      senior   
1              The Empirical House         Mamma Median!      senior   
2              The Empirical House         Mamma Median!      senior   
3                        The Frame         Harry Plotter      senior   
4  Richie&#39;s Famous Minimax Theatre  The Seaborn Identity      senior   

   ticket_quantity  
0                4  
1                2  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-4-isin-활용&#34;&gt;Step 4. isin() 활용&lt;/h2&gt;
&lt;p&gt;여기에서 문제가 생겼다. &lt;code&gt;senior&lt;/code&gt;와 함께, &lt;code&gt;adult&lt;/code&gt;의 값도 같이 추출해달라는 요청이 들어왔다. 물론 각각의 데이터를 개별적으로 추출하는 것도 하나의 방법이 될 수 있지만, 소스코드가 길어질 것이 예상이 된다. 물론 실제로도 그렇다. 한번 해보겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;seniors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;
adults &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adult&amp;#34;&lt;/span&gt;
new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[seniors &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; adults]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House         The Seaborn Identity       adult   
2     Sumdance Cinemas  10 Things I Hate About Unix       adult   
3  The Empirical House                Mamma Median!      senior   
4     Sumdance Cinemas                Harry Plotter       adult   

   ticket_quantity  
0                4  
1                4  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 &lt;code&gt;isin()&lt;/code&gt;을 활용해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;senior&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adult&amp;#39;&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House         The Seaborn Identity       adult   
2     Sumdance Cinemas  10 Things I Hate About Unix       adult   
3  The Empirical House                Mamma Median!      senior   
4     Sumdance Cinemas                Harry Plotter       adult   

   ticket_quantity  
0                4  
1                4  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과값은 똑같지만, 코드 1줄이 줄어든 것을 확인할 수 있다. 문제는, 전체 값이 100개 중에서, 30개만 추출할 때를 생각해보자, &lt;code&gt;isin()&lt;/code&gt; 활용하지 않는다면, 반복적인 불필요한 코드만 계속 늘어날 것을 예상할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;지금까지, Pandas를 활용한 Filtering의 방법 및 접근에 대해 배웠다. 물론 실무에서는 이것보다도 훨씬 더 복잡한 형태로 작업이 되지만, 기본적인 원리는 똑같다. &lt;code&gt;비교연산자&lt;/code&gt;를 통한 &lt;code&gt;참/거짓&lt;/code&gt;의 활용, 그리고 &lt;code&gt;isin()&lt;/code&gt; 함수의 활용을 통해 &lt;code&gt;Filtering&lt;/code&gt; 작업을 수행하며. 복잡한 문자열에 &lt;code&gt;정규표현식(regular expression)&lt;/code&gt;을 활용하기도 한다. 그러나 마찬가지로, &lt;code&gt;참/거짓&lt;/code&gt;을 활용한 비교연산자를 통한 추출방법임에는 변함이 없기 때문에, 다양하게 연습을 해본다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas sort_values()</title>
      <link>https://chloevan.github.io/python/pandas/sort_values/</link>
      <pubDate>Fri, 03 Apr 2020 20:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/sort_values/</guid>
      <description>&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sort_values()&lt;/code&gt; 함수는 일종의 데이터의 정렬과 연관이 있다. 어려운 내용은 아니기 때문에 빠르게 소스 코드 구현 및 확인 하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-sample-tutorial&#34;&gt;II. Sample Tutorial&lt;/h2&gt;
&lt;p&gt;엑셀로 된 ticket_sales 데이터에서 &lt;code&gt;ticket_quantity&lt;/code&gt;가 가장 많이 팔린 영화 Top3를 구하는 소스코드를 구해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39;&lt;/span&gt;
sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House  10 Things I Hate About Unix       child   
2  The Empirical House         The Seaborn Identity       adult   
3     Sumdance Cinemas  10 Things I Hate About Unix       adult   
4  The Empirical House                Mamma Median!      senior   

   ticket_quantity  
0                4  
1                2  
2                4  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;데이터가 정상적으로 수집되었다면, 이제 빠르게 &lt;code&gt;Top3&lt;/code&gt; 데이터를 추출하도록 해보자. 소스코드가 어렵지는 않으니, 따라하도록 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sales_sorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_quantity&amp;#39;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
sales_sorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_sorted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#75715e&#34;&gt;# Top3에 해당하는 행을 출력한다. &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales_sorted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                      theater_name           movie_title ticket_type  \
0                 Sumdance Cinemas         Harry Plotter      senior   
1                        The Frame        Kung Fu pandas       child   
2  Richie&#39;s Famous Minimax Theatre  The Seaborn Identity       adult   

   ticket_quantity  
0                4  
1                4  
2                4  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 소스코드에서 중요한 것은 &lt;code&gt;sort_values()&lt;/code&gt; 안에서 &lt;code&gt;해당 Column값을 입력한 후&lt;/code&gt;에 &lt;code&gt;ascending = False&lt;/code&gt;를 하게 되면 내림차순으로 정렬이 된다. 이러한 방식을 통해서 행을 출력할 수 있다.&lt;/p&gt;
&lt;p&gt;매우 쉽죠?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas With Excel</title>
      <link>https://chloevan.github.io/python/pandas/pandas_with_excel/</link>
      <pubDate>Mon, 30 Mar 2020 11:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_with_excel/</guid>
      <description>&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;이번 포스트는 기존의 엑셀 사용자를 위해 준비했다. 엑셀에 익숙한 사람들에게 파이썬을 분석 용도로 사용하고자 하는 분들에게는 작은 도움이 되기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터-입출력&#34;&gt;II. 데이터 입출력&lt;/h2&gt;
&lt;p&gt;판다스는 다양한 형태의 외부 파일을 읽을 수 있다. &lt;code&gt;CSV&lt;/code&gt;, &lt;code&gt;MS Excel&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;, &lt;code&gt;HDF5 Format&lt;/code&gt;과 같은 파일 포맷을 읽을 수 있다. &lt;code&gt;파일 포맷(File Format)&lt;/code&gt;에 따른 데이터 입출력 도구에 관한 자료를 요약하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;파일 포맷&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;How to Read?&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;How to Write?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CSV&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_csv&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_csv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MS Excel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_excel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_excel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SQL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_sql&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_sql&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;그 외에 &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;SAS&lt;/code&gt; 포맷과 같은 파일을 읽어오는 다양한 방법에 대해서는 &lt;a href=&#34;https://pandas.pydata.org/docs/pandas.pdf&#34;&gt;Pandas 공식문서&lt;/a&gt;(PDF 다운로드)를 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-excel-파일&#34;&gt;III. Excel 파일&lt;/h2&gt;
&lt;p&gt;판다스 공식문서(version 1.0.3, Release date: March 18, 2020)에 따르면, &lt;code&gt;read_excel()&lt;/code&gt; 함수는 Excel 2003(.xls), Excel 2007+(.xlsx) 파일을 읽어올 수 있다. 또한, Binary Excel(.xlsb) (한번도 본적은 없다!)도 읽을 수 있다고 하니, 90년대 엑셀 파일이 아니면, 모두 읽기가 가능한 듯 하다 (p. 286 참조).&lt;/p&gt;
&lt;h2 id=&#34;1-파일-읽어오기&#34;&gt;(1) 파일 읽어오기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;read_excel()&lt;/code&gt; 및 &lt;code&gt;to_excel()&lt;/code&gt; 함수는 파이썬의 &lt;code&gt;xlrd&lt;/code&gt;, &lt;code&gt;openpyxl&lt;/code&gt;, &lt;code&gt;pyxlsb&lt;/code&gt;과 같은 모듈이 선행적으로 설치가 되어야 사용할 수 있기 때문에 만약, 함수 실행시 에러(error)가 발생하면 참조하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 사용 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data = pandas.read_excel(&#39;파일 경로(이름)&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 형태로 소스코드를 작성하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/sports/games_plays.xlsx&amp;#39;&lt;/span&gt;
games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(games&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   Unnamed: 0      GameId HomeTeamAbbr VisitorTeamAbbr  Week  \
0           0  2017090700           NE              KC     1   
1           1  2017090700           NE              KC     1   
2           2  2017090700           NE              KC     1   
3           3  2017090700           NE              KC     1   
4           4  2017090700           NE              KC     1   

            Stadium        Location StadiumType        Turf     GameWeather  \
0  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
1  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
2  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
3  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
4  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   

   Temperature  Humidity          PlayId  YardLine  Quarter GameClock  \
0         63.0      77.0  20170907000118        35        1  14:14:00   
1         63.0      77.0  20170907000139        43        1  13:52:00   
2         63.0      77.0  20170907000189        35        1  13:02:00   
3         63.0      77.0  20170907000345         2        1  12:12:00   
4         63.0      77.0  20170907000395        25        1  12:08:00   

  PossessionTeam  Down  Distance FieldPosition  
0             NE     3         2            NE  
1             NE     1        10            NE  
2             NE     1        10            KC  
3             NE     2         2            KC  
4             KC     1        10            KC  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드로 데이터가 정상적으로 업로드 된 것을 확인 할 수 있다. 기존 엑셀 파일에 있는 Column명을 그대로 사용하고자 한다면, &lt;code&gt;read_excel(파일명, header = 0)&lt;/code&gt; 사용하거나, &lt;code&gt;read_excel(header, header = None)&lt;/code&gt;을 사용하면 Column명 대신에 숫자로 순차적으로 표시되게 된다. 그리고, Column명은 첫번째 행에 입력되게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/sports/games_plays.xlsx&amp;#39;&lt;/span&gt;
games2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url, header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(games2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    0           1             2                3     4                 5   \
0  NaN      GameId  HomeTeamAbbr  VisitorTeamAbbr  Week           Stadium   
1  0.0  2017090700            NE               KC     1  Gillette Stadium   
2  1.0  2017090700            NE               KC     1  Gillette Stadium   
3  2.0  2017090700            NE               KC     1  Gillette Stadium   
4  3.0  2017090700            NE               KC     1  Gillette Stadium   

               6            7           8               9            10  \
0        Location  StadiumType        Turf     GameWeather  Temperature   
1  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
2  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
3  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
4  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   

         11              12        13       14         15              16  \
0  Humidity          PlayId  YardLine  Quarter  GameClock  PossessionTeam   
1        77  20170907000118        35        1   14:14:00              NE   
2        77  20170907000139        43        1   13:52:00              NE   
3        77  20170907000189        35        1   13:02:00              NE   
4        77  20170907000345         2        1   12:12:00              NE   

     17        18             19  
0  Down  Distance  FieldPosition  
1     3         2             NE  
2     1        10             NE  
3     1        10             KC  
4     2         2             KC  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-파일-저장하기&#34;&gt;(2) 파일 저장하기&lt;/h2&gt;
&lt;p&gt;불러온 파일을 저장하는 방법은 여러가지 있다. 여기서는 고민해야 한다.
Excel 파일로 재 저장 할 것인지, CSV 파일로 저장할 것인지, JSON 파일로 저장할 것인지에 따라 지정하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 사용 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data.to_excel(&#39;파일경로&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 작성하면 된다. 간혹 &lt;code&gt;ModuleNotFoundError: No module named &#39;openpyxl&#39;&lt;/code&gt;과 같은 에러 메시지가 뜨면, 이는 &lt;code&gt;to_excel()&lt;/code&gt; 실행시 필요한 &lt;code&gt;openpyxl&lt;/code&gt; 모듈이 사전에 설치가 되지 않은 것이기 때문에 터미널에서 추가 설치를 진행하면 된다.&lt;/p&gt;
&lt;p&gt;모듈 설치 방법은 아래와 같은 형태로 실행한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip3 install openpyxl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;아나콘다 배포판에는 openpyxl 라이브러리가 기본 제공되므로 설치하지 않아도 되지만, 혹시나 에러가 발생하면 &lt;code&gt;conda install openpyxl&lt;/code&gt; 명령어를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;games&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.xlsx&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;%%bash
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;example.xlsx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 중요한 작업이 남았다. 실무에서는 보통 여러 형태의 엑셀이 중복적으로 존재하게 된다. 매월00보고서가 엑셀 형태로 남아 있는 경우가 많은데, 복수의 엑셀파일이 존재할 시, 어떻게 효과적으로 엑셀 데이터를 불러올지 고민할 수 밖에 없다. 다음 장에서 다루도록 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Wes McKinney and Pandas Development Team¶. Pandas: Powerful Python data analysis toolkit Release 1.0.3. Retrieved March 18, 2020, from &lt;a href=&#34;https://pandas.pydata.org/docs/pandas.pdf&#34;&gt;https://pandas.pydata.org/docs/pandas.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>