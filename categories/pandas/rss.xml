<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/categories/pandas/</link>
    <description>Recent content in Pandas on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 May 2021 20:36:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/categories/pandas/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pandas 속도 비교 - loc vs replace</title>
      <link>https://dschloe.github.io/python/pandas/loc_replace/</link>
      <pubDate>Sat, 15 May 2021 20:36:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/loc_replace/</guid>
      <description>개요  loc and Replace 속도를 비교 측정해보자.  방법 1. .loc vs .replace  값을 바꾸는 방법은 다음과 같다.  data[&#39;column&#39;].loc[data[&#39;column&#39;] == &#39;Old Value&#39;] = &#39;New Value&#39;    import pandas as pd import seaborn as sns diamonds = sns.load_dataset(&amp;#39;diamonds&amp;#39;) print(diamonds)  carat cut color clarity depth table price x y z 0 0.23 Ideal E SI2 61.5 55.0 326 3.95 3.98 2.43 1 0.21 Premium E SI1 59.</description>
    </item>
    
    <item>
      <title>Pandas 속도 비교 - iloc and loc</title>
      <link>https://dschloe.github.io/python/pandas/loc_iloc/</link>
      <pubDate>Wed, 12 May 2021 20:36:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/loc_iloc/</guid>
      <description>1줄 요약  .loc[]와 .iloc[] 인덱스의 속도 차이를 측정해본다.  개요  시간이 허락한다면, Pandas 속도를 비교하는 게시글을 자주 작성하려고 한다.  Pandas가 상대적으로 속도가 느리기 때문에, 조금 더 효율적인 코드를 작성하는 쪽에 초점을 맞춰본다.   .loc[] : index name locator를 의미한다. iloc[] : index number locator를 의미한다.  행 선택시 속도 비교  먼저 행을 선택할 때의 속도 차이를 확인하도록 합니다.  import pandas as pd import time import seaborn as sns diamonds = sns.</description>
    </item>
    
    <item>
      <title>Pandas read_csv skiprows 활용</title>
      <link>https://dschloe.github.io/python/pandas/pandas_skiprows/</link>
      <pubDate>Sat, 20 Feb 2021 20:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/pandas_skiprows/</guid>
      <description>문제 개요  Kaggle 데이터 New York City Taxi Fare Prediction 데이터를 구글 코랩에서 Loading 하는 중 메모리 문제가 발생함 계통추출(Systematic Sampling)을 통해 데이터를 불러오기로 함  예제 실습  아래 예제를 통해서 실제로 데이터가 줄어드는지 확인을 해본다. 핵심 코드는 skip_logic 함수이며, skiprows = skiprows=lambda x: skip_logic(x, 3) 형태로 작성할 수 있다. IRIS 데이터는 https://www.kaggle.com/saurabh00007/iriscsv 에서 다운로드 받았다.  iris 데이터외에도 각자 데이터를 가지고 실습을 해도 좋다.    import pandas as pd def skip_logic(index, skip_num): if index % skip_num == 0: return False return True def main(): print(&amp;#39;**** skiprows 기본 옵션 ****&amp;#39;) iris = pd.</description>
    </item>
    
    <item>
      <title>List to Pandas</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/list_pandas/</link>
      <pubDate>Mon, 09 Nov 2020 18:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/list_pandas/</guid>
      <description>개요  List는 파이썬 데이터 타입의 기본 자료형이다. Pandas 데이터 분석을 위한 기본적인 자료형이다. List에서 Pandas로 변환하는 작업의 다양한 방법을 활용해본다.  방법 1. 기초  List를 생성한 후, 데이터프레임으로 변환한다. 여기에서는 column과 index값을 확인해본다.  import pandas as pd lst = [&amp;#34;Korea&amp;#34;, &amp;#34;Japan&amp;#34;, &amp;#34;USA&amp;#34;, &amp;#34;China&amp;#34;, &amp;#34;Russia&amp;#34;] data = pd.DataFrame(lst) print(data)  0 0 Korea 1 Japan 2 USA 3 China 4 Russia  방법 2. Column &amp;amp; Index 추가  이번에는 column과 index를 추가한다.</description>
    </item>
    
    <item>
      <title>Pandas Data Handling 1편</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/pandas_data_handling_1/</link>
      <pubDate>Sun, 05 Jul 2020 16:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/pandas_data_handling_1/</guid>
      <description>I. Kaggle에서 타이타닉 데이터 가져오기  캐글 데이터 가져오는 예제는 본 Kaggle with Google Colab에서 참고하기를 바란다. 먼저 kaggle 패키지를 설치한다.  !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6) Requirement already satisfied: urllib3&amp;lt;1.25,&amp;gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3) Requirement already satisfied: six&amp;gt;=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.12.0) Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.8.1) Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.41.1) Requirement already satisfied: python-slugify in /usr/local/lib/python3.</description>
    </item>
    
    <item>
      <title>Data Transformation - Merging Data</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</link>
      <pubDate>Fri, 29 May 2020 14:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
 데이터는 코로나 데이터를 활용했다.  I. Data Transform Overview   데이터 변환은 데이터를 하나의 형식이나 구조에서 다른 형식이나 구조로 변환하는 데 사용되는 기법이다.
 Data deduplication 데이터 중복 제거에는 중복된 데이터 식별 및 제거가 포함된다. Key restructuring 의미가 내장된 모든 키를 일반 키로 변환하는 것을 포함한다.</description>
    </item>
    
    <item>
      <title>Pandas Dataframe</title>
      <link>https://dschloe.github.io/python/pandas/pandas_dataframe/</link>
      <pubDate>Sat, 18 Apr 2020 11:32:36 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/pandas_dataframe/</guid>
      <description>Overview 데이터프레임은 2차원 배열의 행과 열로 구성되어져 있다. 대부분의 사람들이 알고 있는 마이크로소프트사의 EXCEL, SQL Table 등을 생각하면 데이터프레임을 쉽게 이해할 수 있다. 판다스에서 가장 많이 사용되는 객체이며, 실제 파이썬을 활용한 데이터 분석을 하고 싶다면 필수적으로 알아야 하는 내용이다. 기본적으로 Python은 행렬 연산에 최적화된 언어라고 할 수 있지만, 판다스 라이브러리는 R의 데이터프레임에서 유래했다고 알려져 있다.
여기서 잠깐! 초급자 또는 입문자들이 가장 궁금해하는 것 중의 하나가 R과 Python에 대한 비교가 아닐까 싶다.</description>
    </item>
    
    <item>
      <title>Pandas Filtering</title>
      <link>https://dschloe.github.io/python/pandas/filter/</link>
      <pubDate>Fri, 03 Apr 2020 22:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/filter/</guid>
      <description>Overview 필터링은 특정 조건식을 만족하는 행을 따로 추출하는 개념이다. 특정 행의 값에 조건식 True/False을 판별하여 값을 추출하는 방법이다. 이 때, 비교 연산자 또는 조건식 (&amp;gt;, &amp;lt;, ==, ...)을 적용하면 행을 추출할 수 있다.
우선 데이터부터 확인한다. 아래 소스코드를 복사 붙여넣기 하면 데이터를 확인할 수 있다.
import pandas as pd url = &amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39; sales = pd.read_excel(url) print(sales.head())  theater_name movie_title ticket_type \ 0 Sumdance Cinemas Harry Plotter senior 1 The Empirical House 10 Things I Hate About Unix child 2 The Empirical House The Seaborn Identity adult 3 Sumdance Cinemas 10 Things I Hate About Unix adult 4 The Empirical House Mamma Median!</description>
    </item>
    
    <item>
      <title>Pandas sort_values()</title>
      <link>https://dschloe.github.io/python/pandas/sort_values/</link>
      <pubDate>Fri, 03 Apr 2020 20:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/sort_values/</guid>
      <description>I. Overview sort_values() 함수는 일종의 데이터의 정렬과 연관이 있다. 어려운 내용은 아니기 때문에 빠르게 소스 코드 구현 및 확인 하도록 한다.
II. Sample Tutorial 엑셀로 된 ticket_sales 데이터에서 ticket_quantity가 가장 많이 팔린 영화 Top3를 구하는 소스코드를 구해본다.
import pandas as pd url = &amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39; sales = pd.read_excel(url) print(sales.head())  theater_name movie_title ticket_type \ 0 Sumdance Cinemas Harry Plotter senior 1 The Empirical House 10 Things I Hate About Unix child 2 The Empirical House The Seaborn Identity adult 3 Sumdance Cinemas 10 Things I Hate About Unix adult 4 The Empirical House Mamma Median!</description>
    </item>
    
    <item>
      <title>Pandas With Excel</title>
      <link>https://dschloe.github.io/python/pandas/pandas_with_excel/</link>
      <pubDate>Mon, 30 Mar 2020 11:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/pandas_with_excel/</guid>
      <description>I. Overview 이번 포스트는 기존의 엑셀 사용자를 위해 준비했다. 엑셀에 익숙한 사람들에게 파이썬을 분석 용도로 사용하고자 하는 분들에게는 작은 도움이 되기를 바란다.
II. 데이터 입출력 판다스는 다양한 형태의 외부 파일을 읽을 수 있다. CSV, MS Excel, SQL, HDF5 Format과 같은 파일 포맷을 읽을 수 있다. 파일 포맷(File Format)에 따른 데이터 입출력 도구에 관한 자료를 요약하면 다음과 같다.
   파일 포맷 How to Read? How to Write?     CSV read_csv to_csv   MS Excel read_excel to_excel   SQL read_sql to_sql    그 외에 HTML, JSON, SAS 포맷과 같은 파일을 읽어오는 다양한 방법에 대해서는 Pandas 공식문서(PDF 다운로드)를 참조하기를 바란다.</description>
    </item>
    
  </channel>
</rss>
