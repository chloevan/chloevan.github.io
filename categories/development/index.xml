<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/categories/development/</link>
    <description>Recent content in Development on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Mar 2020 23:50:39 +0900</lastBuildDate>
    
	<atom:link href="https://chloevan.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shiny tutorial 04 - Layouts</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_04/</link>
      <pubDate>Sun, 29 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_04/</guid>
      <description>공지 이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다
이번에 준비한 Tutorial 코로나 세계현황을 Shiny Dashboard로 만들어 가는 과정을 담았다.
I. 이전 글 소개 처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.
 shiny tutorial 01 - get started shiny tutorial 02 - Shiny Structure shiny tutorial 03 - HTML content  II. Layouts의 개요 이번 시간에는 Shiny Layouts 개요에 대한 간략적인 소개를 하려고 한다.</description>
    </item>
    
    <item>
      <title>shiny tutorial 05 - Sharing Apps</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_05/</link>
      <pubDate>Sun, 29 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_05/</guid>
      <description>공지 이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다
이번에 준비한 Tutorial 코로나 세계현황을 Shiny Dashboard로 만들어 가는 과정을 담았다.
I. 이전 글 소개 처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.
 shiny tutorial 01 - get started shiny tutorial 02 - Shiny Structure shiny tutorial 03 - HTML content shiny tutorial 04 - Shiny Layouts  II. Shiny Deployment의 개요 이 영역은 웹개발자에게는 매우 쉬운 영역일 수도 있다.</description>
    </item>
    
    <item>
      <title>shiny tutorial 03 - HTML content</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_03/</link>
      <pubDate>Fri, 27 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_03/</guid>
      <description>공지 이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다
이번에 준비한 Tutorial 코로나 세계현황을 Shiny Dashboard로 만들어 가는 과정을 담았다.
I. 이전 글 소개 처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.
 shiny tutorial 01 - get started shiny tutorial 02 - Shiny Structure  II. HTML Content 개요 이번 시간에는 HTML Content 개요에 대한 간략적인 소개를 하려고 한다.</description>
    </item>
    
    <item>
      <title>shiny tutorial 02 - Shiny Structure</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_02/</link>
      <pubDate>Sun, 22 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_02/</guid>
      <description>공지 이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다
이번에 준비한 Tutorial 코로나 세계현황을 Shiny Dashboard로 만들어 가는 과정을 담았다.
I. Shiny 소개 지난시간에 Shiny에 관한 대략적인 소개를 했다. 처음 이 페이지를 방문한 사람들 위해 shiny tutorial 01 - get started 에서 짧게 확인하기를 바란다.
II. Shiny App Structure 아래 샘플 코드를 확인하자.
# load the shiny package library(shiny) # 화면 구성 (UI) - 프론트엔드 ui &amp;lt;- fluidPage( numericInput(inputId = &amp;#34;n&amp;#34;, label = &amp;#34;Sample size&amp;#34;, value = 25), plotOutput(outputId = &amp;#34;hist&amp;#34;) ) # 서버 구성 - 벡엔드 server &amp;lt;- function(input, output) { output$hist &amp;lt;- renderPlot({ hist(rnorm(input$n)) # 결과물을 만들어내는 코드 작성 }) } # shiny app 호출 # 프로젝트 진행 시, 폴더 안에 # 파일명은 app.</description>
    </item>
    
    <item>
      <title>shiny tutorial 01 - get started</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_01/</link>
      <pubDate>Sat, 21 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_01/</guid>
      <description>공지 이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다
이번에 준비한 Tutorial 코로나 세계현황을 Shiny Dashboard로 만들어 가는 과정을 담았다.
I. Shiny 소개 Shiny는 R에서 제공하는 일종의 Web Framework이다. 기존 웹사이트와 다르게, 주요 목적은 데이터를 활용해서 대시보드를 만드는 것에 초점이 맞춰져 있다.
가장 큰 장점은 무료로 빠른 프로토타입을 만들 수 있고, HTML, CSS, Javascript와 직접적으로 호환이 되기 때문에 무한한 확장성이 있다. 바로 중급 레벨에서 배우고 싶으시다면 Intermediate Level을 클릭한다.</description>
    </item>
    
    <item>
      <title>Tensorflow For R - Quick Start</title>
      <link>https://chloevan.github.io/r/settings01_installation/</link>
      <pubDate>Mon, 16 Mar 2020 20:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/settings01_installation/</guid>
      <description>1. 개요 (Overview) tensorflow(텐서플로) R 패키지를 사용하기 전에 시스템에 TensorFlow 버전을 설치해야 한다. 아래에서는 TensorFlow 설치 방법과 설치 사용자 정의에 사용할 수 있는 다양한 옵션에 대해 설명 한다.
이번 포스트에서는 주로 R install_tensorflow() 함수의 사용을 다루며, 이는 TensorFlow를 설치하는 데 필요한 다양한 단계에서 wrapper 쉽게 사용할 수 있도록 도와 준다.
Tensorflow(텐서플로)는 아래와 같은 OS 환경에서 구동이 된다.
 Ubuntu 16.04 or later Windows 7 or later macOS 10.12.6 (Sierra) or later (no GPU support)  2.</description>
    </item>
    
    <item>
      <title>Tensorflow 2.0 Installation</title>
      <link>https://chloevan.github.io/python/settings01_installation/</link>
      <pubDate>Sun, 15 Mar 2020 21:32:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/settings01_installation/</guid>
      <description>I. 개요 pip를 사용하여 TensorFlow 설치를 해본다.
II. 시스템 요구사항  Python 3.5-3.7 pip 19.0 이상(manylinux2010 지원 필요) Ubuntu 16.04 이상(64비트) macOS 10.12.6(Sierra) 이상(64비트)(GPU 지원 없음) Windows 7 이상(64비트)(Python 3만 해당) Raspbian 9.0 이상 GPU 지원에는 CUDA® 지원 카드 필요(Ubuntu 및 Windows)  참고: TensorFlow2를 설치하려면 최신 버전의 pip가 필요하다.
III. 시스템에 Python 개발 환경 설치 (1) 환경 구성 우선 확인 우선, Python 환경이 이미 구성되었는지 확인합니다. 참고: Python 3.5~3.7 및 pip &amp;gt;= 19.</description>
    </item>
    
  </channel>
</rss>