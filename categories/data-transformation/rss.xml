<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Transformation on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/categories/data-transformation/</link>
    <description>Recent content in Data Transformation on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 May 2020 14:15:47 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/categories/data-transformation/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python - Pandas 병렬처리</title>
      <link>https://chloevan.github.io/python/pandas/pandas_lambda_swifter/</link>
      <pubDate>Wed, 13 May 2020 14:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_lambda_swifter/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;지난 포스트에서는 &lt;code&gt;lambda&lt;/code&gt;의 기본적인 개념에 대해서 익혔다면, 이제 본격적인 데이터 전처리와 관련된 예제를 올리려고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/python/basic/lambda_and_list_comprehension/&#34;&gt;Python - Lambda and List Comprehension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-가상의-데이터셋-만들기&#34;&gt;II. 가상의 데이터셋 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;25M 행과 5개의 열로 구성된 가상의 숫자 데이터 프레임을 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

pd_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;25000000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcde&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(pd_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;d&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;e&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;89&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;iii-성능-테스트&#34;&gt;III. 성능 테스트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;새로운 컬럼(&lt;code&gt;f&lt;/code&gt;)을 만드는데, if condition을 적용해서 실험을 해본다. 우선 새로운 컬럼을 만드는 함수는 아래와 같이 작성해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_col_fun&lt;/span&gt;(a,b):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;: 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-apply--lambda&#34;&gt;(1) apply + lambda&lt;/h3&gt;
&lt;p&gt;보통 &lt;code&gt;pandas&lt;/code&gt;를 활용하면 &lt;code&gt;apply + lambda&lt;/code&gt; 사용을 권장한다. 이 때 성능 테스트를 위해 &lt;code&gt;%%time&lt;/code&gt;을 활용해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# dataframe 복사&lt;/span&gt;
defaul_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd_temp
swfiter_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd_temp
swifter_npartitions_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd_temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;time
defaul_temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defaul_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: add_col_fun(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;], x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(defaul_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CPU times: user 12min 3s, sys: 236 ms, total: 12min 3s
Wall time: 12min 4s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단하게 &lt;code&gt;2개&lt;/code&gt;의 column을 활용하여 &lt;code&gt;column&lt;/code&gt; &lt;code&gt;1개&lt;/code&gt;를 추가 하는데도 약 12분 가까이 걸리는 걸 확인할 수 있다. (솔직히 넘 느리다)&lt;/li&gt;
&lt;li&gt;그러면 어떻게 수정해야 할까?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-introduction-to-swifter&#34;&gt;IV. Introduction to Swifter&lt;/h2&gt;
&lt;p&gt;먼저 &lt;code&gt;swifter&lt;/code&gt;의 공식 문서를 확인해보자. 필자는 패키지를 볼 때마다, &lt;code&gt;정의&lt;/code&gt; 또는 &lt;code&gt;개발 목적&lt;/code&gt;을 먼저 확인하는 편이다. 그러면 나머지 필요한 함수는 그 때마다 찾아서 쓰면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swifter&lt;/code&gt; 공식 문서: &lt;a href=&#34;https://pypi.org/project/swifter/&#34;&gt;https://pypi.org/project/swifter/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;페이지를 방문하면 패키지의 간단한 정의를 확인할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A package which efficiently applies any function to a pandas dataframe or series in the fastest available manner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉, 위 패키지는 판다스의 &lt;code&gt;dataframe&lt;/code&gt; 또는 &lt;code&gt;series&lt;/code&gt;를 빠르게 사용할 수 있도록 도와주는 일종의 &lt;code&gt;helper&lt;/code&gt;패키지 처럼 보인다.&lt;/p&gt;
&lt;p&gt;어떻게 사용할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install swifter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-application-to-swifter&#34;&gt;(1) Application to Swifter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 default &lt;code&gt;swifter&lt;/code&gt;를 사용하여 &lt;code&gt;f&lt;/code&gt; column을 추가해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;time

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; swifter

swfiter_temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; swfiter_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swifter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: add_col_fun(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;], x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(swfiter_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CPU times: user 5.4 s, sys: 6.77 s, total: 12.2 s
Wall time: 9min 4s&lt;/p&gt;
&lt;h3 id=&#34;2-set_npartitions-적용&#34;&gt;(2) set_npartitions 적용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그런데, 병렬처리는 보통 코어를 할당해주어야 한다. &lt;code&gt;swifter&lt;/code&gt; 패키지에는 이러한 코어를 할당해줄 수 있는 함수(&lt;code&gt;set_npartitions())&lt;/code&gt;가 존재한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;계산방식은 아래와 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;$CPUcount \times hyperthreading \times 2$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;만약 내 컴퓨터의 CPU가 6개이고, hyperthreading이 2개라면 npartitions=24개가 된다.&lt;/li&gt;
&lt;li&gt;CPU를 2개만 사용한다면 &lt;code&gt;npartitions(8)&lt;/code&gt;만 추가하면 된다.&lt;/li&gt;
&lt;li&gt;코드는 아래와 같이 작성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# core 개수 확인&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; multiprocessing

multiprocessing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu_count()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구글 코랩에서 구동중이었는데, CPU가 2개였다!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;time

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; swifter
swifter_npartitions_temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; swifter_npartitions_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swifter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_npartitions(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: add_col_fun(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;], x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(swifter_npartitions_temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CPU times: user 4.16 s, sys: 4.89 s, total: 9.05 s
Wall time: 8min 36s&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swifter&lt;/code&gt;에 &lt;code&gt;npartitions(8)&lt;/code&gt;에 설정할 때, 속도가 약 30-40% 향상 된 것으로 확인된다. 만약 &lt;code&gt;CPU&lt;/code&gt;개수를 추가하면 추가할 수록 연산 속도가 더 빨라질 것으로 기대할 수 있다.&lt;/li&gt;
&lt;li&gt;간단한 함수 적용으로 연산처리 속도가 향상됨을 볼 수 있다.&lt;/li&gt;
&lt;li&gt;실제 &lt;code&gt;github&lt;/code&gt; 페이지에 가면 &lt;code&gt;pandas apply&lt;/code&gt; Vs. &lt;code&gt;Dask apply&lt;/code&gt; Vs. &lt;code&gt;Vectorized&lt;/code&gt; Vs. &lt;code&gt;swift apply&lt;/code&gt;에 관한 비교 코드가 있으니 실제로 비교해보는 것을 추천한다.
&lt;ul&gt;
&lt;li&gt;swifter github 문서: &lt;a href=&#34;https://github.com/jmcarpenter2/swifter&#34;&gt;https://github.com/jmcarpenter2/swifter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/pandas/swifter/comparison.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pandas dataframe을 활용 할 때, 보통 &lt;code&gt;apply + lambda&lt;/code&gt;를 활용하는 것은 거의 정규화 되고 있다. 이유는 &lt;code&gt;lambda&lt;/code&gt;를 사용하는 것이 훨씬 간편하기 때문에 그렇다.&lt;/li&gt;
&lt;li&gt;문제는 속도다. 속도가 느리기 때문에 다른 대체제를 활용하는 경우가 종종 있다. (예: &lt;code&gt;dask&lt;/code&gt;, &lt;code&gt;pyspark&lt;/code&gt; 등)&lt;/li&gt;
&lt;li&gt;각각의 &lt;code&gt;package&lt;/code&gt;를 알고 있다면 도움이 되지만, 문제는 각 패키지에 맞는 문법을 익혀야 하는 것은 부담일 수 있다.&lt;/li&gt;
&lt;li&gt;그러나, 간단하게 &lt;code&gt;swifter&lt;/code&gt; 패키지를 활용하면 간단한 단어 추가로도 성능을 개선하는데 도움을 줄 수 있다는 것에 주목할 필요가 있다.&lt;/li&gt;
&lt;li&gt;또한, cpu 갯수에 맞게 할당을 해주면 더 좋은 속도 개선을 이룰 수 있음을 확인할 수 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s your turn. Learn by doing.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;jmcarpenter2. swifter. Retrieved from &lt;a href=&#34;https://github.com/jmcarpenter2/swifter&#34;&gt;https://github.com/jmcarpenter2/swifter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dealing with NA-01</title>
      <link>https://chloevan.github.io/python/transformation/dealing_with_na_01/</link>
      <pubDate>Sat, 02 May 2020 19:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/transformation/dealing_with_na_01/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;https://towardsdatascience.com/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779&#34;&gt;6 Different Ways to Compensate for Missing Values In a Dataset (Data Imputation with examples)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;실제 데이터를 다루다보면 여러가지 이유로 결측치와 마주하게 된다. 특별한 이유가 없다면, 현업에서는 당연히 NA를 처리해야 한다. 그렇지 않다면 데이터 분석(시각화, 통계, 머신러닝 모형)에 영향을 줄 수 밖에 없다.&lt;/p&gt;
&lt;p&gt;원인은 크게 3가지로 구분될 수 있지만, 이러한 주제는 보통 논문을 통해서 다뤄지니, 여기에서는 일단 건너뛰자. (You like theory?)&lt;/p&gt;
&lt;p&gt;질문, 어떻게 처리해야 할까? (결국 이런걸 원하는 것이니!)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고로, 여기에서는 &lt;code&gt;Module&lt;/code&gt; 설치 등은 다루지 않으며, 데이터는 &lt;code&gt;Scikit-learn&lt;/code&gt;의 &lt;code&gt;California Housing Dataset&lt;/code&gt;을 참고했다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;방법-1-아무것도-하지-않는다&#34;&gt;방법 1. 아무것도 하지 않는다!&lt;/h2&gt;
&lt;p&gt;굉장히 편한 방법이다. 그런데, 이 방법론을 쓰려면 알고리즘을 잘 선택해야 한다. &lt;code&gt;XGBoost&lt;/code&gt;와 같은 알고리즘은 NA값에 대해 대체할 만한 가장 최적의 것으로 대체하며 학습하기도 하지만, 일반적으로 선형회귀모형은 결과가 도출되지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;방법-2-평균-또는-중간값으로-대체&#34;&gt;방법 2. 평균 또는 중간값으로 대체&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Numeric&lt;/code&gt; 데이터에만 적용이 가능하고, 각 Column마다 독립적으로 적용을 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장점: 쉽고 빠르고, small 데이터에 적용이 가능하다.&lt;/li&gt;
&lt;li&gt;단점 (오역 방지차 원문을 그대로 인용)
&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t factor the correlations between features. It only works on the column level.&lt;/li&gt;
&lt;li&gt;Will give poor results on encoded categorical features (do NOT use it on categorical features).&lt;/li&gt;
&lt;li&gt;Not very accurate&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t account for the uncertainty in the imputations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; fetch_california_housing
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LinearRegression
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StratifiedKFold
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mean_squared_error
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqrt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(&lt;span style=&#34;color:#ae81ff&#34;&gt;20200502&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-fetching-데이터&#34;&gt;(1) Fetching 데이터&lt;/h3&gt;
&lt;p&gt;데이터를 가져와서 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_california_housing()
train, target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(dataset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data), pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(dataset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;target)
train_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;]
train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;len(train_columns), column&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;target)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    |      0 |   1 |       2 |       3 |    4 |       5 |     6 |   target |       7 |
|---:|-------:|----:|--------:|--------:|-----:|--------:|------:|---------:|--------:|
|  0 | 8.3252 |  41 | 6.98413 | 1.02381 |  322 | 2.55556 | 37.88 |    4.526 | -122.23 |
|  1 | 8.3014 |  21 | 6.23814 | 0.97188 | 2401 | 2.10984 | 37.86 |    3.585 | -122.22 |
|  2 | 7.2574 |  52 | 8.28814 | 1.07345 |  496 | 2.80226 | 37.85 |    3.521 | -122.24 |
|  3 | 5.6431 |  52 | 5.81735 | 1.07306 |  558 | 2.54795 | 37.85 |    3.413 | -122.25 |
|  4 | 3.8462 |  52 | 6.28185 | 1.08108 |  565 | 2.18147 | 37.85 |    3.422 | -122.25 |
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-na값-임의-대체&#34;&gt;(2) NA값 임의 대체&lt;/h3&gt;
&lt;p&gt;실험을 위해 첫번째 Column에 약 40%에 해당하는 &lt;code&gt;Column&lt;/code&gt;을 부여한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;column &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 20640&lt;/span&gt;
missing_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 8256&lt;/span&gt;
i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(range(column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(missing_pct)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[17455, 4645, 7718, 11453, 7913]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;column[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NaN
column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    8.3252
1    8.3014
2       NaN
3       NaN
4       NaN
5       NaN
6       NaN
7       NaN
8    2.0804
9       NaN
Name: 0, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-평균값-대체-scikit-learn-활용&#34;&gt;(3) 평균값 대체 (Scikit-learn) 활용&lt;/h3&gt;
&lt;p&gt;Scikit-learn 모듈을 활용해서 결측값을 대체해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.impute &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SimpleImputer
imp_mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SimpleImputer(strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;)
imputed_DF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(imp_mean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(train))

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(imputed_DF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    |       0 |   1 |       2 |        3 |    4 |       5 |     6 |     7 |       8 |
|---:|--------:|----:|--------:|---------:|-----:|--------:|------:|------:|--------:|
|  0 | 8.3252  |  41 | 6.98413 | 1.02381  |  322 | 2.55556 | 37.88 | 4.526 | -122.23 |
|  1 | 8.3014  |  21 | 6.23814 | 0.97188  | 2401 | 2.10984 | 37.86 | 3.585 | -122.22 |
|  2 | 3.86937 |  52 | 8.28814 | 1.07345  |  496 | 2.80226 | 37.85 | 3.521 | -122.24 |
|  3 | 3.86937 |  52 | 5.81735 | 1.07306  |  558 | 2.54795 | 37.85 | 3.413 | -122.25 |
|  4 | 3.86937 |  52 | 6.28185 | 1.08108  |  565 | 2.18147 | 37.85 | 3.422 | -122.25 |
|  5 | 3.86937 |  52 | 4.76166 | 1.10363  |  413 | 2.1399  | 37.85 | 2.697 | -122.25 |
|  6 | 3.86937 |  52 | 4.93191 | 0.951362 | 1094 | 2.1284  | 37.84 | 2.992 | -122.25 |
|  7 | 3.86937 |  52 | 4.79753 | 1.06182  | 1157 | 1.78825 | 37.84 | 2.414 | -122.25 |
|  8 | 2.0804  |  42 | 4.29412 | 1.11765  | 1206 | 2.02689 | 37.84 | 2.267 | -122.26 |
|  9 | 3.86937 |  52 | 4.97059 | 0.990196 | 1551 | 2.17227 | 37.84 | 2.611 | -122.25 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;첫번째 행의 값을 보면, &lt;code&gt;NaN&lt;/code&gt;이 &lt;code&gt;3.869374&lt;/code&gt; 형태로 바뀐 것을 볼 수가 있다.&lt;/p&gt;
&lt;p&gt;만약, 바로 머신러닝 모형에 적용한다면, 2D array 형태로 출력해야 되면, 다음과 같은 코드를 유지하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;imp_mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SimpleImputer(strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;)
imp_mean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(train)
imputed_train_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; imp_mean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(train)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(imputed_train_df)):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, imputed_train_df[i])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0 - [   8.3252       41.            6.98412698    1.02380952  322.
    2.55555556   37.88          4.526      -122.23      ]
1 - [ 8.30140000e+00  2.10000000e+01  6.23813708e+00  9.71880492e-01
  2.40100000e+03  2.10984183e+00  3.78600000e+01  3.58500000e+00
 -1.22220000e+02]
2 - [   3.86937366   52.            8.28813559    1.07344633  496.
    2.80225989   37.85          3.521      -122.24      ]
3 - [   3.86937366   52.            5.8173516     1.07305936  558.
    2.54794521   37.85          3.413      -122.25      ]
4 - [   3.86937366   52.            6.28185328    1.08108108  565.
    2.18146718   37.85          3.422      -122.25      ]
5 - [   3.86937366   52.            4.76165803    1.10362694  413.
    2.13989637   37.85          2.697      -122.25      ]
6 - [ 3.86937366e+00  5.20000000e+01  4.93190661e+00  9.51361868e-01
  1.09400000e+03  2.12840467e+00  3.78400000e+01  2.99200000e+00
 -1.22250000e+02]
7 - [ 3.86937366e+00  5.20000000e+01  4.79752705e+00  1.06182380e+00
  1.15700000e+03  1.78825348e+00  3.78400000e+01  2.41400000e+00
 -1.22250000e+02]
8 - [ 2.08040000e+00  4.20000000e+01  4.29411765e+00  1.11764706e+00
  1.20600000e+03  2.02689076e+00  3.78400000e+01  2.26700000e+00
 -1.22260000e+02]
9 - [ 3.86937366e+00  5.20000000e+01  4.97058824e+00  9.90196078e-01
  1.55100000e+03  2.17226891e+00  3.78400000e+01  2.61100000e+00
 -1.22250000e+02]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;방법-3-최빈값-대체&#34;&gt;방법 3. 최빈값 대체&lt;/h2&gt;
&lt;p&gt;최빈값은, 특정 Column에서 가장 많이 나타나는 값으로 대체하는 것이다. 특히 이 방법은 &lt;code&gt;categorical features&lt;/code&gt;를 다룰 때 사용한다. 그러나, 데이터에 자칫 편향성을 가져다 줄 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;column &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 20640&lt;/span&gt;
missing_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 8256&lt;/span&gt;
i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(range(column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(missing_pct)]
column[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NaN
column&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    41.0
1    21.0
2    52.0
3     NaN
4     NaN
5     NaN
6     NaN
7    52.0
8    42.0
9    52.0
Name: 1, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.impute &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SimpleImputer
imp_mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SimpleImputer(strategy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;most_frequent&amp;#39;&lt;/span&gt;)
imputed_DF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(imp_mean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(train))

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(imputed_DF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    |      0 |   1 |       2 |        3 |    4 |       5 |     6 |     7 |       8 |
|---:|-------:|----:|--------:|---------:|-----:|--------:|------:|------:|--------:|
|  0 | 8.3252 |  41 | 6.98413 | 1.02381  |  322 | 2.55556 | 37.88 | 4.526 | -122.23 |
|  1 | 8.3014 |  21 | 5       | 0.97188  | 2401 | 2.10984 | 37.86 | 3.585 | -122.22 |
|  2 | 3.125  |  52 | 8.28814 | 1.07345  |  496 | 2.80226 | 37.85 | 3.521 | -122.24 |
|  3 | 3.125  |  52 | 5.81735 | 1.07306  |  558 | 2.54795 | 37.85 | 3.413 | -122.25 |
|  4 | 3.125  |  52 | 5       | 1.08108  |  565 | 2.18147 | 37.85 | 3.422 | -122.25 |
|  5 | 3.125  |  52 | 5       | 1.10363  |  413 | 2.1399  | 37.85 | 2.697 | -122.25 |
|  6 | 3.125  |  52 | 4.93191 | 0.951362 | 1094 | 2.1284  | 37.84 | 2.992 | -122.25 |
|  7 | 3.125  |  52 | 5       | 1.06182  | 1157 | 1.78825 | 37.84 | 2.414 | -122.25 |
|  8 | 2.0804 |  42 | 5       | 1.11765  | 1206 | 2.02689 | 37.84 | 2.267 | -122.26 |
|  9 | 3.125  |  52 | 5       | 0.990196 | 1551 | 2.17227 | 37.84 | 2.611 | -122.25 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt; Column을 보면 알겠지만, 모두 가장 빈번하게 나온 &lt;code&gt;52&lt;/code&gt;로 대체가 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;결론&#34;&gt;결론&lt;/h2&gt;
&lt;p&gt;결측치 처리에 대해 잠깐 다뤘다. 각각의 방법론에는 모두 장단점이 있기 때문에 신중을 기해야 하며, 특히, &lt;code&gt;numeric feature&lt;/code&gt;에 적용해야 할 방법과 &lt;code&gt;categorical feature&lt;/code&gt;에 적용해야 할 방법에 대해 구분 지어서 생각을 해야 한다.&lt;/p&gt;
&lt;p&gt;다음 시간에는 통계적 기법을 활용한 결측치 대체에 대해 포스팅을 하도록 하겠다. 작은 도움이 되기를 바란다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Dataframe</title>
      <link>https://chloevan.github.io/python/pandas/pandas_dataframe/</link>
      <pubDate>Sat, 18 Apr 2020 11:32:36 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_dataframe/</guid>
      <description>&lt;p&gt;데이터프레임은 2차원 배열의 행과 열로 구성되어져 있다. 대부분의 사람들이 알고 있는 마이크로소프트사의 EXCEL, SQL Table 등을 생각하면 데이터프레임을 쉽게 이해할 수 있다. 판다스에서 가장 많이 사용되는 객체이며, 실제 파이썬을 활용한 데이터 분석을 하고 싶다면 필수적으로 알아야 하는 내용이다. 기본적으로 Python은 행렬 연산에 최적화된 언어라고 할 수 있지만, 판다스 라이브러리는 R의 데이터프레임에서 유래했다고 알려져 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/pandas/data_frame/excel_table.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;여기서 잠깐! 초급자 또는 입문자들이 가장 궁금해하는 것 중의 하나가 R과 Python에 대한 비교가 아닐까 싶다. 통계/컴공 비전공자인 필자가 경험적으로 말씀 드리면 프로그래밍 기초가 전혀 없는 분들 중, 엑셀보다 빠른 데이터 전처리와 간단한 그래프를 그리는 것이 주목적이라면 여전히 R의 데이터프레임은 강력한 무기다. 간단하게 비교를 하자면, R의 대부분은 패키지는 데이터프레임이 기본 객체라고 봐도 무방하다. 그러나 파이썬은 웹개발이 주 언어이기 때문에 쉽게 접근하기가 힘들다. 인덱스, 딕셔너리, 행렬 등 매우 다양한 객체가 존재하기 때문에 이에 대한 인식은 알고서 출발해야 한다. 이 부분 때문에 조금 힘들고 난해할 수 있다. 그러나 데이터를 활용하여 프로그램을 개발하고 싶다면 이 때에는 Python이 가장 강력한 무기가 될 수 있다.&lt;/p&gt;
&lt;p&gt;다시 본론으로 돌아오면, 아래 그림에서 설명하는 것처럼, 여러개의 시리즈들이 한데 모여서 데이터프레임을 이루는 구조가 데이터프레임이라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/pandas/data_frame/series_dataframe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;시리즈가 모여서 데이터프레임이 만들어진다고 보면 더 좋을 듯 하다. 이 때, 데이터프레임의 열은 각각 시리즈의 객체이다. 우선, 판다스를 활용하여 간단하게 데이터프레임을 만들어 본다.&lt;/p&gt;
&lt;h2 id=&#34;i-딕셔너리에서-데이터프레임으로의-변환&#34;&gt;I. 딕셔너리에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

dic_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;벨기에&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;인도&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브라질&amp;#39;&lt;/span&gt;], 
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capital&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브뤼셀&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;뉴델리&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;브라질리아&amp;#39;&lt;/span&gt;], 
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;population&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;11190846&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1303171035&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;207847528&lt;/span&gt;]}

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(dic_data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  country capital  population
0     벨기에     브뤼셀    11190846
1      인도     뉴델리  1303171035
2     브라질   브라질리아   207847528
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;country&amp;rsquo;, &amp;lsquo;capital&amp;rsquo;, &amp;lsquo;population&#39;은 열이름과 관련이 있는 것을 볼 수가 있다. 또한 자동적으로 행 인덱스가 0부터 생성됨을 볼수가 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-시리즈에서-데이터프레임으로의-변환&#34;&gt;II. 시리즈에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;p&gt;이번에는 시리즈에서 데이터프레임으로 변환한다. 아래 샘플코드를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;series &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;], index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]), 
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;])}

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(series)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   one  two
a  1.0  1.0
b  2.0  2.0
c  3.0  3.0
d  NaN  4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;한가지 특이점은 각 컬럼마다 값이 달라도 에러가 발생하지는 않고, 다만 NaN이 작성되는 것을 볼 수가 있다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ndarrays--lists에서-데이터프레임으로의-변환&#34;&gt;III. ndArrays &amp;amp; Lists에서 데이터프레임으로의 변환&lt;/h2&gt;
&lt;p&gt;파이썬은 행렬과 리스트로 작성되는 코드가 많다. ndArrays에서 데이터프레임으로 변환 시, 특정 열(=column)에 결측치가 있으면 에러가 반환된다. 먼저 정상적인 코드를 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ndArrays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], 
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;]}

pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(ndArrays)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;다음은 결측치가 발생한 코드를 확인한다. 아래코드에서 보는 것처럼 ValueError: arrays must all be same length 에러가 발생하는 것을 확인할 수 있다. (실제 에러코드가 발생하는지 확인해본다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ndArrays &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;], 
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;]}

pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(ndArrays)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-4-46a98d14f82f&amp;gt; in &amp;lt;module&amp;gt;
      2             &#39;two&#39;: [4., 3., 2.]}
      3 
----&amp;gt; 4 pd.DataFrame(ndArrays)


/usr/local/lib/python3.7/site-packages/pandas/core/frame.py in __init__(self, data, index, columns, dtype, copy)
    433             )
    434         elif isinstance(data, dict):
--&amp;gt; 435             mgr = init_dict(data, index, columns, dtype=dtype)
    436         elif isinstance(data, ma.MaskedArray):
    437             import numpy.ma.mrecords as mrecords


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in init_dict(data, index, columns, dtype)
    252             arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays
    253         ]
--&amp;gt; 254     return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)
    255 
    256 


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in arrays_to_mgr(arrays, arr_names, index, columns, dtype)
     62     # figure out the index, if necessary
     63     if index is None:
---&amp;gt; 64         index = extract_index(arrays)
     65     else:
     66         index = ensure_index(index)


/usr/local/lib/python3.7/site-packages/pandas/core/internals/construction.py in extract_index(data)
    363             lengths = list(set(raw_lengths))
    364             if len(lengths) &amp;gt; 1:
--&amp;gt; 365                 raise ValueError(&amp;quot;arrays must all be same length&amp;quot;)
    366 
    367             if have_dicts:


ValueError: arrays must all be same length
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드에서 알 수 있는 것처럼, 딕셔너리 또는 시리즈 객체에서 데이터프레임으로 변환하는 경우 NaN을 반환하지만 데이터프레임으로 변환이 가능했다. 그러나 ndArrays의 경우 데이터프레임 객체 생성이 되지 않기 때문에, 데이터프레임으로 변환할 경우, 해당 객체가 ndArrays인지 우선 확인이 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;“10 Minutes to Pandas¶.” 10 Minutes to Pandas - Pandas 1.0.3 Documentation, pandas.pydata.org/pandas-docs/stable/getting_started/10min.html.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Filtering</title>
      <link>https://chloevan.github.io/python/pandas/filter/</link>
      <pubDate>Fri, 03 Apr 2020 22:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/filter/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;필터링은 특정 조건식을 만족하는 행을 따로 추출하는 개념이다. 특정 행의 값에 조건식 &lt;code&gt;True/False&lt;/code&gt;을 판별하여 값을 추출하는 방법이다. 이 때, 비교 연산자 또는 조건식 &lt;code&gt;(&amp;gt;, &amp;lt;, ==, ...)&lt;/code&gt;을 적용하면 행을 추출할 수 있다.&lt;/p&gt;
&lt;p&gt;우선 데이터부터 확인한다. 아래 소스코드를 복사 붙여넣기 하면 데이터를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39;&lt;/span&gt;
sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House  10 Things I Hate About Unix       child   
2  The Empirical House         The Seaborn Identity       adult   
3     Sumdance Cinemas  10 Things I Hate About Unix       adult   
4  The Empirical House                Mamma Median!      senior   

   ticket_quantity  
0                4  
1                2  
2                4  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-1-accessing-a-single-column&#34;&gt;Step 1. Accessing a Single Column&lt;/h2&gt;
&lt;p&gt;우선 조건식을 적용하기 전, Column에 접근해야 가능하다. 여러 방법이 있지만, 아래와 같이 접근해본다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data[&#39;name_of_column&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 &lt;code&gt;ticket_type&lt;/code&gt; Column에 접근해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    senior
1     child
2     adult
3     adult
4    senior
Name: ticket_type, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 값을 통해서 &lt;code&gt;senior&lt;/code&gt;, &lt;code&gt;child&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt;, &amp;hellip;, 순으로 된 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;여기에서 비교연산자를 통해 참/거짓을 판별해야 한다. 만약에, &amp;lsquo;senior&#39;만 가져오도록 한다면, &lt;code&gt;child&lt;/code&gt; &amp;amp; &lt;code&gt;adult&lt;/code&gt; 값은 &lt;code&gt;False&lt;/code&gt;로 반환이 될 것이다. 확인해보자.&lt;/p&gt;
&lt;h2 id=&#34;step-2-comparing-operators&#34;&gt;Step 2. Comparing Operators&lt;/h2&gt;
&lt;p&gt;주로 사용되는 비교연산자는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; (equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt; (not equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  (less than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;  (greater than)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; (greator or equal to)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;isin()&lt;/code&gt; 함수를 적용하면 특정 값을 가진 행들을 따로 추출할 수도 있다. 이 함수를 사용하면, 코드가 좀 더 간결해지도록 작성할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;true_false &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(true_false&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0     True
1    False
2    False
3    False
4     True
Name: ticket_type, dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 값과 비교해보면 &lt;code&gt;child&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt;, &lt;code&gt;adult&lt;/code&gt; 값이 모두 &lt;code&gt;False&lt;/code&gt;로 반환된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;step-3-filtering&#34;&gt;Step 3. Filtering&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Column&lt;/code&gt;에 대한 접근 및 &lt;code&gt;비교연산자&lt;/code&gt;를 통해서, 특정 조건식에 맞는 데이터를 추출해본다. 이 때, 데이터셋을 한번 더 입력하는 번거로움만 거치면 문제가 되지 않는다. 소스코드를 통해 빠르게 구현해보자. 역시나, 크게 어려운 것은 아니다.&lt;/p&gt;
&lt;p&gt;조건은 &lt;code&gt;ticket_type&lt;/code&gt;에서 &lt;code&gt;senior&lt;/code&gt;에 해당하는 행만 추출해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;senior_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(senior_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                      theater_name           movie_title ticket_type  \
0                 Sumdance Cinemas         Harry Plotter      senior   
1              The Empirical House         Mamma Median!      senior   
2              The Empirical House         Mamma Median!      senior   
3                        The Frame         Harry Plotter      senior   
4  Richie&#39;s Famous Minimax Theatre  The Seaborn Identity      senior   

   ticket_quantity  
0                4  
1                2  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-4-isin-활용&#34;&gt;Step 4. isin() 활용&lt;/h2&gt;
&lt;p&gt;여기에서 문제가 생겼다. &lt;code&gt;senior&lt;/code&gt;와 함께, &lt;code&gt;adult&lt;/code&gt;의 값도 같이 추출해달라는 요청이 들어왔다. 물론 각각의 데이터를 개별적으로 추출하는 것도 하나의 방법이 될 수 있지만, 소스코드가 길어질 것이 예상이 된다. 물론 실제로도 그렇다. 한번 해보겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;seniors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;
adults &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adult&amp;#34;&lt;/span&gt;
new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[seniors &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; adults]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House         The Seaborn Identity       adult   
2     Sumdance Cinemas  10 Things I Hate About Unix       adult   
3  The Empirical House                Mamma Median!      senior   
4     Sumdance Cinemas                Harry Plotter       adult   

   ticket_quantity  
0                4  
1                4  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 &lt;code&gt;isin()&lt;/code&gt;을 활용해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales[sales[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_type&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;senior&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adult&amp;#39;&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House         The Seaborn Identity       adult   
2     Sumdance Cinemas  10 Things I Hate About Unix       adult   
3  The Empirical House                Mamma Median!      senior   
4     Sumdance Cinemas                Harry Plotter       adult   

   ticket_quantity  
0                4  
1                4  
2                2  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과값은 똑같지만, 코드 1줄이 줄어든 것을 확인할 수 있다. 문제는, 전체 값이 100개 중에서, 30개만 추출할 때를 생각해보자, &lt;code&gt;isin()&lt;/code&gt; 활용하지 않는다면, 반복적인 불필요한 코드만 계속 늘어날 것을 예상할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;지금까지, Pandas를 활용한 Filtering의 방법 및 접근에 대해 배웠다. 물론 실무에서는 이것보다도 훨씬 더 복잡한 형태로 작업이 되지만, 기본적인 원리는 똑같다. &lt;code&gt;비교연산자&lt;/code&gt;를 통한 &lt;code&gt;참/거짓&lt;/code&gt;의 활용, 그리고 &lt;code&gt;isin()&lt;/code&gt; 함수의 활용을 통해 &lt;code&gt;Filtering&lt;/code&gt; 작업을 수행하며. 복잡한 문자열에 &lt;code&gt;정규표현식(regular expression)&lt;/code&gt;을 활용하기도 한다. 그러나 마찬가지로, &lt;code&gt;참/거짓&lt;/code&gt;을 활용한 비교연산자를 통한 추출방법임에는 변함이 없기 때문에, 다양하게 연습을 해본다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas sort_values()</title>
      <link>https://chloevan.github.io/python/pandas/sort_values/</link>
      <pubDate>Fri, 03 Apr 2020 20:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/sort_values/</guid>
      <description>&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sort_values()&lt;/code&gt; 함수는 일종의 데이터의 정렬과 연관이 있다. 어려운 내용은 아니기 때문에 빠르게 소스 코드 구현 및 확인 하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-sample-tutorial&#34;&gt;II. Sample Tutorial&lt;/h2&gt;
&lt;p&gt;엑셀로 된 ticket_sales 데이터에서 &lt;code&gt;ticket_quantity&lt;/code&gt;가 가장 많이 팔린 영화 Top3를 구하는 소스코드를 구해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/entertainment/movie_ticket_sales.xlsx&amp;#39;&lt;/span&gt;
sales &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;          theater_name                  movie_title ticket_type  \
0     Sumdance Cinemas                Harry Plotter      senior   
1  The Empirical House  10 Things I Hate About Unix       child   
2  The Empirical House         The Seaborn Identity       adult   
3     Sumdance Cinemas  10 Things I Hate About Unix       adult   
4  The Empirical House                Mamma Median!      senior   

   ticket_quantity  
0                4  
1                2  
2                4  
3                2  
4                2  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;데이터가 정상적으로 수집되었다면, 이제 빠르게 &lt;code&gt;Top3&lt;/code&gt; 데이터를 추출하도록 해보자. 소스코드가 어렵지는 않으니, 따라하도록 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sales_sorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ticket_quantity&amp;#39;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
sales_sorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales_sorted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#75715e&#34;&gt;# Top3에 해당하는 행을 출력한다. &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sales_sorted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                      theater_name           movie_title ticket_type  \
0                 Sumdance Cinemas         Harry Plotter      senior   
1                        The Frame        Kung Fu pandas       child   
2  Richie&#39;s Famous Minimax Theatre  The Seaborn Identity       adult   

   ticket_quantity  
0                4  
1                4  
2                4  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 소스코드에서 중요한 것은 &lt;code&gt;sort_values()&lt;/code&gt; 안에서 &lt;code&gt;해당 Column값을 입력한 후&lt;/code&gt;에 &lt;code&gt;ascending = False&lt;/code&gt;를 하게 되면 내림차순으로 정렬이 된다. 이러한 방식을 통해서 행을 출력할 수 있다.&lt;/p&gt;
&lt;p&gt;매우 쉽죠?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas With Excel</title>
      <link>https://chloevan.github.io/python/pandas/pandas_with_excel/</link>
      <pubDate>Mon, 30 Mar 2020 11:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_with_excel/</guid>
      <description>&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;이번 포스트는 기존의 엑셀 사용자를 위해 준비했다. 엑셀에 익숙한 사람들에게 파이썬을 분석 용도로 사용하고자 하는 분들에게는 작은 도움이 되기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터-입출력&#34;&gt;II. 데이터 입출력&lt;/h2&gt;
&lt;p&gt;판다스는 다양한 형태의 외부 파일을 읽을 수 있다. &lt;code&gt;CSV&lt;/code&gt;, &lt;code&gt;MS Excel&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;, &lt;code&gt;HDF5 Format&lt;/code&gt;과 같은 파일 포맷을 읽을 수 있다. &lt;code&gt;파일 포맷(File Format)&lt;/code&gt;에 따른 데이터 입출력 도구에 관한 자료를 요약하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;파일 포맷&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;How to Read?&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;How to Write?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CSV&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_csv&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_csv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MS Excel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_excel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_excel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SQL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;read_sql&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;to_sql&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;그 외에 &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;SAS&lt;/code&gt; 포맷과 같은 파일을 읽어오는 다양한 방법에 대해서는 &lt;a href=&#34;https://pandas.pydata.org/docs/pandas.pdf&#34;&gt;Pandas 공식문서&lt;/a&gt;(PDF 다운로드)를 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-excel-파일&#34;&gt;III. Excel 파일&lt;/h2&gt;
&lt;p&gt;판다스 공식문서(version 1.0.3, Release date: March 18, 2020)에 따르면, &lt;code&gt;read_excel()&lt;/code&gt; 함수는 Excel 2003(.xls), Excel 2007+(.xlsx) 파일을 읽어올 수 있다. 또한, Binary Excel(.xlsb) (한번도 본적은 없다!)도 읽을 수 있다고 하니, 90년대 엑셀 파일이 아니면, 모두 읽기가 가능한 듯 하다 (p. 286 참조).&lt;/p&gt;
&lt;h2 id=&#34;1-파일-읽어오기&#34;&gt;(1) 파일 읽어오기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;read_excel()&lt;/code&gt; 및 &lt;code&gt;to_excel()&lt;/code&gt; 함수는 파이썬의 &lt;code&gt;xlrd&lt;/code&gt;, &lt;code&gt;openpyxl&lt;/code&gt;, &lt;code&gt;pyxlsb&lt;/code&gt;과 같은 모듈이 선행적으로 설치가 되어야 사용할 수 있기 때문에 만약, 함수 실행시 에러(error)가 발생하면 참조하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 사용 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data = pandas.read_excel(&#39;파일 경로(이름)&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 형태로 소스코드를 작성하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/sports/games_plays.xlsx&amp;#39;&lt;/span&gt;
games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(games&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   Unnamed: 0      GameId HomeTeamAbbr VisitorTeamAbbr  Week  \
0           0  2017090700           NE              KC     1   
1           1  2017090700           NE              KC     1   
2           2  2017090700           NE              KC     1   
3           3  2017090700           NE              KC     1   
4           4  2017090700           NE              KC     1   

            Stadium        Location StadiumType        Turf     GameWeather  \
0  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
1  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
2  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
3  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   
4  Gillette Stadium  Foxborough, MA     Outdoor  Field Turf  Clear and warm   

   Temperature  Humidity          PlayId  YardLine  Quarter GameClock  \
0         63.0      77.0  20170907000118        35        1  14:14:00   
1         63.0      77.0  20170907000139        43        1  13:52:00   
2         63.0      77.0  20170907000189        35        1  13:02:00   
3         63.0      77.0  20170907000345         2        1  12:12:00   
4         63.0      77.0  20170907000395        25        1  12:08:00   

  PossessionTeam  Down  Distance FieldPosition  
0             NE     3         2            NE  
1             NE     1        10            NE  
2             NE     1        10            KC  
3             NE     2         2            KC  
4             KC     1        10            KC  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드로 데이터가 정상적으로 업로드 된 것을 확인 할 수 있다. 기존 엑셀 파일에 있는 Column명을 그대로 사용하고자 한다면, &lt;code&gt;read_excel(파일명, header = 0)&lt;/code&gt; 사용하거나, &lt;code&gt;read_excel(header, header = None)&lt;/code&gt;을 사용하면 Column명 대신에 숫자로 순차적으로 표시되게 된다. 그리고, Column명은 첫번째 행에 입력되게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/raw/master/sports/games_plays.xlsx&amp;#39;&lt;/span&gt;
games2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(url, header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(games2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    0           1             2                3     4                 5   \
0  NaN      GameId  HomeTeamAbbr  VisitorTeamAbbr  Week           Stadium   
1  0.0  2017090700            NE               KC     1  Gillette Stadium   
2  1.0  2017090700            NE               KC     1  Gillette Stadium   
3  2.0  2017090700            NE               KC     1  Gillette Stadium   
4  3.0  2017090700            NE               KC     1  Gillette Stadium   

               6            7           8               9            10  \
0        Location  StadiumType        Turf     GameWeather  Temperature   
1  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
2  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
3  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   
4  Foxborough, MA      Outdoor  Field Turf  Clear and warm           63   

         11              12        13       14         15              16  \
0  Humidity          PlayId  YardLine  Quarter  GameClock  PossessionTeam   
1        77  20170907000118        35        1   14:14:00              NE   
2        77  20170907000139        43        1   13:52:00              NE   
3        77  20170907000189        35        1   13:02:00              NE   
4        77  20170907000345         2        1   12:12:00              NE   

     17        18             19  
0  Down  Distance  FieldPosition  
1     3         2             NE  
2     1        10             NE  
3     1        10             KC  
4     2         2             KC  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-파일-저장하기&#34;&gt;(2) 파일 저장하기&lt;/h2&gt;
&lt;p&gt;불러온 파일을 저장하는 방법은 여러가지 있다. 여기서는 고민해야 한다.
Excel 파일로 재 저장 할 것인지, CSV 파일로 저장할 것인지, JSON 파일로 저장할 것인지에 따라 지정하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 사용 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data.to_excel(&#39;파일경로&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 작성하면 된다. 간혹 &lt;code&gt;ModuleNotFoundError: No module named &#39;openpyxl&#39;&lt;/code&gt;과 같은 에러 메시지가 뜨면, 이는 &lt;code&gt;to_excel()&lt;/code&gt; 실행시 필요한 &lt;code&gt;openpyxl&lt;/code&gt; 모듈이 사전에 설치가 되지 않은 것이기 때문에 터미널에서 추가 설치를 진행하면 된다.&lt;/p&gt;
&lt;p&gt;모듈 설치 방법은 아래와 같은 형태로 실행한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip3 install openpyxl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;아나콘다 배포판에는 openpyxl 라이브러리가 기본 제공되므로 설치하지 않아도 되지만, 혹시나 에러가 발생하면 &lt;code&gt;conda install openpyxl&lt;/code&gt; 명령어를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;games&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.xlsx&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;%%bash
ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;example.xlsx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 중요한 작업이 남았다. 실무에서는 보통 여러 형태의 엑셀이 중복적으로 존재하게 된다. 매월00보고서가 엑셀 형태로 남아 있는 경우가 많은데, 복수의 엑셀파일이 존재할 시, 어떻게 효과적으로 엑셀 데이터를 불러올지 고민할 수 밖에 없다. 다음 장에서 다루도록 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Wes McKinney and Pandas Development Team¶. Pandas: Powerful Python data analysis toolkit Release 1.0.3. Retrieved March 18, 2020, from &lt;a href=&#34;https://pandas.pydata.org/docs/pandas.pdf&#34;&gt;https://pandas.pydata.org/docs/pandas.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Lambda Apply 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/apply/</link>
      <pubDate>Mon, 23 Mar 2020 20:10:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/apply/</guid>
      <description>&lt;h2 id=&#34;i-iterrows-itertuples-복습&#34;&gt;I. Iterrows, Itertuples 복습&lt;/h2&gt;
&lt;p&gt;이번 포스팅은 &lt;code&gt;For-loop&lt;/code&gt;의 대안에 관한 함수 &lt;code&gt;apply&lt;/code&gt;에 관한 내용이다. 본 포스트를 보고 학습하시기 전에 &lt;a href=&#34;https://chloevan.github.io/python/pandas/iterrows/&#34;&gt;Pandas Iterrows 함수 활용&lt;/a&gt;과 &lt;a href=&#34;https://chloevan.github.io/python/pandas/itertuples/&#34;&gt;Pandas Itertuples 함수 활용&lt;/a&gt;에서 학습 하기를 바란다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 데이터는 동일한 것을 쓰도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ii-조건부-행-추출&#34;&gt;II. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드삭스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-apply-함수&#34;&gt;III. apply 함수&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt;함수에는 반드시 &lt;code&gt;특정함수(Specific Function)&lt;/code&gt;가 같이 데이터프레임 적용 및 사용이 된다.&lt;/li&gt;
&lt;li&gt;이 때, &lt;code&gt;axis&lt;/code&gt;에 숫자를 기입해야 하는데, &lt;code&gt;0&lt;/code&gt;일 경우에는 &lt;code&gt;column&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;일 경우네는 &lt;code&gt;rows&lt;/code&gt;가 처리된다.&lt;/li&gt;
&lt;li&gt;lambda function도 같이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-column의-적용&#34;&gt;(1) Column의 적용&lt;/h2&gt;
&lt;p&gt;먼저, 각각의 &lt;code&gt;Column&lt;/code&gt;의 합계를 모으도록 한다. Column의 합계이니, &lt;code&gt;sum&lt;/code&gt;함수가 필요하며, &lt;code&gt;axis=0&lt;/code&gt;을 입력했다. 이 때 주의해야 할 것이 있다면, 각 함수가 사용되는 &lt;code&gt;데이터타입&lt;/code&gt;에 맞춰서 데이터 처리가 선행이 되어야 한다. 먼저 전체 &lt;code&gt;Column&lt;/code&gt;에 &lt;code&gt;sum&lt;/code&gt;함수를 적용해보자. 에러가 날 것이지만, 어떻게 에러가 나는지 확인하는 것도 중요하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;stat_totals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(stat_totals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-38-04a01c9fea4a&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 stat_totals = bos_year_df.apply(sum, axis=0)
      2 print(stat_totals)


/usr/local/lib/python3.7/site-packages/pandas/core/frame.py in apply(self, func, axis, raw, result_type, args, **kwds)
   6876             kwds=kwds,
   6877         )
-&amp;gt; 6878         return op.get_result()
   6879 
   6880     def applymap(self, func) -&amp;gt; &amp;quot;DataFrame&amp;quot;:


/usr/local/lib/python3.7/site-packages/pandas/core/apply.py in get_result(self)
    184             return self.apply_raw()
    185 
--&amp;gt; 186         return self.apply_standard()
    187 
    188     def apply_empty_result(self):


/usr/local/lib/python3.7/site-packages/pandas/core/apply.py in apply_standard(self)
    294             try:
    295                 result = libreduction.compute_reduction(
--&amp;gt; 296                     values, self.f, axis=self.axis, dummy=dummy, labels=labels
    297                 )
    298             except ValueError as err:


pandas/_libs/reduction.pyx in pandas._libs.reduction.compute_reduction()


pandas/_libs/reduction.pyx in pandas._libs.reduction.Reducer.get_result()


TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;에러가 &lt;code&gt;usupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;&lt;/code&gt; 인 것을 확인할 수 있다. 이제, 숫자형만 추출하도록 한다. 추출할 &lt;code&gt;Column&lt;/code&gt;은 &lt;code&gt;RS&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;Playoffs&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_num_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Playoffs&amp;#39;&lt;/span&gt;]]
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    RS   RA   W  Playoffs
0  734  806  69         0
1  875  737  90         0
2  818  744  89         0
3  872  736  95         1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;stat_totals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(stat_totals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;RS          3299
RA          3023
W            343
Playoffs       1
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 각 컬럼의 전체 합계가 구해진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-row의-적용&#34;&gt;(2) Row의 적용&lt;/h2&gt;
&lt;p&gt;이번에는 &lt;code&gt;RS&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt;만 합산하는 코드를 작성해본다. 이 때 중요한 것은 &lt;code&gt;axis=1&lt;/code&gt;을 입력하는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;total_runs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(total_runs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    1540
1    1612
2    1562
3    1608
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각각의 합산된 결과값이 나왔다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;playoffs&lt;/code&gt;의 조건에 따라 &lt;code&gt;return&lt;/code&gt; 값을 바꾸는 것을 해본다. 이번에 나오는 소스코드는 &lt;strong&gt;데이터처리 할 때 자주 쓰는 구문&lt;/strong&gt; 이므로 반드시 익히도록 한다.&lt;/p&gt;
&lt;p&gt;먼저, 조건 함수를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text_playoffs&lt;/span&gt;(num_playoffs): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num_playoffs &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yes&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;각 행마다 &lt;code&gt;1&lt;/code&gt;인지 &lt;code&gt;0&lt;/code&gt;인지 확인 후 &lt;code&gt;Text&lt;/code&gt;가 바뀌어야 하기 때문에, 이 때에는 &lt;code&gt;.apply(lambda row: function(row[&amp;quot;name_of_column&amp;quot;]), axis=1)&lt;/code&gt; 형태로 작성하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;convert_playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: text_playoffs(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Playoffs&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(convert_playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0     No
1     No
2     No
3    Yes
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Numeric&lt;/code&gt;이 &lt;code&gt;Character&lt;/code&gt;로 바뀌어진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-apply-활용한-시즌별-승률-계산&#34;&gt;IV. apply 활용한 시즌별 승률 계산&lt;/h2&gt;
&lt;p&gt;이번에는 승률 함수(&lt;code&gt;wp_calc&lt;/code&gt;)를 작성한 후, 팀의 승률을 계산한 것을 기존 데이터프레임(&lt;code&gt;bos_year_df&lt;/code&gt;)에 추가하는 것을 작업을 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wp_cal&lt;/span&gt;(wins, games_played):
    win_perc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wins &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; games_played
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(win_perc,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

win_percs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: wp_cal(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;], row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(win_percs, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    0.43
1    0.56
2    0.55
3    0.59
dtype: float64 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# bos_year_df에 `WP` 칼럼 추가&lt;/span&gt;
bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WP&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; win_percs

&lt;span style=&#34;color:#75715e&#34;&gt;# 여기에서 승률이 0.5 이하인 것을 구하면&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(bos_year_df[bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WP&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   

   RankPlayoffs    G  OOBP  OSLG    WP  
0           NaN  162  0.33  0.43  0.43  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-iterrows-vs-itertuples-vs-apply-의-속도-비교&#34;&gt;V. iterrows Vs. itertuples Vs. apply 의 속도 비교&lt;/h2&gt;
&lt;p&gt;이제 iterrows Vs itertuples Vs apply의 속도를 비교하는 코드를 작성해서, 향후에 어떤 구문을 쓰면 좋을지 고민해본다.&lt;/p&gt;
&lt;p&gt;우선 데이터 관측치를 조금 늘려서 확인하도록 하겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-iterrows의-속도&#34;&gt;(1) iterrows의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;6.51 ms ± 413 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-itertuples의-속도&#34;&gt;(2) itertuples의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.71 ms ± 99.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-apply의-속도&#34;&gt;(3) apply의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs_apply &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: calc_diff(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;], row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RD&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs_apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;2.6 ms ± 121 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 속도에서 볼 수 있듯이, &lt;code&gt;apply&lt;/code&gt;의 함수가 &lt;code&gt;iterrows&lt;/code&gt;의 속도가 약 5.00 ms 더 빠른 것을 확인 할 수 있다. 그러나 &lt;code&gt;itertuples&lt;/code&gt;에 비해서는 꼭 엄청 빠르다고는 할 수 없다.&lt;/p&gt;
&lt;p&gt;사실 이것은 조금 의외의 결과이기는 했다. 어떻게 받아 들여야 할지.. 그러나 확실한 것은 &lt;code&gt;iterrows&lt;/code&gt;보다는 속도가 빠르다는 점과, &lt;code&gt;itertuples&lt;/code&gt;보다는 코드가 훨씬 간결해졌다는 점은 &lt;code&gt;apply&lt;/code&gt;의 함수가 보다 매력적인 것은 확신할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.apply¶. (n.d.). Retrieved March 23, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Itertuples 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/itertuples/</link>
      <pubDate>Sun, 22 Mar 2020 20:36:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/itertuples/</guid>
      <description>&lt;h2 id=&#34;i-iterrows&#34;&gt;I. Iterrows&lt;/h2&gt;
&lt;p&gt;이번 포스팅은 &lt;code&gt;Iterrows()&lt;/code&gt;의 확장개념입니다. 본 포스트를 보고 학습하시기 전에 &lt;a href=&#34;https://chloevan.github.io/python/pandas/iterrows/&#34;&gt;Pandas Iterrows 함수 활용&lt;/a&gt;에서 학습 하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-itertuples의-개념&#34;&gt;II. Itertuples의 개념&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;itertuples()&lt;/code&gt;는 기본적으로 &lt;code&gt;iterrows()&lt;/code&gt; 함수보다는 빠르다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-조건부-행-추출&#34;&gt;III. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드박스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.40  
1           4.0  162  0.34  0.42  
2           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iv-itertuples의-구조&#34;&gt;IV. itertuples의 구조&lt;/h2&gt;
&lt;p&gt;itertuples의 구조는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Pandas(Index=0, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2010, RS=818, RA=744, W=89, OBP=0.34, SLG=0.45, BA=0.27, Playoffs=0, RankSeason=nan, RankPlayoffs=nan, G=162, OOBP=0.33, OSLG=0.4)
Pandas(Index=1, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2009, RS=872, RA=736, W=95, OBP=0.35, SLG=0.45, BA=0.27, Playoffs=1, RankSeason=3.0, RankPlayoffs=4.0, G=162, OOBP=0.34, OSLG=0.42)
Pandas(Index=2, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2008, RS=845, RA=694, W=95, OBP=0.36, SLG=0.45, BA=0.28, Playoffs=1, RankSeason=3.0, RankPlayoffs=3.0, G=162, OOBP=0.32, OSLG=0.39)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;iterrows&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt;값이 &lt;code&gt;Series&lt;/code&gt;형태인 것에 비해, &lt;code&gt;itertuples&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt;값은 &lt;code&gt;Pandas&lt;/code&gt;형으로 출력 되었다. 이러한 성질을 이용해서, 이번에는 &lt;code&gt;Index&lt;/code&gt;, &lt;code&gt;Year&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;Playoffs&lt;/code&gt;을 각각 가져오는 &lt;code&gt;For-loop&lt;/code&gt;문을 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index
  year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Year
  games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;G
  wins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W
  playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, year, games, wins, playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0 2010 162 89 0
1 2009 162 95 1
2 2008 162 95 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 여기에서 &lt;code&gt;playoffs=1&lt;/code&gt; 인 조건을 줘서 데이터를 출력하도록 해본다. 여기에서 &lt;code&gt;1&lt;/code&gt;은 &lt;code&gt;playoff&lt;/code&gt;에 진출했다는 &lt;code&gt;Yes&lt;/code&gt;의 의미이고 &lt;code&gt;0&lt;/code&gt;은 진출하지 못했다는 뜻을 의미한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index
  year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Year
  games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;G
  wins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W
  playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, year, games, wins, playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1 2009 162 95 1
2 2008 162 95 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-itertuples을-활용한-득점과-실점-계산&#34;&gt;V. itertuples을 활용한 득점과 실점 계산&lt;/h2&gt;
&lt;p&gt;이번에는 득점과 실점을 계산한 후 기존 데이터에 다시 추가하는 코드를 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG   RD  
0           NaN  162  0.33  0.40   74  
1           4.0  162  0.34  0.42  136  
2           3.0  162  0.32  0.39  151  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vi-iterrows-vs-itertuples의-속도-비교&#34;&gt;VI. iterrows vs itertuples의 속도 비교&lt;/h2&gt;
&lt;p&gt;이제 iterrows Vs itertuples의 속도를 비교하는 코드를 작성해서, 향후에 어떤 구문을 쓰면 좋을지 고민해본다.&lt;/p&gt;
&lt;p&gt;우선 데이터 관측치를 조금 늘려서 확인하도록 하겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-iterrows의-속도&#34;&gt;(1) iterrows의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;6.47 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-itertuples의-속도&#34;&gt;(2) itertuples의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.57 ms ± 37.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 속도에서 볼 수 있듯이, itertuples의 속도가 iterrows의 속도보다 약 5.00 ms 더 빠른 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;다음시간에는 &lt;code&gt;apply&lt;/code&gt; 함수에 대해 배워보는 시간을 갖도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;vii-reference&#34;&gt;VII. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.itertuples¶. (n.d.). Retrieved March 22, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Iterrows 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/iterrows/</link>
      <pubDate>Fri, 20 Mar 2020 20:32:10 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/iterrows/</guid>
      <description>&lt;h2 id=&#34;i-iterrows의-개념&#34;&gt;I. Iterrows의 개념&lt;/h2&gt;
&lt;p&gt;데이터 전처리를 진행할 때, 데이터프레임에서 행에 반복적으로 접근을 하면서 값을 추출하거나 또는 그 값을 조작하는 일이 발생한다. 예를 들면, 특정 컬럼 A의 값에서 대문자 A를 찾아내 소문자 b로 변경한다고 가정해보자. 이런 경우에는 언제나 For-loop를 통한 반복문 코드 작성을 만들어야 한다.&lt;/p&gt;
&lt;p&gt;이럴 때 보다 효율적으로 접근하는 방법 중 하나가 &lt;code&gt;iterrows()&lt;/code&gt;를 사용하는 경우이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ii-조건부-행-추출&#34;&gt;II. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드박스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.40  
1           4.0  162  0.34  0.42  
2           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-data-frame과-for-loop의-실체&#34;&gt;III. Data Frame과 For-loop의 실체&lt;/h2&gt;
&lt;p&gt;Python DataFrame과 For-loop가 만나면 어떻게 작동을 할까? iterrows() 함수를 활용하여 실체를 한번 들여다 보자.
먼저 각 행을 각각 추출해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0
Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
1
Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
2
Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DataFrame이 For-loop와 만나게 되면 각 loop에서 &lt;code&gt;row&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt; Pandas Series 형태인 것을 확인할 수 있다. For-loop 안에서 데이터 처리를 할 때, Pandas Series 형태인 것을 감안하고 접근해야 한다는 뜻이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row_tuple &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row_tuple)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row_tuple))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(0, Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(1, Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(2, Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 Tuple 형태로 데이터가 Return 했다. DataFrame와 For-loop가 만나면 이렇게 다양한 객체로 다시 Return하는 것을 보았다. Tuple로 결과값을 받을지, 아니면 Series 형태로 받을지는 미리 알고 써야 데이터 처리시의 에러에 잘 대처할 수 있다.&lt;/p&gt;
&lt;p&gt;이번에는 득점과 실점을 계산한 후 기존 데이터에 다시 넣는 것을 해본다.&lt;/p&gt;
&lt;h2 id=&#34;iv-득점-실점-계산&#34;&gt;IV. 득점-실점 계산&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG   RD  
0           NaN  162  0.33  0.40   74  
1           4.0  162  0.34  0.42  136  
2           3.0  162  0.32  0.39  151  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;새로운 컬럼 &lt;code&gt;RD&lt;/code&gt;가 나타난 것을 확인할 수 있을 것이다.
오늘 배운 것은 &lt;code&gt;iterrows()&lt;/code&gt;을 활용한 데이터 가공(Transformation)을 배웠다. 다음 시간에는 &lt;code&gt;itertuples()&lt;/code&gt; 활용법에 대해 배우도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.iterrows¶. (n.d.). Retrieved March 20, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
  </channel>
</rss>