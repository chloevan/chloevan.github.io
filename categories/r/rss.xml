<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/categories/r/</link>
    <description>Recent content in R on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 May 2020 11:10:39 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/categories/r/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ch04 - Modeling Visualisation</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch04_modeling_visualisation/</link>
      <pubDate>Fri, 15 May 2020 11:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch04_modeling_visualisation/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words
— English Language Adage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The simple graph has brought more information to the data analyst’s mind than any other device.
— John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;보통 시각화라고 하면 탐색적 자료 분석에 시각화를 많이 의미할 수도 있다. 그런데, 모델링 결과 또는 통계적인 결과를 시각화로 보여줄 수 있는 능력을 갖추는 것은 데이터분석가로써 한번 더 도약할 수 있다.&lt;/p&gt;
&lt;p&gt;오늘 포스트는 이러한 주제에 맞춰서 다루도록 한다. 주요 이론적인 내용은 &lt;code&gt;Hadley Wickham&lt;/code&gt;의 &lt;code&gt;R for Data Science&lt;/code&gt;를 참고했다.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-모델의-정의&#34;&gt;II. 모델의 정의&lt;/h2&gt;
&lt;p&gt;통계에서 모델은 무엇일까? 또는 통계에서 모델의 역할은 무엇일까? 학자마다, 또는 주어진 환경에 따라 다르게 정의될 수도 있지만,&lt;/p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;모델은 데이터의 특유의 알고리즘을 통해 일반적인 패턴을 가장 잘 요약해주는 일종의 &lt;/code&gt;summary&lt;code&gt;와 같은 기능&lt;/code&gt;이다라고 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;보통 모델이 &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;not true&lt;/code&gt; 이렇게 인식될 수도 있다. 그러나, 모델은 &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;not true&lt;/code&gt;로 인식되기 보다는 &lt;code&gt;useful&lt;/code&gt; or &lt;code&gt;not useful&lt;/code&gt;로 판단하는 것이 좋다. 즉, 쓸만한 모형을 찾는 과정이 &lt;code&gt;modeling&lt;/code&gt;이라고 할 수 있겠다.&lt;/p&gt;
&lt;h2 id=&#34;iii-모델링-시각화&#34;&gt;III. 모델링 시각화&lt;/h2&gt;
&lt;p&gt;모형 학습을 위해서 필요한 필수 패키지를 설치한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(modelr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(moderndive)
&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(na.action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; na.warn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-sample-데이터-추출&#34;&gt;(1) Sample 데이터 추출&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;evals&lt;/code&gt; 데이터에서 20개 정도의 데이터만 추출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 재현성&lt;/span&gt;
sample_20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; evals &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sample_n&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(bty_avg, score)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-250개의-모형&#34;&gt;(2) 250개의 모형&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;evals&lt;/code&gt; 데이터에 있는 2개의 변수를 활용해서 산점도를 그려본다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x축은 &lt;code&gt;bty_avg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;y축은 &lt;code&gt;score&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 보면, 가운데 기준으로 위쪽으로 데이터가 모여 있는 것을 볼 수 있다.&lt;/li&gt;
&lt;li&gt;이 때, 양변수가 만나는 점을 설명할 수 있는 모형을 만들어보자.&lt;/li&gt;
&lt;li&gt;보통 이러한 관계를 선형 관계라고 표현한다.
$$ y = a_0 + a_x \times x $$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 데이터에 접하는 모형 250개를 만들어 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;models &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tibble&lt;/span&gt;(
  a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;),
  a2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1, slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2), data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그림에서 보는 것처럼 굉장히 다양한 모형을 만들면서 최적의 모형을 찾는 과정이 데이터 분석의 프로세스라고 보면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-최적의-모형-찾기&#34;&gt;(3) 최적의 모형 찾기&lt;/h3&gt;
&lt;p&gt;최적의 모형은 어떻게 찾을 수 있을까?&lt;/p&gt;
&lt;p&gt;최적의 모형을 찾으려면 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내 &lt;code&gt;geom_smooth()&lt;/code&gt;를 사용할 수 있다. 그러나, 문제는 &lt;code&gt;geom_smooth&lt;/code&gt;를 사용하면 시각적으로는 결과적으로는 도움이 되지만, 실제 중간과정은 생략되었기 때문에 설명 부분에서는 조금 아쉬움이 있다.&lt;/p&gt;
&lt;p&gt;이 부분이 오늘 과정의 핵심이며, 1차원 함수의 기울기와 상수를 찾는 것을 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_smooth&lt;/span&gt;(method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;, se&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-computing-distance&#34;&gt;(4) Computing Distance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최적의 모형을 찾은 다음에 각각의 모형으로 각 점들이 얼마나 떨어졌는지 확인하는 함수를 작성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3가지 함수가 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model_1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;measure_distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eval_dist&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;model_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(a, data) {
  a[1] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bty_avg &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[2]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;위 함수는 기울기와 상수를 정의하는 단순 회귀 모형 함수를 만든 것이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[1]&lt;/code&gt;은 상수를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[2]&lt;/code&gt;은 기울기를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data$bty_avg&lt;/code&gt;는 입력값을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;measure_distance &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(mod, data) {
  diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;score &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model_1&lt;/span&gt;(mod, data)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(diff^2))
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;measure_distance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), sample_20)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7.23253
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최적의 모형을 찾을 때 &lt;code&gt;RMSE&lt;/code&gt;이라는 평균 제곱근 오차라는 통계적인 평가지표를 활용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 함수는 기울기(=3)와 상수(=2)를 적용해서 데이터 &lt;code&gt;sample_20&lt;/code&gt;에 대한 RMSE 값을 측정한 결과는 &lt;code&gt;7.23253&lt;/code&gt; 이 나왔다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-all-model-dist&#34;&gt;(5) All model dist&lt;/h3&gt;
&lt;p&gt;이제 전체 데이터와 모형간의 &lt;code&gt;거리&lt;/code&gt;를 계산한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;all_model_dist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(a1, a2) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;measure_distance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(a1, a2), sample_20)
}

models2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; models &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map2_dbl&lt;/span&gt;(a1, a2, all_model_dist))

models2 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##      a1     a2  dist
##   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.640  0.699 1.42 
## 2 1.27  -0.461 4.85 
## 3 3.34   0.260 0.666
## 4 2.34   0.732 1.53 
## 5 3.70   0.317 1.00
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;6-best-5-model&#34;&gt;(6) Best 5 model&lt;/h3&gt;
&lt;p&gt;위 데이터를 근거로 가장 좋은 모델 5개를 찾는 그래프를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grey30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1, slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dist), 
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(models2, &lt;span style=&#34;color:#a6e22e&#34;&gt;rank&lt;/span&gt;(dist) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-9-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 주어진 데이터에서 가장 좋은 모형 5개를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-최적의-모형-찾기&#34;&gt;(7) 최적의 모형 찾기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 &lt;code&gt;optim()&lt;/code&gt; 함수를 활용해서 최적의 기울기와 상수를 찾아보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;best &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;optim&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), measure_distance, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_20)

best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 3.91539624 0.07585949
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기울기와 상수를 적용하여 다시 &lt;code&gt;ggplot2&lt;/code&gt; 그래프를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(bty_avg, score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grey30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par[1], slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par[2])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-11-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제로 &lt;code&gt;lm&lt;/code&gt; 함수를 활용해여 기울기와 상수를 구해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;lm_mod &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt;(score &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; bty_avg, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_20)

&lt;span style=&#34;color:#a6e22e&#34;&gt;coef&lt;/span&gt;(lm_mod)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## (Intercept)     bty_avg 
##  3.91595907  0.07572129
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;실제로 &lt;code&gt;best&lt;/code&gt;에서 추출한 것과, &lt;code&gt;lm&lt;/code&gt; 함수를 사용한 값과 동일한 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번 포스트의 목적은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용하여 최적의 모형을 찾는 과정을 살펴 봤다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시각화는 이렇게 모형을 찾는 과정도 넣을 수 있는데, 이러한 시각화를 활용하면 보다 효율적으로 선형회귀 모형에 대해 설명을 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Grolemund, G., &amp;amp; Wickham, H. (n.d.). R for Data Science. Retrieved from &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;https://r4ds.had.co.nz/&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Shiny App Deployment Using GCP</title>
      <link>https://chloevan.github.io/r/shiny/applications/gcp_shiny/</link>
      <pubDate>Sun, 10 May 2020 19:47:18 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/applications/gcp_shiny/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;Google Data Studio는 놀랍도록 유연한 도구로서 마케팅 대행사 중 Google Analytics를 활용한 업체들은 대부분 항상 사용합니다. 때로는 유연성이 더 필요할 때 R &amp;lsquo;s Shiny 패키지를 사용하여 데이터 시각화 / 대시 보드 앱을 만드는 것이 매우 쉽습니다. 이 옵션을 사용하면 모든 소스의 데이터를 예측 모델링과 함께 사용할 수 있는 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;이 블로그 게시물은 3 부분으로 나누어져 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저 Google Cloud Virtual Machine (VM)을 설정하고 웹 액세스를 허용하도록 방화벽 규칙을 구성합니다.&lt;/li&gt;
&lt;li&gt;R, RStudio 및 Shiny를 설치합니다.&lt;/li&gt;
&lt;li&gt;마지막으로 우리는 Shiny 앱을 배포하려고 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ii-가상환경-설치&#34;&gt;II. 가상환경 설치&lt;/h2&gt;
&lt;p&gt;먼저 필자의 로컬 컴퓨터 환경은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Air (13-inch, 2017)&lt;/li&gt;
&lt;li&gt;MacOS Mojave Version 10.14.4&lt;/li&gt;
&lt;li&gt;Processor 2.2 GHZ Intel Core i7&lt;/li&gt;
&lt;li&gt;Memory 8 GB 1600 MHZ DDR3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017년 판매기준, 맥북에서 가장 저 사양의 컴퓨터라고 보시면 됩니다. 사실 큰 의미는 없습니다. 인터넷으로 구글 클라우드에 접속하면 되는 것이기 때문입니다. 물론 gcloud SDK를 설치해서 한다면 OS 버전 확인은 필수입니다.&lt;/p&gt;
&lt;h3 id=&#34;1-구글-클라우드-platform-계정&#34;&gt;(1) 구글 클라우드 Platform 계정&lt;/h3&gt;
&lt;p&gt;먼저 Google Cloud Platform 계정이 있어야하며 프로젝트를 설정해야합니다. 자세한 사항은 링크를 참고하여 주시기 바랍니다. 링크 - &lt;a href=&#34;https://cloud.google.com/&#34;&gt;구글 클라우드 플랫폼&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-가상환경-설정하기&#34;&gt;(2) 가상환경 설정하기&lt;/h3&gt;
&lt;p&gt;보통 gcloud SDK를 활용하여 가상환경을 만들기도 합니다만, Terminal 환경이 익숙하지 않은 분들에게는 일단은 추천하지 않습니다. SDK를 활용하여 도전하고 싶다면 다음 링크를 참고하여 주시기 바랍니다. 링크 - &lt;a href=&#34;https://cloud.google.com/sdk/install&#34;&gt;Google Cloud SDK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;구글 클라우드 환경에서 간단한 클릭으로 가상환경 설정하기를 진행하려고 합니다.&lt;/p&gt;
&lt;h4 id=&#34;1단계-vm-클릭하기&#34;&gt;1단계: VM 클릭하기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rshiny_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2단계-vm-환경-설정하기&#34;&gt;2단계: VM 환경 설정하기&lt;/h4&gt;
&lt;p&gt;설정은 여러 방식으로 할 수 있습니다만, 전 기본만 사용해서 세팅하도록 하겠습니다. 제가 설정한 방법은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: rshinydemo&lt;/li&gt;
&lt;li&gt;Region: asia-east1 (Taiwan)&lt;/li&gt;
&lt;li&gt;Zone: asia-east1-c&lt;/li&gt;
&lt;li&gt;Machine Type: small (1-shared vCPU) / 1.7 GB memory&lt;/li&gt;
&lt;li&gt;Boot Disk: Ubuntu 18.04 LTS&lt;/li&gt;
&lt;li&gt;Identify and API Access: Allow full access to all Cloud APIs&lt;/li&gt;
&lt;li&gt;Firewall: Allow HTTP traffic &amp;amp; Allow HTTPs traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 내용을 아래 화면에서 입력 또는 클릭하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rshiny_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;최종결과값이 아래와 같이 나오면 기본 환경 설정은 된 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rshiny_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3단계-고정-ip-설정하기&#34;&gt;3단계: 고정 IP 설정하기&lt;/h4&gt;
&lt;p&gt;고정 외부 IP에 접속하기 위해 고정 IP를 설정하는 방법을 진행해야 합니다. VPC Network에서 External &lt;code&gt;IP Addresses&lt;/code&gt;를 클릭후 &lt;code&gt;Ephemeral&lt;/code&gt;를 &lt;code&gt;Static&lt;/code&gt;를 바꿔 줍니다. 그러면, 고정 IP 등록에 관한 팝업창이 활성화가 되는데, 이 때 적절한 이름으로 등록합니다. 아래 화면처럼 바꿔줍니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/external_ip.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4단계-apache-웹서버로-외부-접속-되는지-확인하기&#34;&gt;4단계: Apache 웹서버로 외부 접속 되는지 확인하기&lt;/h4&gt;
&lt;p&gt;Cloud Shell를 연 다음, 간단하게 아래 코드를 입력하여 웹서버가 정상적으로 열리는지 확인합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo apt-get update
$ sudo apt-get install apache2
$ sudo systemctl status apache2
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;●&lt;/span&gt; apache2.service - The Apache HTTP Server
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기까지 진행 후, 위 초록색 색상의 &lt;code&gt;apache2.service - The Apache HTTP Server&lt;/code&gt; 보이면 서버는 현재 작동중이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;마지막으로 외부 IP를 활용하여, 확인하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/apache2.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-가상환경에-r과-rstudio-설치진행하기&#34;&gt;III. 가상환경에 R과 RStudio 설치진행하기&lt;/h2&gt;
&lt;p&gt;아래 그림 상단 오른쪽에 Activate Cloud Shell을 클릭하면 가상환경 위 Terminal 환경이 나올겁니다. 여기에서 기본적인 R과 RStudio를 가상환경에서 설치 진행하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rshiny_6.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;아래 그림에서 검은색 화면이 Cloud Shell 화면입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rshiny_7.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;이제부터 Terminal 소스 코드를 입력하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;1단계-소프트웨어-업데이트하기&#34;&gt;1단계: 소프트웨어 업데이트하기&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;sudo apt-get update 
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약, 중간에  **Do you want to continue? [Y/N]**라는 질문이 나오면 &lt;strong&gt;Y&lt;/strong&gt;라고 답하고 계속 진행합니다.&lt;/p&gt;
&lt;p&gt;성공적으로 끝나면 R 저장소를 sources.list 파일에 추가해야 우분투가 응용 프로그램을 가져올 위치를 알 수 있습니다. 아래의 코드 청크는 저장소 목록에 한 줄을 추가 한 다음 우분투 서버가 R을 다운로드하고 기존 패키지를 업데이트하며 r-base 및 r-base dev를 설치하는 데 필요한 키를 전달합니다.&lt;/p&gt;
&lt;h3 id=&#34;2단계-sourceslist-파일에-default-list-설치하기&#34;&gt;2단계: Sources.list 파일에 Default List 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cd /etc/apt/sources.list&lt;/code&gt; 파일을 열어서 아래 코드를 추가합니다. (만약에 없을 경우)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install emacs ## &amp;lt;- 편집 에디터 설치입니다. (옵션)
$ sudo emacs sources.list
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//archive.ubuntu.com/ubuntu bionic universe multiverse
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//archive.ubuntu.com/ubuntu bionic universe multiverse

deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic universe
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic universe
deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic-updates universe
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic-updates universe

deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic multiverse
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic multiverse
deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse

deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//security.ubuntu.com/ubuntu bionic-security universe
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//security.ubuntu.com/ubuntu bionic-security universe
deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//security.ubuntu.com/ubuntu bionic-security multiverse
deb-src http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//security.ubuntu.com/ubuntu bionic-security multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3단계-r-설치하기&#34;&gt;3단계: R 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cd /etc/apt/sources.list&lt;/code&gt; 파일을 열어서 아래 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;deb http&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//cran.rstudio.com/bin/linux/ubuntu xenial/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그 다음, CRAN Network와 연결 할 수 있는 Key ID를 입력합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
$ sudo apt install software-properties-common
$ sudo apt install apt-transport-https
$ sudo apt update
$ sudo apt install r-base
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약에 &lt;code&gt;depends: r-commended&lt;/code&gt;와 같은 에러가 발생이 되면 다음과 같이 수정을 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo apt-get install update-manager-core
$ sudo &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;-release-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 코드에서 만약 에러가 나면 아래 코드에서 &lt;code&gt;Prompt=normal&lt;/code&gt;로 되어 있는지 확인합니다. 만약 &lt;code&gt;lts&lt;/code&gt;로 등록되어 있으면, &lt;code&gt;normal&lt;/code&gt;로 수정 후 다시 &lt;code&gt;sudo do-release-upgrade&lt;/code&gt; 명령어를 입력하고 ENTER를 수행합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ cat /etc/update-manager/release-upgrades
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4단계-r-패키지-설치하기&#34;&gt;4단계: R 패키지 설치하기&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo apt-get install libcurl4-openssl-dev libssl-dev libxml2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5단계-r-shiny-설치하기&#34;&gt;5단계: R Shiny 설치하기&lt;/h3&gt;
&lt;h4 id=&#34;첫번째-방법-r-프로그램에서-r-shiny-설치하기&#34;&gt;첫번째 방법: R 프로그램에서 R Shiny 설치하기&lt;/h4&gt;
&lt;p&gt;먼저 R을 실행하여 정상적으로 프로그램이 열리는지 확인합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다음부터는 R 스크립트를 활용하여 몇몇 패키지를 설치합니다. (설치시간 오래 걸립니다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shiny&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rmarkdown&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dplyr&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;패키지 설치 후 &lt;strong&gt;q()&lt;/strong&gt; 입력 후 작업공간을 저장합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;(save workspace&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; y for yes.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;두번째-방법-터미널에서-r-shiny-설치하기&#34;&gt;두번째 방법: 터미널에서 R Shiny 설치하기&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;install.packages()&lt;/code&gt; 함수를 활용하여 shiny 패키지를 설치합니다. (설치시간 오래 걸립니다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo su - \
-c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R -e \&amp;#34;&lt;/span&gt;install.packages(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shiny&amp;#39;&lt;/span&gt;, repos=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://cran.rstudio.com/&amp;#39;&lt;/span&gt;)\&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;어떤 방법을 하던 큰 상관은 없습니다.&lt;/p&gt;
&lt;h3 id=&#34;6단계-r-studio-서버-설치하기&#34;&gt;6단계: R Studio 서버 설치하기&lt;/h3&gt;
&lt;p&gt;RStudio 싸이트에서 직접 참고하였습니다. (Ubuntu 18+)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo apt-get install gdebi-core
$ sudo wget https&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.1335-amd64.deb
$ sudo gdebi rstudio-server-1.2.1335-amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rstudio-server.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 형태가 나오면 성공입니다. 사용자(evan)를 추가하여 실제로 접속하도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo adduser evan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http://외부IP:8787를 URL에 접속하면 RStudio Server가 접속이 될 것입니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rserver.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;방금전에 만든 사용자 ID와 비번을 입력하여 접속합니다. 제대로 접속되었는지 확인합니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/rserver_main.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7단계-r-shiny-서버-설치하기&#34;&gt;7단계: R Shiny 서버 설치하기&lt;/h3&gt;
&lt;p&gt;다시 터미널로 가서 아래와 같은 명령어를 입력합니다. 마찬가지로 R Shiny Server 홈페이지에서 직접 참고하였습니다.
참고: &lt;a href=&#34;https://www.rstudio.com/products/shiny/download-server/&#34;&gt;https://www.rstudio.com/products/shiny/download-server/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$ sudo wget https&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.9.923-amd64.deb
$ sudo gdebi shiny-server-1.5.9.923-amd64.deb
$ sudo systemctl status shiny-server.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http://외부IP:3838를 URL에 접속하면 RShiny Server가 접속이 될 것입니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/shinyserveraccess.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 나왔다면 서버는 정상적으로 작동중입니다.&lt;/p&gt;
&lt;h2 id=&#34;iv-shiny-app-배포&#34;&gt;IV. Shiny App 배포&lt;/h2&gt;
&lt;p&gt;여기에서는 Shiny App에 관한 내용은 대해서는 생략하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;1-uir&#34;&gt;(1) ui.R&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyUI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-serverr&#34;&gt;(2) server.R&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define server logic required to draw a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {

    output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;distPlot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({

        &lt;span style=&#34;color:#75715e&#34;&gt;# generate bins based on input$bins from ui.R&lt;/span&gt;
        x    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; faithful[, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(x), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x), length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# draw the histogram with the specified number of bins&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(x, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bins, col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkgray&amp;#39;&lt;/span&gt;, border &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;)

    })

})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위와 같이 두개의 파일을 생성 후, 마지막으로 &lt;strong&gt;Run App&lt;/strong&gt;을 실행합니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/runApp.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;아래 주소에서도 확인할 수 있습니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/runApp_activation.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-다른-사용자도-볼수-있도록-하고-싶다면&#34;&gt;V. 다른 사용자도 볼수 있도록 하고 싶다면?&lt;/h2&gt;
&lt;h3 id=&#34;1-작업-파일을-ui-파일에-붙이기&#34;&gt;(1) 작업 파일을 ui 파일에 붙이기&lt;/h3&gt;
&lt;p&gt;기본값으로, Shiny Server 는 &lt;code&gt;/srv/shiny-server/&lt;/code&gt;를 싸이트 디렉토리로 사용합니다. 따라서, R 작업파일 디렉토리를 &lt;code&gt;/srv/shiny-server/&lt;/code&gt;에 복사하도록 합니다.&lt;/p&gt;
&lt;p&gt;제 경우는 &lt;code&gt;/home/evan/R/shiny/sample/&lt;/code&gt;에 &lt;code&gt;ui.R&lt;/code&gt; 파일과 &lt;code&gt;server.R&lt;/code&gt;파일이 있기 때문에 아래와 같이 명령어를 통해 파일을 넣어놨습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo cp -r evan/R/shiny/sample/ /srv/shiny-server/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-웹주소-확인하기&#34;&gt;(2) 웹주소 확인하기&lt;/h3&gt;
&lt;p&gt;브라우저 주소 입력창에 &lt;strong&gt;http://외부IP주소:3838/sample&lt;/strong&gt; 입력합니다. &lt;strong&gt;sample&lt;/strong&gt; 폴더명과 똑같다고 생각하면 됩니다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/gcp_shiny/sample.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;조대협 . (2016, May 30). 구글 클라우드 생성하기 - VM 생성과 접속. Retrieved from &lt;a href=&#34;https://bcho.tistory.com/1107&#34;&gt;https://bcho.tistory.com/1107&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download RStudio Server. (n.d.). Retrieved from &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;https://www.rstudio.com/products/rstudio/download-server/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to Deploy Interactive R Apps with Shiny Server. (2018, December 18). Retrieved from &lt;a href=&#34;https://www.linode.com/docs/development/r/how-to-deploy-rshiny-server-on-ubuntu-and-debian/&#34;&gt;https://www.linode.com/docs/development/r/how-to-deploy-rshiny-server-on-ubuntu-and-debian/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Installation of R 3.5 on Ubuntu 18.04 LTS and tips for spatial packages. (2018, August 10). Retrieved from &lt;a href=&#34;https://www.r-bloggers.com/installation-of-r-3-5-on-ubuntu-18-04-lts-and-tips-for-spatial-packages/&#34;&gt;https://www.r-bloggers.com/installation-of-r-3-5-on-ubuntu-18-04-lts-and-tips-for-spatial-packages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Introduction: Server documentation. (n.d.). Retrieved from &lt;a href=&#34;https://help.ubuntu.com/lts/serverguide/configuration.html.en&#34;&gt;https://help.ubuntu.com/lts/serverguide/configuration.html.en&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Objects - Dataframe</title>
      <link>https://chloevan.github.io/r/basics/dataframe/</link>
      <pubDate>Wed, 06 May 2020 11:10:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/dataframe/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 Tutorial은 강사에게 강의를 듣는 과거-현재-미래 학생들을 위해 작성하였습니다.&lt;/p&gt;
&lt;p&gt;이 글을 읽어주시는 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-dataframe의-개요&#34;&gt;I. DataFrame의 개요&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;본 포스트는 프로그래밍과 R을 처음 배우는 사람을 위해 작성하였습니다. 짧게 읽어두시기를 바랍니다. 공부하실 때는 복잡하게 생각하지는 마시기를 바랍니다. 영어의 기본단어 및 문법을 배우듯이 그냥 받아들이시기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;데이터프레임은 서로 다른 성질의 벡터가 모여 있는 집합이라고 할 수 있다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-데이터프레임-생성&#34;&gt;(1) 데이터프레임 생성&lt;/h3&gt;
&lt;p&gt;이제 데이터프레임을 만들어보자. 어려운 것은 아니니 쉽게 따라 올 수 있을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 아래와 순서로 코드 작성하면 된다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data.frame()&lt;/code&gt; 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;이름 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;홍길동&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;심청이&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;김길동&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;성춘향&amp;#34;&lt;/span&gt;)
나이 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
지각 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(이름 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 이름, 
           나이 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 나이, 
           지각 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 지각)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##     이름 나이  지각
## 1 홍길동   30  TRUE
## 2 심청이   20 FALSE
## 3 김길동   34 FALSE
## 4 성춘향   50 FALSE
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-stringsasfactors--false&#34;&gt;(2) stringsAsFactors = FALSE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 기능은 2006년에&lt;code&gt;data.frame()&lt;/code&gt; &amp;amp; &lt;code&gt;read.table()&lt;/code&gt; 함수에 처음 적용이 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R.4.0.0 버전이 2020년 4월 24일 배포된 이후에, &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;의 기능은 사라지게 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 기능이 하는 주요 역할은 &lt;code&gt;string&lt;/code&gt; 데이터를 &lt;code&gt;factor&lt;/code&gt;로 자동 변환을 해주는 기능이 있었는데, 자동 변환 해주는 것이 사라졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-데이터-내보내기&#34;&gt;II. 데이터 내보내기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이제 데이터를 내보내기를 하겠다. 만들어진 데이터를 내보내는 방법은 크게 3가지가 있다.&lt;/li&gt;
&lt;li&gt;또한 이 영역은 주로 &lt;code&gt;File IO&lt;/code&gt;와 연관이 있는데, 결국 실무에서는 &lt;code&gt;Database&lt;/code&gt; 연결이 되며, 이 부분은 사실 매우 중요하면서 큰 영역이기에 추후에 따로 기술하도록 한다.&lt;/li&gt;
&lt;li&gt;이번 포스트에서 간단하게 &lt;code&gt;csv&lt;/code&gt;파일, &lt;code&gt;엑셀&lt;/code&gt;파일로 내보내기를 수행한다. &#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;방법-1-csv&#34;&gt;방법 1. csv&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;csv&lt;/code&gt;으로 내보내기 할 때는 대표적으로 &lt;code&gt;write.csv()&lt;/code&gt; 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;우선, 데이터프레임 객체를 만든 후, csv 파일에 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(이름 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 이름, 
           나이 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 나이, 
           지각 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 지각)
&lt;span style=&#34;color:#a6e22e&#34;&gt;write.csv&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp, file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/temp.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;우선 &lt;code&gt;temp&lt;/code&gt;라는 데이터 객체를 만든다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write.csv()&lt;/code&gt; 함수를 활용하는데, &lt;code&gt;x&lt;/code&gt;는 데이터의 객체를 의미하고, &lt;code&gt;file&lt;/code&gt;은 저장할 파일의 경로를 의미한다.&lt;/li&gt;
&lt;li&gt;이 때, 확장자명을 &lt;code&gt;.csv&lt;/code&gt; 꼭 명시해주셔야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;방법-2-엑셀&#34;&gt;방법 2. 엑셀&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 엑셀로 내보내기를 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.packages(&amp;#34;writexl&amp;#34;)&lt;/span&gt;
writexl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write_xlsx&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp, path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/temp.xlsx&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;엑셀로 내보내는 것은 별도의 패키지를 설치해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install.packages(&amp;quot;writexl&amp;quot;)&lt;/code&gt;을 실행해서 패키지를 설치합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_xlsx()&lt;/code&gt; 함수 안에 있는, 인수는 &lt;code&gt;write.csv()&lt;/code&gt; 함수와 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-파일-불러오기&#34;&gt;III. 파일 불러오기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이제 파일을 불러온다. 파일을 불러올 때는 &lt;code&gt;read&lt;/code&gt; 계열로 호출하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/temp.csv&amp;#34;&lt;/span&gt;)
temp2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; readxl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;read_xlsx&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/temp.xlsx&amp;#34;&lt;/span&gt;, sheet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;csv&lt;/code&gt; 파일을 불러올 때는 &lt;code&gt;read.csv()&lt;/code&gt; 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.xlsx&lt;/code&gt; 파일을 불러올 때는 &lt;code&gt;readxl&lt;/code&gt; 패키지 안에 있는 &lt;code&gt;read_xlsx()&lt;/code&gt; 함수를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-자주하는-실수-핸들링&#34;&gt;VI. 자주하는 실수 핸들링&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;그러나, 입문자들에게 위 함수를 바로 써서 성공하는 경우는 거의 없다.&lt;/li&gt;
&lt;li&gt;아래 에러문구를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;temp2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; readxl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;read_xlsx&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/temp.xlsx&amp;#34;&lt;/span&gt;, sheet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Error&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; `path` does not exist&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ‘data&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;temp.xlsx’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;위 에러가 의미하는 것은 무엇일까? 경로 에러입니다.&lt;/li&gt;
&lt;li&gt;경로는 어떻게 수정해야 할까요?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getwd()&lt;/code&gt;를 실행하여 먼저 현재 경로를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getwd&lt;/span&gt;()
[1]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/your/current/directory&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setwd()&lt;/code&gt; 함수안에 경로를 지정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setwd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/my/new/directory&amp;#39;&lt;/span&gt;)
[1]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/my/new/directory&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;경로 에러시 위와 같이 경로를 재지정하면 파일을 불러올 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;벡터에 관한 설명이 필요하다면, &lt;a href=&#34;https://chloevan.github.io/r/basics/basic_objects_vector/&#34;&gt;Basic Objects - Vector&lt;/a&gt;에서 확인하기를 바란다. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ch03 - gghistostats</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch03_gghistostats/</link>
      <pubDate>Mon, 04 May 2020 11:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch03_gghistostats/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;[^2]에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggstatsplot)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번에는 보고서에 작성할 시각화 보고서를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ggplot2-with-histogram&#34;&gt;III. ggplot2 with Histogram&lt;/h2&gt;
&lt;p&gt;지난 포스트 &lt;a href=&#34;https://chloevan.github.io/r/datavisualisation/ch02_histogram/&#34;&gt;ch02 - Histogram&lt;/a&gt;에서 히스토그램에 관한 그래프를 그려봤다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예시) 이 때, 1월과 7월을 비교하는 그래프를 그려본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; mean_sales

jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))
mean_jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; mean_sales &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(jan_jul, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_jan_jul, 
             &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grp.mean, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month), 
             linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그렇지만, 통계 결과 보고서로 제출하기에는 무언가 아쉽다. ggplot2 패키지 extension 중에서 &lt;code&gt;ggstatsplot&lt;/code&gt; 패키지가 있다. 꾸준하게 버전이 업데이트 중인 것으로 봐서 통계 보고서 작성 시, 참조하면 좋을 것 같다.&lt;/p&gt;
&lt;h2 id=&#34;iv-gghistostats&#34;&gt;IV. gghistostats&lt;/h2&gt;
&lt;p&gt;우선 &lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/gghistostats.html&#34;&gt;tutorial&lt;/a&gt;를 참조해서 시각화를 작성해보자.&lt;/p&gt;
&lt;h3 id=&#34;1-sample-tutorial&#34;&gt;(1) Sample Tutorial&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(psych)
dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; psych&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sat.act)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 700
## Columns: 6
## $ gender    &amp;lt;int&amp;gt; 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2,…
## $ education &amp;lt;int&amp;gt; 3, 3, 3, 4, 2, 5, 5, 3, 4, 5, 3, 4, 4, 4, 3, 4, 3, 4, 4, 4,…
## $ age       &amp;lt;int&amp;gt; 19, 23, 20, 27, 33, 26, 30, 19, 23, 40, 23, 34, 32, 41, 20,…
## $ ACT       &amp;lt;int&amp;gt; 24, 35, 21, 26, 31, 28, 36, 22, 22, 35, 32, 29, 21, 35, 27,…
## $ SATV      &amp;lt;int&amp;gt; 500, 600, 480, 550, 600, 640, 610, 520, 400, 730, 760, 710,…
## $ SATQ      &amp;lt;int&amp;gt; 500, 500, 470, 520, 550, 640, 500, 560, 600, 800, 710, 600,…
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때, &lt;code&gt;ACT&lt;/code&gt; 변수를 가지고 히스토그램으로 시각화 예제가 나온다. 그대로 복사하기 보다는 하나씩 scripting 해서 각각의 인수(Argument)가 무엇을 의미하는지 음미하면서 실습을 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ggstatsplot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gghistostats&lt;/span&gt;(
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; psych&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sat.act, &lt;span style=&#34;color:#75715e&#34;&gt;# data from which variable is to be taken&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ACT, &lt;span style=&#34;color:#75715e&#34;&gt;# numeric variable&lt;/span&gt;
  results.subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t run statistical tests&lt;/span&gt;
  messages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off messages&lt;/span&gt;
  xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACT Score&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# x-axis label&lt;/span&gt;
  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Distribution of ACT Scores&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# title for the plot&lt;/span&gt;
  subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N = 700&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# subtitle for the plot&lt;/span&gt;
  caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data courtesy of: SAPA project (https://sapa-project.org)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# caption for the plot&lt;/span&gt;
  centrality.k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# show 1 decimal places for centrality label&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 보고서를 출력할 수가 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-1월과-7월-데이터-비교-그래프&#34;&gt;(2) 1월과 7월 데이터 비교 그래프&lt;/h3&gt;
&lt;p&gt;그렇다면 한번 적용해보자. 그런데, 우리는 1월과 7월 데이터만 필요하다. 이 때에는 &lt;code&gt;grouping.var&lt;/code&gt; 인수와 &lt;code&gt;plotgrid.args&lt;/code&gt;를 추가하기만 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ggstatsplot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grouped_gghistostats&lt;/span&gt;(
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jan_jul, &lt;span style=&#34;color:#75715e&#34;&gt;# jan_jul 변경&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales, &lt;span style=&#34;color:#75715e&#34;&gt;# sales &lt;/span&gt;
  xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sales&amp;#34;&lt;/span&gt;,
  grouping.var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month, &lt;span style=&#34;color:#75715e&#34;&gt;# grouping variable 1 = Jan, 7 = Jul&lt;/span&gt;
  title.prefix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Month&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# prefix for the fixed title&lt;/span&gt;
  k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# number of decimal places in results&lt;/span&gt;
  type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# robust test: one-sample percentile bootstrap&lt;/span&gt;
  test.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# test value against which sample mean is to be compared&lt;/span&gt;
  test.value.line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# show a vertical line at `test.value`&lt;/span&gt;
  bar.measure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;density&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# density&lt;/span&gt;
  centrality.parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;median&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# plotting centrality parameter&lt;/span&gt;
  centrality.line.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#D55E00&amp;#34;&lt;/span&gt;),
  centrality.label.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#D55E00&amp;#34;&lt;/span&gt;),
  test.value.line.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#009E73&amp;#34;&lt;/span&gt;),
  test.value.label.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#009E73&amp;#34;&lt;/span&gt;),
  messages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off messages&lt;/span&gt;
  ggtheme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ggthemes&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme_stata&lt;/span&gt;(), &lt;span style=&#34;color:#75715e&#34;&gt;# changing default theme&lt;/span&gt;
  ggstatsplot.layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off ggstatsplot theme layer&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# arguments relevant for ggstatsplot::combine_plots&lt;/span&gt;
  title.text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Distribution of Sales across Month(Jan&amp;#34;&lt;/span&gt;,
  caption.text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data is from ggplot2 package&amp;#34;&lt;/span&gt;,
  plotgrid.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(
    nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;July&amp;#34;&lt;/span&gt;)
  )
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프처럼, 그룹별로도 시각화를 작성할 수 있다. 그러나, 조금 더 디자인을 하기 원한다면, &lt;code&gt;purrr&lt;/code&gt; 패키지와 같이 코드를 작성하는 것을 권하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/purrr_examples.html?q=purr&#34;&gt;using ggstatsplot with the purrr package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v-향후-방향&#34;&gt;V. 향후 방향&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;올해 논문도 써야 하는데, 위 패키지를 근거로 하나둘씩 한글화를 만들어 봐야겠다는 생각이 든다.&lt;/li&gt;
&lt;li&gt;중간중간 시간이 날 때마다 &lt;code&gt;논문을 위한 시각화&lt;/code&gt; 함수를 만들어 봐야겠다.&lt;/li&gt;
&lt;li&gt;또한, 위 코드에서 보는 것처럼, 한글 설명이 없어서, 위 패키지를 작성하면서 한글화 작업도 조금씩 병행해보려고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ch02 - Histogram</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch02_histogram/</link>
      <pubDate>Sun, 03 May 2020 20:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch02_histogram/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;[^2]에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;를 실행하면 &lt;code&gt;Registered ~&lt;/code&gt;라는 문구가 나왔다면 컴퓨터내 시스템에서 &lt;code&gt;RStudio&lt;/code&gt; 환경으로 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 정상적으로 불러왔다는 뜻이다. 이제 패키지 내 다양한 함수를 사용할 수 있는 사전준비가 완료된 것으로 이해해도 좋다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ggplot2-with-histogram&#34;&gt;III. ggplot2 with Histogram&lt;/h2&gt;
&lt;p&gt;히스토그램은 언제 그려야 할까?&lt;/p&gt;
&lt;p&gt;산점도 그래프가 두개의 연속형 변수를 통해서 변수간의 관계를 파악하는 그래프라고 한다면, 히스토그램은 연속형 변수 1개를 활용하여 각 변수마다 고유의 분포를 보여주고 싶을 때 작성한다. &lt;code&gt;txhousing&lt;/code&gt; 데이터에서 sales 변수를 가지고 데이터를 작성하도록 해보자.&lt;/p&gt;
&lt;p&gt;우선 아래코드를 실행 후 결과를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프를 보면, 데이터가 오른쪽으로 꼬리모양 형태를 띠며 분포하고 있는 것을 그리고 있다. 특히, sales 값 중 &amp;gt; 7500 이상 되는 값도 눈에 띄는데, 이것을 통계적인 용어로 이상치(outlier)라고 부른다.&lt;/p&gt;
&lt;p&gt;그런데, 이상치는 평균을 한쪽으로 치우치게 만들 뿐 아니라 표준편차를 부풀릴 뿐만 아니라 표준편차를 근간으로 하는 모든 통계적인 모델링에 악영향을 미친다.&lt;/p&gt;
&lt;h3 id=&#34;1-add-color-and-fill&#34;&gt;(1) Add Color and fill&lt;/h3&gt;
&lt;p&gt;히스토그램의 대략적인 기능을 이해했다면, 이제 본격적으로 시각화에 집중해본다. 색상을 입혀보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-x축에-평균선을-그려보자&#34;&gt;(2) X축에 평균선을 그려보자.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;평균선을 그리려면, &lt;code&gt;geom_vline()&lt;/code&gt; 함수를 추가해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)), 
             color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashed&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;line types의 종류에는,&lt;code&gt;“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”&lt;/code&gt;가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-change-plot-colors-by-groups&#34;&gt;(3) Change Plot Colors by groups&lt;/h3&gt;
&lt;p&gt;우선 &lt;code&gt;dplyr&lt;/code&gt; 패키지를 활용하여 월별 평균을 구해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 2
##    month grp.mean
##    &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
##  1     1     357.
##  2     2     431.
##  3     3     563.
##  4     4     578.
##  5     5     650.
##  6     6     685.
##  7     7     666.
##  8     8     648.
##  9     9     530.
## 10    10     516.
## 11    11     462.
## 12    12     504.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 &lt;code&gt;data.table&lt;/code&gt;을 활용하여 평균을 구해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(data.table)
txhousing2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.table&lt;/span&gt;(txhousing)
txhousing2[, .(Mean&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)), by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##     month     Mean
##  1:     1 356.9289
##  2:     2 430.8285
##  3:     3 563.1863
##  4:     4 577.5174
##  5:     5 649.7366
##  6:     6 685.1188
##  7:     7 665.8299
##  8:     8 647.8975
##  9:     9 529.6961
## 10:    10 516.3344
## 11:    11 462.0295
## 12:    12 504.4146
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;위 방법 중 마음에 드는 것을 선택해 &lt;code&gt;mean_sales&lt;/code&gt;라고 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; mean_sales
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(mean_sales)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   month grp.mean
##   &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
## 1     1     357.
## 2     2     431.
## 3     3     563.
## 4     4     578.
## 5     5     650.
## 6     6     685.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때, 1월과 7월을 비교하는 그래프를 그려본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))
mean_jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; mean_sales &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(jan_jul, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_jan_jul, 
             &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grp.mean, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month), 
             linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-8-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저, &lt;code&gt;geom_vline(new_data, ~)&lt;/code&gt;함수 안에 새로운 데이터를 추가해서 작성하는 것도 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_x_log10()&lt;/code&gt;을 추가하였는데, 로그변환을 통해서 정규변환 형태로 만든 이후에 그래프를 비교하면 보다 시각적으로 비교하는 데 용이하다.&lt;/li&gt;
&lt;li&gt;위와 같이 1월과 7월별로 히스토그램으로도 충분히 그래프를 비교할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-assignment&#34;&gt;IV. Assignment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s your turn.&lt;/li&gt;
&lt;li&gt;전체 평균 데이터셋을 구해서 &lt;code&gt;geom_vline()&lt;/code&gt;함수를 추가해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>stackoverflow with dplyr 01 - mutate_all</title>
      <link>https://chloevan.github.io/r/datatransform/dplyr01_mutate_all/</link>
      <pubDate>Thu, 30 Apr 2020 10:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datatransform/dplyr01_mutate_all/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;dplyr 문법에 관한 설명은 사실 차고 넘친다. 구체적인 설명은 하지 않겠다. Google이나 Naver에서 dplyr을 검색해보자! 검색하면 쉽게 정리된 글들이 많이 있다.&lt;/p&gt;
&lt;p&gt;그런데, 실제 실무에서 다루는 데이터의 질과 양은 다 다르다. 데이터 가공은 결국 연구자의 환경에 따라 달라지는데, 조금 더 효과적으로 dplyr 문법을 사용하려면 결국엔 아이디어가 필요하고, 그리고 &lt;code&gt;stackoverflow&lt;/code&gt;를 찾게 되어 있다. 집단 지성의 힘이랄까?&lt;/p&gt;
&lt;p&gt;그래서 가급적, &lt;code&gt;stackoverflow&lt;/code&gt;에 나와 있는 문제 중 재미있는 해결법 등을 소개하며 연재하려고 한다.&lt;/p&gt;
&lt;p&gt;제 강의를 들으신 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;ii-problems&#34;&gt;II. Problems&lt;/h2&gt;
&lt;p&gt;2017년 쯤 올라온 질문이다. &lt;a href=&#34;https://stackoverflow.com/questions/43314328/how-to-use-dplyrmutate-all-for-rounding-selected-columns&#34;&gt;How to use dplyr::mutate_all for rounding selected columns&lt;/a&gt; 한번 읽기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패키지 버전&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# devtools::install_github(&amp;#34;hadley/dplyr&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;packageVersion&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dplyr&amp;#34;&lt;/span&gt;)
[1] ‘&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5.0.9001&lt;/span&gt;’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; df
&lt;span style=&#34;color:#75715e&#34;&gt;# A tibble: 6 × 7&lt;/span&gt;
    gene_symbol fold_change  pvalue ctr.mean_exp tre.mean_exp  ctr.cv  tre.cv
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;fctr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610005&lt;/span&gt;C13Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;1.54037&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.53120&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00583&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00899&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.49291&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6.06505&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610007&lt;/span&gt;P14Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;1.10976&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00033&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;59.67286&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;66.22232&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.20263&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.28827&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610009&lt;/span&gt;B22Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;0.78500&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00000&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;83.28470&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;65.37819&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.17445&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33958&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610009L18&lt;/span&gt;Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;0.79852&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00011&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88321&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;5.49638&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.46288&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.53295&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610009&lt;/span&gt;O20Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;0.91615&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00387&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;14.67696&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;13.44630&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.25430&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.26679&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0610010&lt;/span&gt;B08Rik     &lt;span style=&#34;color:#ae81ff&#34;&gt;0.87931&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01455&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.10363&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0.97043&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.39564&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.52364&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;하고 싶었던 것&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d like to round the floats (2nd columns onward) to 3 digits. What&amp;rsquo;s the way to do it with dplyr::mutate_all()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;round() 함수를 적용해서 소수점 3자리로 통일하고 싶다는 것이다. 내용적(content)으로는 사실 간단한 문제다. 그런데, Column이 숫자와, 문자 등 복잡하게 섞여 있으면 프로그래밍적(programming)으로는 쉽지 않다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시도했던 것&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;cols &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(df)[2&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# df &amp;lt;- df %&amp;gt;% mutate_each_(funs(round(.,3)), cols)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Warning message:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;#39;mutate_each_&amp;#39; is deprecated.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Use &amp;#39;mutate_all&amp;#39; instead.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# See help(&amp;#34;Deprecated&amp;#34;) &lt;/span&gt;

df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate_all&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(.,3)), cols)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;에러 메시지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;Error in &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate_impl&lt;/span&gt;(.data, dots) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; arguments passed to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;round&amp;#39;&lt;/span&gt;which requires &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; or &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; arguments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;우선, 프로그래밍 입문자들에게 위 에러의 공유는 매우 좋은 본보기가 될 것 같다. 프로그래밍과 관련된 업무를 하는 사람에게 에러는 사실 좋은 것이다. 수정하면서 조금 더 나은 결과물이 나오는 하나의 과정이기 때문에 그렇다. (여담이지만, 처음 자바를 배울 때 이게 너무 힘들어서 포기했다. 에러를 잡는데 많은 시간이 걸려서 포기했던 지난날을 떠올리며..)&lt;/p&gt;
&lt;p&gt;그런데, 실무에서 신입이 가장 어려운 부분은 에러가 난 것을 어떻게 공유하고 전달해야 할지 모르는데 있다. 신입 뿐만 아니라 모든 사람들이 에러와 시간을 보내고 있는데, 위 에러 메시지만 던져주면 당연히 상사도 모른다!&lt;/p&gt;
&lt;p&gt;위와 같이 전체적인 맥락과 무엇을 하려는지 명시해주면, 에러를 이해하기도 그리고 수정하기가 훨씬 수월해진다.&lt;/p&gt;
&lt;h2 id=&#34;iii-understanding&#34;&gt;III. Understanding&lt;/h2&gt;
&lt;p&gt;그렇다면 무엇이 문제일까? 결론적으로 말하면 문법이 맞지 않은 거다. 왜 문법이 맞지 않은 것일까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.packages(&amp;#34;dplyr&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;packageVersion&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dplyr&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &#39;0.8.5&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;1-mutate_all-vs-mutate_if-or-mutate_at&#34;&gt;(1) mutate_all Vs. mutate_if or mutate_at&lt;/h3&gt;
&lt;p&gt;mutate_all과 mutate_if는 다르다. 7개의 변수 모두가 변환하는 건 아니다. 그중에서 일부 &lt;code&gt;double&lt;/code&gt; 형태만 바꾸는 것이다. 즉, 애초에 함수를 잘못 쓴것이다.&lt;/p&gt;
&lt;p&gt;따라서, 관련 답지를 봐도, &lt;code&gt;mutate_all&lt;/code&gt;로 추천하기 보다는 &lt;code&gt;mutate_if&lt;/code&gt;나 &lt;code&gt;mutate_at&lt;/code&gt;으로 추천하는 것을 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-across-소개&#34;&gt;(2) across() 소개&lt;/h3&gt;
&lt;p&gt;버전이 업그레이드 된 경우에 쓸수 있는 새로운 함수를 소개하고 있는데, 사내망을 이용한다면, 위와 같은 답지는 도움이 안된다. &lt;code&gt;dplyr&lt;/code&gt; 패키지 하나만 업그레이드의 문제가 아니라 의존성 있는 다른 패키지들도 동시 다발적으로 다 설치를 해줘야 한다. 안 그러면 패키지 설치 에러를 잡아야 하는 촌극이 발생한다. (원래 이 문제 해결하려는 게 아니었으니까)&lt;/p&gt;
&lt;p&gt;물론 인터넷 환경은 상관이 없다. 그러나 사내망이라면 문제가 복잡해지기 때문에, 스터디용으로 활용가치는 있으나 실무에서 즉시 적용하기에는 문제가 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-application&#34;&gt;IV. Application&lt;/h2&gt;
&lt;p&gt;이제 적용을 해보자. 적용을 할 때, 필자가 주로 쓰는 건, 본 포스트처럼, &lt;code&gt;가상의 Sample&lt;/code&gt; 데이터를 만들어보는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;1-응용방법-1&#34;&gt;(1) 응용방법 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
df  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;structure&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(gene_symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;structure&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, .Label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610005C13Rik&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610007P14Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009B22Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009L18Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009O20Rik&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610010B08Rik&amp;#34;&lt;/span&gt;), class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;factor&amp;#34;&lt;/span&gt;), fold_change &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.54037&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.10976&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.785&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.79852&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.91615&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.87931&lt;/span&gt;), pvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5312&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00033&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00387&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01455&lt;/span&gt;), ctr.mean_exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00583&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;59.67286&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83.2847&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88321&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14.67696&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.10363&lt;/span&gt;), tre.mean_exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00899&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;66.22232&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65.37819&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.49638&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.4463&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.97043&lt;/span&gt;), ctr.cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.49291&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.20263&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.17445&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.46288&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2543&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.39564&lt;/span&gt;), tre.cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;6.06505&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.28827&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33958&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.53295&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.26679&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.52364&lt;/span&gt;)), .Names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gene_symbol&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fold_change&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pvalue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ctr.mean_exp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tre.mean_exp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ctr.cv&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tre.cv&amp;#34;&lt;/span&gt;), row.names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-6L&lt;/span&gt;), class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbl_df&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbl&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data.frame&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;예시답안을 활용한 적용
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutate_at&lt;/code&gt; 함수를 활용해서 적용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate_at&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, round, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   gene_symbol   fold_change pvalue ctr.mean_exp tre.mean_exp ctr.cv tre.cv
##   &amp;lt;fct&amp;gt;               &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 0610005C13Rik       1.54   0.531        0.006        0.009  5.49   6.06 
## 2 0610007P14Rik       1.11   0           59.7         66.2    0.203  0.288
## 3 0610009B22Rik       0.785  0           83.3         65.4    0.174  0.34 
## 4 0610009L18Rik       0.799  0            6.88         5.50   0.463  0.533
## 5 0610009O20Rik       0.916  0.004       14.7         13.4    0.254  0.267
## 6 0610010B08Rik       0.879  0.015        1.10         0.97   0.396  0.524
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 있는 값처럼 &lt;code&gt;digits=3&lt;/code&gt;으로 변환된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-응용방법-2&#34;&gt;(2) 응용방법 2&lt;/h3&gt;
&lt;p&gt;그런데, 만약 &lt;code&gt;Column&lt;/code&gt; 중간에 문자형 데이터가 있을 경우에는 &lt;code&gt;df[2:7]&lt;/code&gt;당연히 적용이 되지 않는다. 그럼 어떻게 해야 할까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mutate_if를 활용한 적용
&lt;ul&gt;
&lt;li&gt;이번엔 문자열 데이터를 중간에 오도록 살짝 변형하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;structure&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(fold_change &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.54037&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.10976&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.785&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.79852&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.91615&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.87931&lt;/span&gt;), pvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5312&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00033&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00387&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01455&lt;/span&gt;), ctr.mean_exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00583&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;59.67286&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83.2847&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88321&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14.67696&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.10363&lt;/span&gt;), tre.mean_exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00899&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;66.22232&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65.37819&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.49638&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.4463&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.97043&lt;/span&gt;), gene_symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;structure&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, .Label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610005C13Rik&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610007P14Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009B22Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009L18Rik&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610009O20Rik&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0610010B08Rik&amp;#34;&lt;/span&gt;), class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;factor&amp;#34;&lt;/span&gt;), ctr.cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.49291&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.20263&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.17445&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.46288&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2543&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.39564&lt;/span&gt;), tre.cv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;6.06505&lt;/span&gt;, 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.28827&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.33958&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.53295&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.26679&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.52364&lt;/span&gt;)), .Names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;( 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fold_change&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pvalue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ctr.mean_exp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tre.mean_exp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gene_symbol&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ctr.cv&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tre.cv&amp;#34;&lt;/span&gt;), row.names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-6L&lt;/span&gt;), class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbl_df&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbl&amp;#34;&lt;/span&gt;, 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data.frame&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   fold_change  pvalue ctr.mean_exp tre.mean_exp gene_symbol   ctr.cv tre.cv
##         &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;          &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1       1.54  0.531        0.00583      0.00899 0610005C13Rik  5.49   6.07 
## 2       1.11  0.00033     59.7         66.2     0610007P14Rik  0.203  0.288
## 3       0.785 0           83.3         65.4     0610009B22Rik  0.174  0.340
## 4       0.799 0.00011      6.88         5.50    0610009L18Rik  0.463  0.533
## 5       0.916 0.00387     14.7         13.4     0610009O20Rik  0.254  0.267
## 6       0.879 0.0146       1.10         0.970   0610010B08Rik  0.396  0.524
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;mutate_at를 활용해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate_at&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, round, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
Error in &lt;span style=&#34;color:#a6e22e&#34;&gt;Math.factor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ‘round’ not meaningful for factors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;보시다시피, &lt;code&gt;round()&lt;/code&gt;함수는 당연한 말이지만, &lt;code&gt;factors&lt;/code&gt;에는 적용되지 않는다. 이제 &lt;code&gt;mutate_if&lt;/code&gt;를 적용해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate_if&lt;/span&gt;(is.numeric, round, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   fold_change pvalue ctr.mean_exp tre.mean_exp gene_symbol   ctr.cv tre.cv
##         &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;          &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1       1.54   0.531        0.006        0.009 0610005C13Rik  5.49   6.06 
## 2       1.11   0           59.7         66.2   0610007P14Rik  0.203  0.288
## 3       0.785  0           83.3         65.4   0610009B22Rik  0.174  0.34 
## 4       0.799  0            6.88         5.50  0610009L18Rik  0.463  0.533
## 5       0.916  0.004       14.7         13.4   0610009O20Rik  0.254  0.267
## 6       0.879  0.015        1.10         0.97  0610010B08Rik  0.396  0.524
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 잘 적용이 되었다. 이제, &lt;code&gt;mutate_at&lt;/code&gt;을 사용할 것인지, 아니면 &lt;code&gt;mutate_if&lt;/code&gt;를 사용할 것인지는 사용자의 데이터셋 환경에 따라 달라지는 것이다.&lt;/p&gt;
&lt;p&gt;여기에서 응용하는 것은 사용자에게 달린 문제다.&lt;/p&gt;
&lt;p&gt;물론, 에러는 또 나올 것이다. 그러면 위와 같은 방법으로 해결하면 된다. 처음이 어렵지만, 시간이 지나면, 이러한 과정은 이제 당연히 느껴질 것이고, 덤으로 &lt;code&gt;영어&lt;/code&gt;실력도 조금씩 늘어날 것이다.&lt;/p&gt;
&lt;p&gt;작은 도움이 되었기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;stacoverflow. (2017). &amp;ldquo;How to use dplyr::mutate_all for rounding selected columns&amp;rdquo;. Retrieved from &lt;a href=&#34;https://stackoverflow.com/questions/43314328/how-to-use-dplyrmutate-all-for-rounding-selected-columns&#34;&gt;https://stackoverflow.com/questions/43314328/how-to-use-dplyrmutate-all-for-rounding-selected-columns&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>list handling</title>
      <link>https://chloevan.github.io/r/basics/list/</link>
      <pubDate>Wed, 29 Apr 2020 11:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/list/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;모든 프로그래밍 언어에는 기본적으로 데이터타입이 존재한다. R도 프로그래밍 언어이기 때문에 데이터 타입의 일반적인 유형이 존재한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/r_basics/data_structure.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt;의 기본 개념을 익혔다면, 전반적인 구조에 대해 살피는 시간을 갖도록 한다. 먼저 동일 성질의 &lt;code&gt;Vector&lt;/code&gt;가 모여서 &lt;code&gt;matrix&lt;/code&gt;도 되고, 데이터프레임도 된다. 그리고 이러한 다양한 데이터의 구조가 모여 리스트를 형성하는데,&lt;/p&gt;
&lt;p&gt;리스트를 만드는 것도 중요한 건, 즉 이해다. 리스트에 접근법이 중요한데, 리스트를 잘 다루면, &lt;code&gt;apply&lt;/code&gt; 함수 계열을 사용하는데도 큰 도움이 된다.&lt;/p&gt;
&lt;p&gt;특히, 100GB 이상의 데이터를 다루게 되면, &lt;code&gt;apply()&lt;/code&gt; 함수로 작업해야 하는 일이 종종 발생한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-list-생성&#34;&gt;II. List 생성&lt;/h2&gt;
&lt;p&gt;이제 리스트를 작성해보자. 문자형 벡터와 숫자형 벡터를 만든후 리스트에 넣도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
xChar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
xList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(xNum, xChar)
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xList)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1.00 3.14 5.00 7.00
## 
## [[2]]
## [1] &amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot; &amp;quot;D&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 출력값에서 주의 깊게 봐야 하는 것 &lt;code&gt;[[1]]&lt;/code&gt;과 같은 형태이다. 즉, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;1.00&lt;/code&gt;과 같은 실제 값이 들어있는 각각의 원소에 대해 접근을 하려면, &lt;code&gt;[[1]]&lt;/code&gt;과 같은 것에 먼저 접근을 해야 하기 때문이다.&lt;/p&gt;
&lt;p&gt;실제로 &lt;code&gt;3.14&lt;/code&gt;을 출력하도록 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xList[[1]][2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 3.14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;출력을 할 때는 위와 같은 형태로 작성을 해야 한다.&lt;/p&gt;
&lt;p&gt;그런데, 우리가 궁금한 것은 이러한 접근법이 중요한 것이 아니다. &lt;code&gt;List&lt;/code&gt;라는 데이터안에 있는 값에서 의미있는 수치를 뽑아야 하는 것이 데이터 분석가가 하는 일이기 때문이다.&lt;/p&gt;
&lt;p&gt;이제 간단한 &lt;code&gt;lappy()&lt;/code&gt; 함수를 활용해서 간단하게 통계 수치를 뽑도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-lapply&#34;&gt;III. lapply()&lt;/h2&gt;
&lt;p&gt;lapply() 함수는 추후에 &lt;code&gt;apply&lt;/code&gt; 함수 계열에 대해서 자세하게 설명할 때 다시한번 드리도록 하겠다. 각각의 &lt;code&gt;apply&lt;/code&gt;함수는 input 데이터구조와 output 데이터 구조에 따라 사용되어야 할 함수 이름이 조금씩 다르다.&lt;/p&gt;
&lt;p&gt;참고로 lapply인 이유는 output이 리스트로 반환되기 때문에 그렇다.&lt;/p&gt;
&lt;h3 id=&#34;1-사용설명서&#34;&gt;(1) 사용설명서&lt;/h3&gt;
&lt;p&gt;필자는 R의 사용설명서를 좋아한다. 예제와 설명이 주로 박사급 사람들이 작성해서 그런가 가독성이 좋다.&lt;/p&gt;
&lt;p&gt;꼭 다음을 실행해서 사용설명서를 읽기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;(lapply)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lappy()&lt;/code&gt;의 구조는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(객체(vector, dataframe, list), FUNCTION)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-without-lapply&#34;&gt;(2) Without lapply&lt;/h3&gt;
&lt;p&gt;이제 함수를 적용한다. 이번에 활용하려는 건, 리스트에 저장되어 있는 &lt;code&gt;xNum&lt;/code&gt;값의 &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;값을 구하려고 한다.&lt;/p&gt;
&lt;p&gt;아래와 같이 적용해야 할 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 4.035
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 코드의 단점은 당연히 확장성이 떨어진다. 즉, 1개의 벡터에만 접근이 가능하기 때문에 실무에서는 당연히 쓰지 않는다.&lt;/p&gt;
&lt;h3 id=&#34;3-with-lapply&#34;&gt;(3) With lapply&lt;/h3&gt;
&lt;p&gt;이번에는 &lt;code&gt;lapply&lt;/code&gt;을 활용해서 값을 구해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, summary)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000 
## 
## [[2]]
##    Length     Class      Mode 
##         4 character character
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자열까지 조회가 되는 것을 확인할 수 있다. 여기에서 조금더 &lt;code&gt;list&lt;/code&gt;를 확장해보자. &lt;code&gt;xList&lt;/code&gt;에 &lt;code&gt;xNum2&lt;/code&gt; 객체를 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
xList[[3]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xNum2
&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;(xList)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## List of 3
##  $ : num [1:4] 1 3.14 5 7
##  $ : chr [1:4] &amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot; &amp;quot;D&amp;quot;
##  $ : num [1:4] 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 추가가 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제, 애초에 구하려고 했던, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; 를 구할 수 있습니다. 결과가 어떻게 나오는지 확인합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, max)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 7
## 
## [[2]]
## [1] &amp;quot;D&amp;quot;
## 
## [[3]]
## [1] 5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;min&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, min)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] &amp;quot;A&amp;quot;
## 
## [[3]]
## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;mean&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, mean)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Warning in mean.default(X[[i]], ...): argument is not numeric or logical:
## returning NA
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 4.035
## 
## [[2]]
## [1] NA
## 
## [[3]]
## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자형이 있어도, &lt;code&gt;apply&lt;/code&gt;함수에서는 우선 출력됨을 볼 수 있다. 여기에서 문자형의 값 처리에 대한 설명은 본 포스트의 작성 범위를 넘어서게 된다.&lt;/p&gt;
&lt;p&gt;R의 기본함수는 다른 언어와 다르게 데이터 타입마다 엄격하게 적용되는 건 아니다! (Why?) 이 부분이 R의 장점이자, 추후에 단점으로 작용하기도 한다.&lt;/p&gt;
&lt;h3 id=&#34;4-naming&#34;&gt;(4) Naming&lt;/h3&gt;
&lt;p&gt;각 벡터에 이제 이름을 지어서 List 작성 하면, 원소의 접근법이 보다 수월해진다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(xList) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemNum&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemChar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemNum2&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제, &lt;code&gt;$name&lt;/code&gt; 또는 &lt;code&gt;[[&amp;quot;name&amp;quot;]]&lt;/code&gt;과 같은 형태로 원소에 접근할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xList&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;itemNum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이를 통해서 &lt;code&gt;lapply()&lt;/code&gt; 활용하면 조금 더 깔끔하게 출력할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, summary)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## $itemNum
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000 
## 
## $itemChar
##    Length     Class      Mode 
##         4 character character 
## 
## $itemNum2
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    2.00    2.75    3.50    3.50    4.25    5.00
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vi-결론&#34;&gt;VI. 결론&lt;/h2&gt;
&lt;p&gt;List는 R에서 매우 중요하다. 특히, 데이터셋이 꼭 &lt;code&gt;data.frame&lt;/code&gt;만 존재하는 것은 아니다.&lt;/p&gt;
&lt;p&gt;지도 데이터는 &lt;code&gt;sp&lt;/code&gt;라는 객체로 불리어지고, &lt;code&gt;json&lt;/code&gt;타입도 존재한다. 이러한 데이터를 다루는데 적합한 데이터 구조가 &lt;code&gt;list&lt;/code&gt;이기 때문에 주기적으로 다룰 필요가 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vcrts01 - Combining Vectors</title>
      <link>https://chloevan.github.io/r/datatransform/vcrts01/</link>
      <pubDate>Tue, 28 Apr 2020 10:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datatransform/vcrts01/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vctrs&lt;/code&gt; 패키지. Vector Helpers 패키지&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;라고 불리운다. 벡터를 활용할 때, 어려운 부분은 데이터와 조합해서 사용할 때다. 특히 서로다른 성질의 &lt;code&gt;Vectors&lt;/code&gt;를 Combining 할 때 발생하는 에러에 대해 효과적으로 해결할 수 있는 대안을 제시한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-vectors&#34;&gt;II. Vectors&lt;/h2&gt;
&lt;p&gt;벡터에 관한 기초 부분은 여기에서 생략하고, 필자가 작성한 기초 부분에서 참조하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/basics/basic_objects_vector/&#34;&gt;Basci Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-벡터의-정의&#34;&gt;(1) 벡터의 정의&lt;/h3&gt;
&lt;p&gt;R의 기본문법에서 벡터의 정의는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1 2 3
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-tidyverse&#34;&gt;(2) tidyverse&lt;/h3&gt;
&lt;p&gt;벡터와 관련되어서 일반적으로 다음과 같은 함수에서 넓게 활용된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dplyr::mutate()&lt;/code&gt;와 &lt;code&gt;dplyr::summarise()&lt;/code&gt;은 각 그룹에서 나오는 결과물들을 벡터화해서 처리한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dplyr::bind_rows()&lt;/code&gt;는 서로 다른 데이터셋에 존재하는 &lt;code&gt;vector&lt;/code&gt;들을 연결한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-problems&#34;&gt;III. Problems&lt;/h2&gt;
&lt;p&gt;이렇게, 데이터 프레임의 기본연산으로 벡터는 매우 중요하게 다뤄지는 것이 R의 기본문법이다. 그런데, R의 기본문법에는 비슷하지만, 조금씩 다른 벡터의 성질이 있다.&lt;/p&gt;
&lt;p&gt;다음 코드를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;즉, &lt;code&gt;c()&lt;/code&gt;함수를 활용해 &lt;code&gt;factor&lt;/code&gt; 범주화 하는 것은 허용되지 않고, integer level로 바뀌는 것을 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이번엔 날짜와 관련된 코드를 보자. 사실 누구나 경험하는 에러일 것이다. 또한 대처법도 쉽지가 않다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;today &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-21&amp;#34;&lt;/span&gt;)
now &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.POSIXct&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-21 10:34&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(today, now)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-04-21&amp;quot;    &amp;quot;4348213-07-01&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;즉, &lt;code&gt;Date&lt;/code&gt; 형식과, &lt;code&gt;POSIXct&lt;/code&gt; 형식에서 &lt;code&gt;c()&lt;/code&gt;함수는 약간 다르게 인식하는 것을 확인할 수 있다. 문제는 이렇게 다른 형식이라 할지라도 &lt;code&gt;class&lt;/code&gt;는 동일하게 &lt;code&gt;Date&lt;/code&gt;로 인식한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(today, now))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Date&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상상해보자. 만약 1000개의 데이터가 있는데, 이 중, 800개는 &lt;code&gt;Date&lt;/code&gt; 형식이고, 200개는 &lt;code&gt;POSIXct&lt;/code&gt;형식일 때, 일일이 Date를 조회하면서 수정할수는 없다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;unclass&lt;/code&gt;를 활용해서 다시한번 &lt;code&gt;c()&lt;/code&gt;를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unclass&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(today, now))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1]      18373 1587432840
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;unclass&lt;/code&gt;를 활용하니 이번에는 둘다 숫자로 나온다. 이번에는 now, today의 순서를 바꿔보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(now, today)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-04-21 10:34:00 KST&amp;quot; &amp;quot;1970-01-01 14:06:13 KST&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;today의 날짜가 제대로 인식되지 못하는 걸 확인할 수 있다. 이번엔 어떤 데이터 타입인지 &lt;code&gt;class&lt;/code&gt;를 사용하여 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(now, today))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번엔 &lt;code&gt;POSIxt&lt;/code&gt;로 출력되는 걸 확인할 수 있다. &lt;code&gt;unclass&lt;/code&gt;를 활용하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unclass&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(now, today))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1587432840      18373
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에도 숫자로 출력된다. 지금까지 계속 읽어왔다면, 느끼겠지만, 현재 today와 now 값을 통일시키지 않는다면 이러한 에러는 계속 발생할 것이다. 즉, 데이터가 적으면 상관이 없지만 만약 많으면 어떻게 할 것인가? 현재로써 유일한 대안은 사용자 정의 함수를 만들어야 한다.&lt;/p&gt;
&lt;p&gt;그런데, 시간이 없다면??&lt;/p&gt;
&lt;h2 id=&#34;iv-vctrs-패키지-활용&#34;&gt;IV. vctrs 패키지 활용&lt;/h2&gt;
&lt;p&gt;이 때 필요한 것이, vector helpers 패키지를 활용하는 것이다. 이 때, &lt;code&gt;vec_c&lt;/code&gt;함수를 사용하는데, 크게 3가지의 원칙을 삼는다.&lt;/p&gt;
&lt;h3 id=&#34;1-symmetry&#34;&gt;(1) Symmetry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;즉, today, now의 순서가 바뀌어도 일단 값은 동일하게 나온다는 원칙이다. 소스코드를 보며 직접 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(vctrs)
&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(today, now)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-04-21 00:00:00 KST&amp;quot; &amp;quot;2020-04-21 10:34:00 KST&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(now, today)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-04-21 10:34:00 KST&amp;quot; &amp;quot;2020-04-21 00:00:00 KST&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-enrichment&#34;&gt;(2) Enrichment&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vec_c&lt;/code&gt;함수는 조금 더 확장성 있는 레벨의 데이터타입을 변환한다는 뜻이다. 간단히 설명하면, integer와 double의 데이터가 섞여 있으면, 조금더 유연한 double로 반환하다는 것이고, 앞에서 본것 처럼, 날짜의 경우, Date와 POSIXct의 데이터는 POSIXct의 유형으로 결과값이 반환된다는 뜻이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer and Double&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.0 1.5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Date and POSIXct&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(today, now)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2020-04-21 00:00:00 KST&amp;quot; &amp;quot;2020-04-21 10:34:00 KST&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-consistency&#34;&gt;(3) Consistency&lt;/h3&gt;
&lt;p&gt;R의 기본문법은 서로 다른 데이터 유형이라면, 문자열-숫자형 순으로 자동으로 치환되서 출력된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그런데, &lt;code&gt;vec_c&lt;/code&gt;는 데이터의 유형이 완전히 서로 다른 형태라면 반환되지 않고 에러가 발생한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;에러부터 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Error&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; No common type for `..1` &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;character&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; and `..2` &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;double&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), today)
Error&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; No common type for `..1` &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;factor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;a425&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; and `..2` &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Error 메시지를 보면 &lt;code&gt;No common type&lt;/code&gt;이라는 것을 볼 수 있다. 즉, 완전히 다른 형태의 값이 존재한다는 것을 알 수 있다. 결과적으로 조금 더 엄격한 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-활용-및-응용&#34;&gt;V. 활용 및 응용&lt;/h2&gt;
&lt;p&gt;R의 기본문법에서는 에러가 발생 했던 부분을 다시한번 응용해서 적용해보자. 아마 아래와 같이 적용할 수 있을 것 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] x y
## Levels: x y
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;as.integer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vec_c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;즉, 이렇게 데이터 형변환을 조금 더 엄격하게 해서 혹시 있을지 모를 데이터의 섞임을 방지하고자 노력하는 것이 위 문법의 취지인 것 같다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;Wickham, H. (2020, April 27). dplyr 1.0.0 and vctrs. Retrieved April 28, 2020, from &lt;a href=&#34;https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/&#34;&gt;https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-and-vctrs/&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 주도하는 RStudio팀에서 개발하였으며, 현재 0.2.4버전으로 2020-03-10에 배포되었다. 출처: &lt;a href=&#34;https://cran.r-project.org/web/packages/vctrs/index.html&#34;&gt;https://cran.r-project.org/web/packages/vctrs/index.html&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Ch03 Components of Process Data</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch03_components_of_process_data/</link>
      <pubDate>Mon, 27 Apr 2020 23:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch03_components_of_process_data/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;지난시간에 &lt;code&gt;patients&lt;/code&gt;에 관한 데이터를 통해서 프로세스 분석에 대한 일반적인 개념을 접했다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 &lt;code&gt;bupaR&lt;/code&gt;에 대한 이론적인 내용과 함께 간단하게 실습을 진행하도록 한다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 먼저 데이터를 획득하는 것에서부터 출발한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(eventdataR)
patients &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; patients
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 5442    7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5442행과 7개의 열이 확인되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;eventlog&amp;quot;   &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ii-용어-정리&#34;&gt;II. 용어 정리&lt;/h2&gt;
&lt;p&gt;우선 용어 정리가 필요하다. Events, Event log, Activity 등등. 하나씩 살펴보자.&lt;/p&gt;
&lt;h3 id=&#34;1-events&#34;&gt;(1) Events&lt;/h3&gt;
&lt;p&gt;우선 Events에 관한 이해를 돕기 위해 아래 그림을 우선 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch03/event.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;John이 &lt;code&gt;X-Ray&lt;/code&gt;를 촬영하면 크게 3가지의 log가 남을 것이다. &lt;code&gt;Scheduled&lt;/code&gt;, &lt;code&gt;Started&lt;/code&gt;, &lt;code&gt;Completed&lt;/code&gt; 이러한 3가지 활동을 통칭해서 &lt;code&gt;Events&lt;/code&gt;라고 부른다.&lt;/p&gt;
&lt;h3 id=&#34;2-event-log&#34;&gt;(2) Event Log&lt;/h3&gt;
&lt;p&gt;시간대별로 이렇게 다양한 log가 남겨지는 것을 &lt;code&gt;Event log&lt;/code&gt;라고 불리운다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(patient &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(patient, handling, registration_type, time, force_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 4
##    patient handling              registration_type time               
##    &amp;lt;chr&amp;gt;   &amp;lt;fct&amp;gt;                 &amp;lt;fct&amp;gt;             &amp;lt;dttm&amp;gt;             
##  1 1       Registration          start             2017-01-02 11:41:53
##  2 1       Triage and Assessment start             2017-01-02 12:40:20
##  3 1       Blood test            start             2017-01-05 08:59:04
##  4 1       MRI SCAN              start             2017-01-05 21:37:12
##  5 1       Discuss Results       start             2017-01-07 07:57:49
##  6 1       Check-out             start             2017-01-09 17:09:43
##  7 1       Registration          complete          2017-01-02 12:40:20
##  8 1       Triage and Assessment complete          2017-01-02 22:32:25
##  9 1       Blood test            complete          2017-01-05 14:34:27
## 10 1       MRI SCAN              complete          2017-01-06 01:54:23
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 코드에서 중요한 것은 &lt;code&gt;Select(~, force_df = TRUE)&lt;/code&gt;를 꼭 입력해줘야 &lt;code&gt;data.frame&lt;/code&gt; 형태로 출력된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;event log는 결과적으로 다음 &lt;code&gt;Components&lt;/code&gt;로 구성되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case id&lt;/li&gt;
&lt;li&gt;activity label&lt;/li&gt;
&lt;li&gt;activity instance id&lt;/li&gt;
&lt;li&gt;timestamp&lt;/li&gt;
&lt;li&gt;lifecycle status&lt;/li&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-event-log-데이터-생성&#34;&gt;III. event log 데이터 생성&lt;/h2&gt;
&lt;p&gt;일반적인 데이터를 작성해서 &lt;code&gt;event log&lt;/code&gt;를 생성해보자. 어려운 것은 아니나, 기본적으로 포함해야 할 데이터가 있기 에 확인차 작성을 해본다.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-생성&#34;&gt;(1) 데이터 생성&lt;/h3&gt;
&lt;p&gt;아래 소스코드를 활용하여 가상의 데이터를 만든다. 그 이후 &lt;code&gt;eventlog()&lt;/code&gt; 함수를 활용하여, 각 데이터에 맞게 매칭해서 Column명을 입력하기만 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 가상 데이터 생성&lt;/span&gt;
eventData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(
  id          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_2&amp;#34;&lt;/span&gt;),
  action      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10015&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;), 
  action_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check-in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check-in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;), 
  date        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-01-12&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-21&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-01-15&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-23&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-01&amp;#34;&lt;/span&gt;)), 
  originator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assistant_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assistant_7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;), 
  status      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;complete&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# event log 데이터 생성&lt;/span&gt;
claims_log &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eventlog&lt;/span&gt;(
  eventData,
  case_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
  activity_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_type&amp;#34;&lt;/span&gt;,
  activity_instance_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;,
  lifecycle_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;,
  timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;,
  resource_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;originator&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-두-데이터-비교&#34;&gt;(2) 두 데이터 비교&lt;/h3&gt;
&lt;p&gt;만들어진 소스코드를 통해서 실제로 &lt;code&gt;summary()&lt;/code&gt;를 통해 실제 구조를 비교해본다. 먼저 &lt;code&gt;eventData&lt;/code&gt;를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# eventData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(eventData)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       id                action      action_type             date           
##  Length:5           Min.   :10002   Length:5           Min.   :2020-01-12  
##  Class :character   1st Qu.:10011   Class :character   1st Qu.:2020-01-15  
##  Mode  :character   Median :10015   Mode  :character   Median :2020-03-21  
##                     Mean   :10015                      Mean   :2020-02-25  
##                     3rd Qu.:10024                      3rd Qu.:2020-03-23  
##                     Max.   :10024                      Max.   :2020-04-01  
##   originator           status         
##  Length:5           Length:5          
##  Class :character   Class :character  
##  Mode  :character   Mode  :character  
##                                       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;매우 익숙한 구조가 나온 것을 확인할 수 있다. 이번에는 eventlog 데이터를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# eventData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(claims_log)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Number of events:  5
## Number of cases:  2
## Number of traces:  2
## Number of distinct activities:  2
## Average trace length:  2.5
## 
## Start eventlog:  2020-01-12
## End eventlog:  2020-04-01
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;##       id               action            action_type      date           
##  Length:5           Length:5           Check-in:2    Min.   :2020-01-12  
##  Class :character   Class :character   Payment :3    1st Qu.:2020-01-15  
##  Mode  :character   Mode  :character                 Median :2020-03-21  
##                                                      Mean   :2020-02-25  
##                                                      3rd Qu.:2020-03-23  
##                                                      Max.   :2020-04-01  
##        originator      status      .order 
##  Assistant_1:1    complete:1   Min.   :1  
##  Assistant_7:1    start   :4   1st Qu.:2  
##  Manager_2  :3                 Median :3  
##                                Mean   :3  
##                                3rd Qu.:4  
##                                Max.   :5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터의 구조가 달라진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-activity-label-확인&#34;&gt;(3) Activity Label 확인&lt;/h3&gt;
&lt;p&gt;간단하게 바뀌어진 eventlog 데이터의 &lt;code&gt;activity label&lt;/code&gt;이 바뀌어졌는지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activity_labels&lt;/span&gt;(claims_log)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] Check-in Payment 
## Levels: Check-in Payment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;정상적으로 출력이 되었다면, 실제로 변환된 &lt;code&gt;eventlog&lt;/code&gt;데이터를 가지고 본격적인 분석을 진행할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More on Vectors and Indexing</title>
      <link>https://chloevan.github.io/r/basics/more_vectors_indexing/</link>
      <pubDate>Sun, 26 Apr 2020 16:10:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/more_vectors_indexing/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 Tutorial은 강사에게 강의를 듣는 과거-현재-미래 학생들을 위해 작성하였습니다.&lt;/p&gt;
&lt;p&gt;이 글을 읽어주시는 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-벡터&#34;&gt;I. 벡터&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;본 포스트는 프로그래밍과 R을 처음 배우는 사람을 위해 작성하였습니다. 짧게 읽어두시기를 바랍니다. 공부하실 때는 복잡하게 생각하지는 마시기를 바랍니다. 영어의 기본단어 및 문법을 배우듯이 그냥 받아들이시기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;현재 진행중인 R 기초문법은 아래와 같습니다. 원하시는 것은 참조해서 가볍게 공부하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/basics/basic_objects_vector/&#34;&gt;Basic Objects - Vector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;벡터(&lt;code&gt;Vector&lt;/code&gt;). R에서 다루는 가장 작은 단위값의 데이터다. 1차원으로 구성이 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-다양한-방식의-벡터-생성&#34;&gt;(1) 다양한 방식의 벡터 생성&lt;/h3&gt;
&lt;p&gt;벡터는 같은 종류의 값으로 구성되어야 함을 배웠다. 그런데, 벡터 생성은 다양한 방식으로 구성될 수 있다.&lt;/p&gt;
&lt;p&gt;데이터분석을 할 때 자주 쓰는 건 아니다. 보통은 주로 데이터 전처리와 시각화, 그리고 각종 통계 분석을 해석 하면서 시간을 보낸다.그런데, 가끔 필요할 때가 있다.&lt;/p&gt;
&lt;p&gt;간단하게 데이터를 만들어 시뮬레이션을 진행할 때다. 이럴 때 기초문법을 알고 있으면 데이터가 없어도 매우 쉽게 데이터를 만들수가 있다.&lt;/p&gt;
&lt;p&gt;코드로 넘어가보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xSeq &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xSeq)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;원래대로라면, &lt;code&gt;xSeq &amp;lt;- c(1,2,3...,10)&lt;/code&gt; 이런 형태로 코드가 작성되어야 하지만, 매우 간단하게 작성된 것을 볼 수 있다. 이 문법에 기초해서 10을 살짝 변형해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
xPar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of x1:5*4: &amp;#34;&lt;/span&gt;, xMul))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of x1:5*4:  4 8 12 16 20
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xPar: &amp;#34;&lt;/span&gt;, xPar))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xPar:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 &lt;code&gt;()&lt;/code&gt;을 추가해서 숫자형 벡터를 원하는 길이만큼 늘려서 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;이러한 문법을 영어로는 &lt;code&gt;sequence&lt;/code&gt;라고 부른다. 그런데, &lt;code&gt;sequence&lt;/code&gt;문법을 통해서 인덱싱도 할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-indexing-with-sequence&#34;&gt;(2) Indexing with Sequence&lt;/h3&gt;
&lt;p&gt;먼저 코드부터 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;myStart &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
xPar[myStart&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(myStart&lt;span style=&#34;color:#ae81ff&#34;&gt;+7&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1]  3  4  5  6  7  8  9 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;1:20&lt;/code&gt;을 담고있는 &lt;code&gt;xPar&lt;/code&gt; 벡터에, &lt;code&gt;[myStart:(myStart+7)]&lt;/code&gt; 범위를 지정해서, 그 범위에 해당하는 값만 반환하도록 하는 문법이다.&lt;/p&gt;
&lt;p&gt;이 부분은 꼭 한번 실습 하는 것을 권한다.&lt;/p&gt;
&lt;h3 id=&#34;3-seq--req&#34;&gt;(3) seq() &amp;amp; req()&lt;/h3&gt;
&lt;p&gt;지금까지 배운 것은 &lt;code&gt;sequence&lt;/code&gt; 벡터 생성에 관한 것을 배웠다. 그런데, 만약 규칙을 통해서 생성하고 싶다면 어떻게 할까? 사용자 정의 함수를 만들수도 있지만, R에서는 웬만한 건 다 함수로 제공한다.&lt;/p&gt;
&lt;p&gt;함수는 일종의 단어와 같다. 단어의 개수를 얼마만큼 많이 아느냐에 따라 외국어 실력이 나오듯이, 기초 함수 사용법은 많이 외우면 외울수록 좋다.&lt;/p&gt;
&lt;p&gt;코드를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xSeq &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-5&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xSeq: &amp;#34;&lt;/span&gt;, xSeq))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xSeq:  -5 -2 1 4 7 10 13 16 19 22 25 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문법이 어렵지는 않을 것이다. 시작점과 끝점이 있고, 단위를 3번 건너뛰어서 출력하도록 하는 것이다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;rep()&lt;/code&gt;함수를 사용해보자. &lt;code&gt;rep&lt;/code&gt;는 &lt;code&gt;replicate(복제하다)&lt;/code&gt;는 뜻을 가지고 있는데, 특정 숫자열이 반복해서 나타나도록 한다. 코드를 보면 쉽게 이해가 갈 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xRep &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), each &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xRep: &amp;#34;&lt;/span&gt;, xRep))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xRep:  1 1 1 2 2 2 3 3 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;만약에 각 함수에 대해 조금 구체적으로 알고 싶다면, 다음과 같이 입력하고 실행해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;(rep) &lt;span style=&#34;color:#75715e&#34;&gt;# 방법 1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;rep      &lt;span style=&#34;color:#75715e&#34;&gt;# 방법 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;지금까지 벡터의 기본에 대해 배웠다. 다음시간에는 벡터내에 존재하는 결측치 = &lt;code&gt;NA&lt;/code&gt; 처리 방법에 대해 학습하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;2-reference&#34;&gt;2. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Objects - Vector</title>
      <link>https://chloevan.github.io/r/basics/basic_objects_vector/</link>
      <pubDate>Sat, 25 Apr 2020 18:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/basic_objects_vector/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 Tutorial은 강사에게 강의를 듣는 과거-현재-미래 학생들을 위해 작성하였습니다.&lt;/p&gt;
&lt;p&gt;이 글을 읽어주시는 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-벡터&#34;&gt;I. 벡터&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;본 포스트는 프로그래밍과 R을 처음 배우는 사람을 위해 작성하였습니다. 짧게 읽어두시기를 바랍니다. 공부하실 때는 복잡하게 생각하지는 마시기를 바랍니다. 영어의 기본단어 및 문법을 배우듯이 그냥 받아들이시기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;벡터(&lt;code&gt;Vector&lt;/code&gt;). R에서 다루는 가장 작은 단위값의 데이터다. 1차원으로 구성이 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-4가지-벡터&#34;&gt;(1) 4가지 벡터&lt;/h3&gt;
&lt;p&gt;크게 4가지의 벡터가 존재한다. 간단하게 코드를 작성해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
xLog &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
xChar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;가&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;나&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
xMix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello R!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 작성한 코드는 실행한다. 실행할 때, 윈도우 사용자는 &lt;code&gt;Ctrl + Enter&lt;/code&gt;,  Mac사용자는 &lt;code&gt;Command + Enter&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;이렇게 크게 4개의 유형으로 정리할 수 있다. 이를 출력하는 방법은 크게 2가지다. &lt;code&gt;print(xNum)&lt;/code&gt; 또는 &lt;code&gt;xNum&lt;/code&gt;. 결과값을 확인하는데, 지금은 어떠한 방법으로 사용해도 무관하지만, &lt;code&gt;print(xNum)&lt;/code&gt;으로 습관을 가져가는 걸 추천한다. If-else, For-loop 문을 사용할 때 매우 유용하다.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;print(xNum)&lt;/code&gt;을 실행하여 결과값을 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 &lt;code&gt;xNum&lt;/code&gt;을 실행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;보시다시피, 결과값의 큰 차이는 없다. xLog, xChar도 동일하게 실행하본다.&lt;/p&gt;
&lt;h3 id=&#34;2-벡터-추가-append&#34;&gt;(2) 벡터 추가 (Append)&lt;/h3&gt;
&lt;p&gt;벡터 추가하는 방법을 배워보자. 어려운 건 아니다. 자유자재로 벡터를 추가할 수 있다. 이 때 주의해야 하는 것은 동일 성질의 값을 입력해야 한다.&lt;/p&gt;
&lt;p&gt;문자는 문자열끼리, 숫자는 숫자열끼리, 안 그러면 데이터가 &lt;code&gt;Mix&lt;/code&gt;가 된다. 이 때 &lt;code&gt;print&lt;/code&gt;가 아닌 출력할 때는 &lt;code&gt;message&lt;/code&gt; + &lt;code&gt;cat&lt;/code&gt; 함수를 활용해 본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
x2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(x, x)
x3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(x2, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x: &amp;#34;&lt;/span&gt;, x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x:  2 4 6 8
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x2: &amp;#34;&lt;/span&gt;, x2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x2:  2 4 6 8 2 4 6 8
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x3: &amp;#34;&lt;/span&gt;, x3))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x3:  2 4 6 8 2 4 6 8 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 추가할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-데이터-요약-summary&#34;&gt;(3) 데이터 요약 summary()&lt;/h3&gt;
&lt;p&gt;각각의 벡터는 일종의 정보라고 생각해야 한다. 벡터 1개를 가지고도 매우 쉽게 다양한 분석을 할 수 있다. 이것이 &lt;code&gt;R&lt;/code&gt;의 장점이기도 하다. 이 때 쉽게 데이터를 요약하는 함수가 &lt;code&gt;summary()&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4개의 데이터에서도 값이 출력된다. 문자열과 논리형 벡터는 어떨까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 문자열을 보자&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xChar)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##         4 character character
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;간단하게 Length 즉 여기서는 벡터 내에 존재하는 문자열 개수를 표현한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;논리형은 어떻게 출력될까?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xLog)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Mode   FALSE    TRUE 
## logical       2       2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 각 값의 따라 갯수로 출력되는 걸 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;4-벡터의-length-확인&#34;&gt;(4) 벡터의 length 확인&lt;/h3&gt;
&lt;p&gt;length는 일종의 데이터프레임에서 행의 개수와도 같다. 빠르게 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-xmix-데이터는-어떻게-변할까&#34;&gt;(5) xMix 데이터는 어떻게 변할까?&lt;/h3&gt;
&lt;p&gt;아직까지 다루지 않은 내용에 대해 다룬다. 이러한 데이터는 데이터셋의 크기가 매우커서 전체를 확인하지 못할 때 종종 마주칠 수 있다. 데이터 입력값의 오류인데, 이러한 오류를 인지하지 못하면 분석은 원하는대로 가지 못하고 우왕좌왕 할 때가 많다.&lt;/p&gt;
&lt;p&gt;특히, 엑셀 데이터를 수집해서 하는 분석은 이러한 데이터 &lt;code&gt;Mix&lt;/code&gt;가 종종 일어나니, 꼭 주의해야 하는 경우다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xMix)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot;        &amp;quot;TRUE&amp;quot;     &amp;quot;Hello R!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각각의 값이 쌍따옴표 &lt;code&gt;&amp;quot;값&amp;quot;&lt;/code&gt;이 붙어있는 것을 봐서는 문자열로 변했다. 이상하지 않은가? 원래 의도한 입력값은 숫자형이었기 때문이다.&lt;/p&gt;
&lt;p&gt;그런데, 만약 이 때 &lt;code&gt;1&lt;/code&gt;에 1을 더해서 2로 바꾸고 싶다면 어떻게 해야할까?&lt;/p&gt;
&lt;h3 id=&#34;6-인덱싱과-형변환&#34;&gt;(6) 인덱싱과 형변환&lt;/h3&gt;
&lt;p&gt;인덱싱은 일종의 각 요소에 대해 접근하는 방법이다. 어려운 건 아니다. 우선 1에 접근을 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMix[1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;xMin[접근하고 싶은 위치의 숫자]&lt;/code&gt;를 입력하면 원하는 데이터를 확보할 수 있다. 그럼, 이제 데이터 타입을 변환해서 숫자형으로 바꿔본다. 이것 역시 어떤 함수가 쓰이는지 확인하는 것으로 이해하기를 바란다. 이 때에는 &lt;code&gt;왜, 이 함수를 쓰는가?&lt;/code&gt; 보다는, &lt;code&gt;아, 이 함수를 쓰면 바뀌는구나&lt;/code&gt; 것으로 이해하기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;보시다시피 &lt;code&gt;1&lt;/code&gt;사이에 쌍따옴표가 사라졌다. 이제 1을 더해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;바뀌었다. 이제 바뀐 값을 적용하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMix[1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xMix)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2&amp;quot;        &amp;quot;TRUE&amp;quot;     &amp;quot;Hello R!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;2&lt;/code&gt;로 바뀐 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-reference&#34;&gt;2. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch02 Process Analysis Basic</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch02_process_analysis_basic/</link>
      <pubDate>Thu, 23 Apr 2020 23:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch02_process_analysis_basic/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;지난시간에 &lt;code&gt;patients&lt;/code&gt;에 관한 데이터를 통해서 프로세스 분석에 대한 일반적인 개념을 접했다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 &lt;code&gt;bupaR&lt;/code&gt;에 대한 이론적인 내용과 함께 간단하게 실습을 진행하도록 한다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 먼저 데이터를 획득하는 것에서부터 출발한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(eventdataR)
patients &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; patients
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 5442    7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5442행과 7개의 열이 확인되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;eventlog&amp;quot;   &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고, 데이터는 &lt;code&gt;eventlog&lt;/code&gt;, &lt;code&gt;tbl_df&lt;/code&gt;, &lt;code&gt;data.frame&lt;/code&gt;으로 구성된 것을 확인할 수 있다. 기존에 R을 학습한 사람들은 &lt;code&gt;tbl &amp;amp; data.frame&lt;/code&gt;에 대해서 한두번쯤 들었을 거라 생각한다. 그러나 &lt;code&gt;eventlog&lt;/code&gt;는 생소한 객체임을 알 수 있다.&lt;/p&gt;
&lt;p&gt;조금더 구체적으로 확인하기 위해 데이터를 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 5,442
## Columns: 7
## $ handling          &amp;lt;fct&amp;gt; Registration, Registration, Registration, Registrat…
## $ patient           &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;10&amp;quot;, …
## $ employee          &amp;lt;fct&amp;gt; r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1,…
## $ handling_id       &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;10&amp;quot;, …
## $ registration_type &amp;lt;fct&amp;gt; start, start, start, start, start, start, start, st…
## $ time              &amp;lt;dttm&amp;gt; 2017-01-02 11:41:53, 2017-01-02 11:41:53, 2017-01-…
## $ .order            &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Number of events:  5442
## Number of cases:  500
## Number of traces:  7
## Number of distinct activities:  7
## Average trace length:  10.884
## 
## Start eventlog:  2017-01-02 11:41:53
## End eventlog:  2018-05-05 07:16:02
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;##                   handling      patient          employee  handling_id       
##  Blood test           : 474   Length:5442        r1:1000   Length:5442       
##  Check-out            : 984   Class :character   r2:1000   Class :character  
##  Discuss Results      : 990   Mode  :character   r3: 474   Mode  :character  
##  MRI SCAN             : 472                      r4: 472                     
##  Registration         :1000                      r5: 522                     
##  Triage and Assessment:1000                      r6: 990                     
##  X-Ray                : 522                      r7: 984                     
##  registration_type      time                         .order    
##  complete:2721     Min.   :2017-01-02 11:41:53   Min.   :   1  
##  start   :2721     1st Qu.:2017-05-06 17:15:18   1st Qu.:1361  
##                    Median :2017-09-08 04:16:50   Median :2722  
##                    Mean   :2017-09-02 20:52:34   Mean   :2722  
##                    3rd Qu.:2017-12-22 15:44:11   3rd Qu.:4082  
##                    Max.   :2018-05-05 07:16:02   Max.   :5442  
## 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기존의 데이터프레임과는 많이 다른 것을 확인할 수 있다. 이쯤 되면 여기에서는 패키지 원문을 봐야 정확하게 짚고 넘어가야 한다. 아래 그림을 보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/data-model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 그림은 &lt;a href=&#34;https://www.bupar.net/creating_eventlogs.html&#34;&gt;Event data Model&lt;/a&gt;에 대한 전체적인 설명이다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;bupaR&lt;/code&gt;패키지를 활용하려면 전반적인 데이터셋이 위 그림과 같아야 하는데, 전반적으로 데이터가 특정 사건에 대해 시계열처럼 프로세스를 기록한 데이터셋이라고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;patterns&lt;/code&gt;라는 데이터셋은 병원 응급실에서 발생한 데이터와 연관이 있고, &lt;code&gt;model level&lt;/code&gt;, &lt;code&gt;instance level&lt;/code&gt;, 그리고 &lt;code&gt;event level&lt;/code&gt;로 구성되어 있음을 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-eda---기초통계량&#34;&gt;II. EDA - 기초통계량&lt;/h2&gt;
&lt;h3 id=&#34;1-환자에-대한-기록&#34;&gt;(1) 환자에 대한 기록&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 5442개의 데이터에서 실제 환자의 수는 몇명일까? &lt;code&gt;summary&lt;/code&gt;에서 확인이 가능했지만, &lt;code&gt;n_cases()&lt;/code&gt; 함수를 활용하면 쉽게 구할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n_cases&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 500
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 첫번째 환자의 여정을 살펴보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(patients, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Log of 12 events consisting of:
## 1 trace 
## 1 case 
## 6 instances of 6 activities 
## 6 resources 
## Events occurred from 2017-01-02 11:41:53 until 2017-01-09 19:45:45 
##  
## Variables were mapped as follows:
## Case identifier:		patient 
## Activity identifier:		handling 
## Resource identifier:		employee 
## Activity instance identifier:	handling_id 
## Timestamp:			time 
## Lifecycle transition:		registration_type 
## 
## # A tibble: 12 x 7
##    handling patient employee handling_id registration_ty… time               
##    &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;fct&amp;gt;            &amp;lt;dttm&amp;gt;             
##  1 Registr… 1       r1       1           start            2017-01-02 11:41:53
##  2 Triage … 1       r2       501         start            2017-01-02 12:40:20
##  3 Blood t… 1       r3       1001        start            2017-01-05 08:59:04
##  4 MRI SCAN 1       r4       1238        start            2017-01-05 21:37:12
##  5 Discuss… 1       r6       1735        start            2017-01-07 07:57:49
##  6 Check-o… 1       r7       2230        start            2017-01-09 17:09:43
##  7 Registr… 1       r1       1           complete         2017-01-02 12:40:20
##  8 Triage … 1       r2       501         complete         2017-01-02 22:32:25
##  9 Blood t… 1       r3       1001        complete         2017-01-05 14:34:27
## 10 MRI SCAN 1       r4       1238        complete         2017-01-06 01:54:23
## 11 Discuss… 1       r6       1735        complete         2017-01-07 10:18:08
## 12 Check-o… 1       r7       2230        complete         2017-01-09 19:45:45
## # … with 1 more variable: .order &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;slice(patients, 1)&lt;/code&gt; 함수를 적용하니, 첫번째 case에 대한 모든 기록이 다 나오는 것을 확인할 수 있다. 상상력을 발휘해서, 환자의 보호자를 떠오르면, &lt;code&gt;handling&lt;/code&gt;의 의미(병원 등록부터 수납까지)를 쉽게 파악할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-병원내-활동-현황&#34;&gt;(2) 병원내 활동 현황&lt;/h3&gt;
&lt;p&gt;두번째로 확인할 수 있는 것은 500명 환자가 활동한 &lt;code&gt;activity&lt;/code&gt;에 대한 기초통계량이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n_activities&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우선 총 7개의 활동 영역을 확인 할 수 있다. 그러면 각 활동의 이름은 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activity_labels&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] Registration          Triage and Assessment Blood test           
## [4] MRI SCAN              X-Ray                 Discuss Results      
## [7] Check-out            
## 7 Levels: Blood test Check-out Discuss Results MRI SCAN ... X-Ray
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우선 범주형 벡터로 확인되었고, 병원과 관련있는 용어로 구성되어 있음을 확인했다. 그런데, &lt;code&gt;Triage and Assessment&lt;/code&gt;가 있다. 이 용어는 응급환자 분류와 평가에 대한 항목&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;인데, &lt;code&gt;patients&lt;/code&gt; 데이터가 응급환자와 관련된 데이터임을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면, 각 활동의 빈도수는 어떻게 될까? 환자 500명이 각각의 활동을 할 것인데, 분명히 프로세스에 따라 그 빈도수가 차이가 날 것임을 예상할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activities&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   handling              absolute_frequency relative_frequency
##   &amp;lt;fct&amp;gt;                              &amp;lt;int&amp;gt;              &amp;lt;dbl&amp;gt;
## 1 Registration                         500             0.184 
## 2 Triage and Assessment                500             0.184 
## 3 Discuss Results                      495             0.182 
## 4 Check-out                            492             0.181 
## 5 X-Ray                                261             0.0959
## 6 Blood test                           237             0.0871
## 7 MRI SCAN                             236             0.0867
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;당연한 말이지만, 환자가 병원에 오면 무조건 밟아야 하는 기본 절차인 &lt;code&gt;Registration&lt;/code&gt; &amp;amp; &lt;code&gt;Triage and Assessment&lt;/code&gt; (등록과 응급환자 분류와 평가)는 기본적인 절차이기 때문에 500명, 즉 환자수와 일치하지만, 나머지는 상이한 것을 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-프로세스-경로와-관련된-현황&#34;&gt;(3) 프로세스 경로와 관련된 현황&lt;/h3&gt;
&lt;p&gt;환자가 등록을 하면, 피검사를 할지, X-Ray를 할지 등으로 분류가 될 것이다. 이러한 경로가 몇개 나왔는지 확인을 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;traces&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   trace                                      absolute_frequen… relative_frequen…
##   &amp;lt;chr&amp;gt;                                                  &amp;lt;int&amp;gt;             &amp;lt;dbl&amp;gt;
## 1 Registration,Triage and Assessment,X-Ray,…               258             0.516
## 2 Registration,Triage and Assessment,Blood …               234             0.468
## 3 Registration,Triage and Assessment,Blood …                 2             0.004
## 4 Registration,Triage and Assessment,X-Ray                   2             0.004
## 5 Registration,Triage and Assessment                         2             0.004
## 6 Registration,Triage and Assessment,X-Ray,…                 1             0.002
## 7 Registration,Triage and Assessment,Blood …                 1             0.002
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;총 7개가 나오는 것으로 확인이 된다.&lt;/p&gt;
&lt;p&gt;위 테이블을 시각화를 해본다. 이미 이러한 시각화를 할 수 있도록 &lt;code&gt;processmapR&lt;/code&gt; 패키지가 있어서 매우 쉽게 시각화를 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/unnamed-chunk-11-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그러면 지난 포스트에서 잠깐 봤던 이미지가 다시 출력되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제 보다 분명하게 이해되었을 것이다. 인수 &lt;code&gt;coverage&lt;/code&gt;는 경로 탐색을 위한 전체 빈도수에 대한 누적 퍼센트를 말한다. 다시 말하면 &lt;code&gt;coverage = 1&lt;/code&gt; 전체 데이터를 보여 달라는 뜻이고, 여기에서 &lt;code&gt;coverage = 0.???&lt;/code&gt; 값을 조정하여 시각화를 다르게 가져갈 수 있다. 예를 들면, &lt;code&gt;coverage 0.986&lt;/code&gt;으로 지정하면 누적 퍼센트 &amp;lt;= 0.986 이하의 데이터만 시각화로 출력이 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.986&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/unnamed-chunk-12-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-프로세스-지도&#34;&gt;(4) 프로세스 지도&lt;/h3&gt;
&lt;p&gt;이번에는 위 데이터의 현황에 대해 전체적인 프로세스가 어떻게 진행되는지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;process_map&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/processmap.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;전체적으로 경로 현황에 대해 보다 시각적으로 나타난 것으로 확인이 되었다. 위 시각화에 대한 분석은 각자 맡기도록 한다.&lt;/p&gt;
&lt;p&gt;다만, 중요한 것은 이렇게 시각화를 통하여 응급환자의 이동 경로를 매우 쉽고 빠르게 확인할 수 있다는 점이다.&lt;/p&gt;
&lt;h2 id=&#34;iii-결론&#34;&gt;III. 결론&lt;/h2&gt;
&lt;p&gt;이 부분이 만약 다른 업종과 연계되어 접근이 되면 어떻게 될까? 아니, 다른 업종도 위와 같은 데이터를 구성해서 활용할 수 있을까?&lt;/p&gt;
&lt;p&gt;다음 시간에는 event data를 실제로 생성하는 작업을 해보도록 해서 응용하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;아이라. (2017). KTAS 한국형 외상. 응급환자 분류와 평가(Triage and Assessment). Retrieved from &lt;a href=&#34;https://m.blog.naver.com/tinaarena/221070718090&#34;&gt;https://m.blog.naver.com/tinaarena/221070718090&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Ch04_bigquery_with_R</title>
      <link>https://chloevan.github.io/gcp/bigquery/01_settings/ch04_bigquery_with_r/</link>
      <pubDate>Tue, 21 Apr 2020 11:40:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/01_settings/ch04_bigquery_with_r/</guid>
      <description>&lt;h2 id=&#34;1-구글-클라우드-설정&#34;&gt;1. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, R과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;2-사용자-계정-인증&#34;&gt;2. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;h2 id=&#34;3-bigrquery-r-패키지-로드&#34;&gt;3. Bigrquery R 패키지 로드&lt;/h2&gt;
&lt;p&gt;패키지 설치가 되어 있지 않다면 아래 소스코드를 통해 패키지를 불러온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.packages(&amp;#34;bigrquery&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bigrquery)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-사용자-계정-인증&#34;&gt;4. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다. 이 때, &lt;code&gt;Enter authorization code:&lt;/code&gt; 입력하는 부분에서 인증키를 복사한 후 붙여넣기 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Provide authentication&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;bq_auth&lt;/span&gt;(use_oob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-데이터-연동&#34;&gt;5. 데이터 연동&lt;/h2&gt;
&lt;p&gt;사용자 계정 인증이 완료 되었다면, 이제 데이터를 불러오자. 이 때 중요한 것은 &lt;code&gt;project_id&lt;/code&gt;를 입력해줘야 하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;1-low-level-api&#34;&gt;(1) Low-Level API&lt;/h3&gt;
&lt;p&gt;직접 빅쿼리 프로젝트 ID를 이용해 연동해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;billing &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bigquerytutorial-274406&amp;#34;&lt;/span&gt;
sql &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT COUNT(*) as total_rows FROM `bigquery-public-data.samples.gsod`&amp;#34;&lt;/span&gt;

tb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bq_project_query&lt;/span&gt;(billing, sql)
&lt;span style=&#34;color:#75715e&#34;&gt;## Complete&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## Billed: 0 B&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;bq_table_download&lt;/span&gt;(tb)
&lt;span style=&#34;color:#75715e&#34;&gt;# A tibble: 1 x 1                                                         &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  total_rows&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1  114420316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-dbi를-활용한-연동&#34;&gt;(2) DBI를 활용한 연동&lt;/h3&gt;
&lt;p&gt;이번에는 R의 데이터베이스 인터페이스인 &lt;code&gt;DBI&lt;/code&gt;를 활용해서 데이터를 불러온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(DBI)
con &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dbConnect&lt;/span&gt;(
  bigrquery&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bigquery&lt;/span&gt;(), 
  project &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bigquery-public-data&amp;#34;&lt;/span&gt;, 
  dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;samples&amp;#34;&lt;/span&gt;, 
  billing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; billing
)

con
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;BigQueryConnection&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  Dataset: bigquery-public-data.samples&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  Billing: bigquerytutorial-274406&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;dbGetQuery&lt;/span&gt;(con, sql, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Complete&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Billed: 0 B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Downloading 1 rows in 1 pages.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## A tibble: 1 x 1                                                         &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  total_rows&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#1  114420316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-dplyr를-활용한-빅쿼리-연동&#34;&gt;(3) dplyr를 활용한 빅쿼리 연동&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;dbListTables&lt;/span&gt;(con)
&lt;span style=&#34;color:#75715e&#34;&gt;# [1] &amp;#34;github_nested&amp;#34;   &amp;#34;github_timeline&amp;#34; &amp;#34;gsod&amp;#34;            &amp;#34;natality&amp;#34;       &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [5] &amp;#34;shakespeare&amp;#34;     &amp;#34;trigrams&amp;#34;        &amp;#34;wikipedia&amp;#34;  &lt;/span&gt;

gsod &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tbl&lt;/span&gt;(con, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gsod&amp;#34;&lt;/span&gt;)
gsod &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total_rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;())

&lt;span style=&#34;color:#75715e&#34;&gt;# Running job &amp;#39;bigquerytutorial-274406.job_fe5MbF0IChh7fRBBhPKYHZSHN3qz.U...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Complete&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Billed: 0 B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Downloading 1 rows in 1 pages.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## Source:   lazy query [?? x 1]                                           &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## Database: BigQueryConnection&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  total_rows&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       &amp;lt;int&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1  114420316&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;똑같은 결과값을 내기 위해서 서로 다른 패키지를 활용해서 출력하는 것을 확인하였다. 지금까지, R과 빅쿼리 연동에 대해서 짧게 배우는 시간을 가졌다.&lt;/p&gt;
&lt;p&gt;자세한 건 공식문서를 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;6-파이썬과-빅쿼리-연동&#34;&gt;6. 파이썬과 빅쿼리 연동&lt;/h2&gt;
&lt;p&gt;파이썬과 빅쿼리 연동하는 예제는 &lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/01_settings/ch03_bigquery_with_python/&#34;&gt;Ch03_bigquery_with_python&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;7-reference&#34;&gt;7. Reference&lt;/h2&gt;
&lt;p&gt;Schendzielorz, Tim  M. “Google Big Query with R.” R, 20 Mar. 2020, &lt;a href=&#34;http://www.r-bloggers.com/google-big-query-with-r/&#34;&gt;www.r-bloggers.com/google-big-query-with-r/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;RStudio. “Databases Using R.” Databases Using R, db.rstudio.com/databases/big-query/.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch01 Process Analysis Intro</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch01_process_analysis_intro/</link>
      <pubDate>Mon, 20 Apr 2020 21:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch01_process_analysis_intro/</guid>
      <description>&lt;h2 id=&#34;i-process-mining-intro&#34;&gt;I. Process Mining Intro&lt;/h2&gt;
&lt;p&gt;모든 비즈니스는 프로세스와 연관이 깊다. 이러한 데이터를 통상적으로 &lt;code&gt;event&lt;/code&gt;라고 부르며, 다루는 데이터는 &lt;code&gt;log&lt;/code&gt; 데이터와 연관이 깊다. &lt;code&gt;프로세스 마이닝(Process Mining)&lt;/code&gt;은 데이터의 추출, 프로세싱, 그리고 분석의 순으로 진행한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch01_workflow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;데이터 추출 (Extraction)&lt;/code&gt;: &lt;code&gt;Raw Data&lt;/code&gt;를 &lt;code&gt;Event Data&lt;/code&gt;로 변환시킨다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;프로세싱 (Processing)&lt;/code&gt;: 데이터 가공과 비슷하며, 보통 &lt;code&gt;Aggregation&lt;/code&gt;, &lt;code&gt;Filtering&lt;/code&gt;, &lt;code&gt;Enrichment&lt;/code&gt;의 용어가 등장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;분석 (Analysis)&lt;/code&gt;: Performance, Control-Flow 등과 연관된 분석이 진행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 빠르게 시각화부터 진행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(httr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(edeaR)

url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/blob/master/log/log_eat_patterns.RDS?raw=true&amp;#39;&lt;/span&gt;
patterns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readRDS&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;(url))
&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch03_viz.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프에 대한 해석은 나중에 하더라도, 위 데이터를 보면, &lt;code&gt;Rgst&lt;/code&gt;아 &lt;code&gt;TraA&lt;/code&gt;는 공통으로 존재하고, 경로에 따라서 &lt;code&gt;X-Ray&lt;/code&gt;, &lt;code&gt;Blood Test&lt;/code&gt;에 나뉘는 걸 봐서는 환자의 경로에 관한 데이터임을 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-process-mining-overview&#34;&gt;II. Process Mining Overview&lt;/h2&gt;
&lt;p&gt;일반적으로 프로세스 마이닝은 이벤트 로그를 기반으로 비즈니스 프로세스를 분석할 수 있는 프로세스 관리 기술이라고 할 수 있다. 아래 그림을 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch02_workflow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;알파벳 글자는 일종의 &lt;code&gt;Task&lt;/code&gt;이다. 즉, 각각의 &lt;code&gt;Task&lt;/code&gt;가 끝날 때 마다 실제로 어떻게 행동하는지 알아보는 과정이 &lt;code&gt;Process Mining&lt;/code&gt;이라 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Process Mining&lt;/code&gt;에서 중요하게 바라봐야 하는 것은 무엇일까? 각 도메인마다 다르겠지만, &lt;code&gt;Patients&lt;/code&gt; 데이터의 경우에는 시간이 아닐까?&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;code&gt;MRI Scan&lt;/code&gt;이 시간이 소요된다는 걸 상식적으로 알고 있다. 그렇다면 진료 시간을 계산하기 위해서 &lt;code&gt;MRI Scan&lt;/code&gt;이 있고 없고에 따라서 어떻게 바뀌는지 알아보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_activity_presence&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRI SCAN&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;processing_time&lt;/span&gt;(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hours&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       min        q1    median      mean        q3       max    st_dev       iqr 
## 21.873056 27.790347 30.769444 30.303944 32.614514 38.245833  3.359803  4.824167 
## attr(,&amp;quot;units&amp;quot;)
## [1] &amp;quot;hours&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;MRI Scan&lt;/code&gt;을 할 때, 평균 &lt;code&gt;30.3&lt;/code&gt;시간이 걸린 것을 확인할 수 있다. 그렇다면 &lt;code&gt;MRI Scan&lt;/code&gt;을 하지 않았을 때 시간은 얼마나 단축이 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_activity_presence&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRI SCAN&amp;#34;&lt;/span&gt;, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;processing_time&lt;/span&gt;(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hours&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       min        q1    median      mean        q3       max    st_dev       iqr 
## 10.717778 23.285764 25.840139 25.465921 27.898958 33.422500  3.448286  4.613194 
## attr(,&amp;quot;units&amp;quot;)
## [1] &amp;quot;hours&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때에는 평균 &lt;code&gt;25.45&lt;/code&gt;시간으로 약 5시간이 단축된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iii-lets-begin-with-process-mining&#34;&gt;III. Let&amp;rsquo;s Begin with Process Mining&lt;/h2&gt;
&lt;p&gt;이벤트 로그를 통해서 우리는 &lt;code&gt;Process Mining&lt;/code&gt;에 대한 간단하게 맛보기를 진행하였다. 이번 포스트를 통해서 어느정도 감을 잡았으면 좋겠다. 강사도 처음 접하는 분석이지만, 실제로 웹로그분석시에는 &lt;code&gt;Google Analytics&lt;/code&gt;라는 좋은 Tool을 활용하여 자주 접하는 내용이기도 했다. 내용 자체는 어렵지는 않다. 다만,  그러나, &lt;code&gt;Web log&lt;/code&gt;이외의 다른 영역에서 어떻게 &lt;code&gt;Process Mining&lt;/code&gt;을 어떻게 다루는지 궁금하던 차에, 관련 논문을 보게 되었고, 이에 한번 본격적으로 다뤄보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R 시각화 튜토리얼 Intro</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch01_intro/</link>
      <pubDate>Sun, 19 Apr 2020 10:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch01_intro/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;를 실행하면 &lt;code&gt;Registered ~&lt;/code&gt;라는 문구가 나왔다면 컴퓨터내 시스템에서 &lt;code&gt;RStudio&lt;/code&gt; 환경으로 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 정상적으로 불러왔다는 뜻이다. 이제 패키지 내 다양한 함수를 사용할 수 있는 사전준비가 완료된 것으로 이해해도 좋다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h3 id=&#34;1-ggplot2-시각화-예시&#34;&gt;(1) ggplot2 시각화 예시&lt;/h3&gt;
&lt;p&gt;먼저 산점도를 시각화를 통해서 &lt;code&gt;ggplot2&lt;/code&gt;의 문법에 대해 이해하도록 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listings, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Warning: Removed 1426 rows containing missing values (geom_point).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch01_intro/graph_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프는 &lt;code&gt;listings&lt;/code&gt; 변수와 &lt;code&gt;sales&lt;/code&gt;변수 사이에 양의 상관관계가 있는 것으로 확인 되었다. 다시 말하면 &lt;code&gt;listings&lt;/code&gt; 갯수가 증가하면 증가할수록 &lt;code&gt;sales&lt;/code&gt; 갯수도 증가하는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code&gt;ggplot2&lt;/code&gt; 그래프의 구조는 어떻게 될까? 기본적으로 &lt;code&gt;ggplot2&lt;/code&gt; 그래프는 레이어의 층을 겹겹이 쌓는다고 생각하면 보다 쉽다. 아래 그림을 우선 보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch01_intro/Figure_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; 패키지 개발자인 해들리 위컴은 &lt;code&gt;The Layered Grammar of Graphics&lt;/code&gt;라는 논문을 통해서 위와 같은 그래프의 문법을 제안했다. 순서대로 설명하면, (1) 그래프를 그릴 데이터, (2) X축과 Y축에 놓을 변수, (3) 그래프의 종류, 그리고 (4) 옵션.&lt;/p&gt;
&lt;p&gt;코드와 함께 설명하면 다음과 같다. 다시 한번 코드를 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listings, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ggplot(): 그래프를 그릴 함수를 호출한다.&lt;/li&gt;
&lt;li&gt;data = txhousing: txhousing 데이터를 사용한다.&lt;/li&gt;
&lt;li&gt;aes(x = listings, y = sales): x축에는 listings라는 변수를, y축에는 sales라는 변수를 설정한다.&lt;/li&gt;
&lt;li&gt;geom_point(): 산점도라는 종류의 그래프를 그리겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 방식으로 데이터명와 x축, y축 그리고 그래프의 종류만 바꿔주면 꽤나 근사한 그래프가 나올 수 있다.&lt;/p&gt;
&lt;p&gt;그런데, 여기서 몇가지 궁금한 것이 생겨야 한다. 그래프 종류는 많지 않나요? X축과 Y축에는 어떤 변수를 넣어야 하나요? * 해석은 어떻게 해야 하나요?&lt;/p&gt;
&lt;p&gt;결론적으로 말하면, 위 종류 모두 결국엔 통계와 연관성이 있다. 매우 복잡한 통계적인 해석은 일단 차후에 하더라도 기본적인 방법론에 대해서는 강사의 경험담과 여러 책을 통해 알게된 기본적인 내용을 공유한다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;강사가 2019년 후반부에 책을 쓸까하다가 기웃기웃 거리던 때에 작성했던 내용이다. &lt;code&gt;github.io&lt;/code&gt; 블로그로 통합한 이후 더 이상 업데이트는 시키지 않고 있다. 여기에 있는 내용들도 조금씩 옮길 예정이다. 덧붙여서, 강사가 과거에 올렸던 &lt;code&gt;tistory&lt;/code&gt;, &lt;code&gt;RPubs&lt;/code&gt;에 올렸던 자료들도 틈틈히 본 포스트에 다듬어서 올릴 예정이다. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Shiny 프로젝트 Review &amp; 더 알아볼 것</title>
      <link>https://chloevan.github.io/r/shiny/project_final/</link>
      <pubDate>Sat, 18 Apr 2020 17:15:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_final/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;Corona Shiny Project 3 - Visusalization (Bubble Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;Corona Shiny Project 4 - Visusalization (Map Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_05/&#34;&gt;Corona Shiny Project 5 - Chart with DateInput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_06_01/&#34;&gt;Corona Shiny Project 6_1 - 데이터 전처리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_06_02/&#34;&gt;Corona Shiny Project 6_2 - Chart Automation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-현재-게시중인-다양한-종류의-shiny-app&#34;&gt;III. 현재 게시중인 다양한 종류의 Shiny App&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(참고) 가급적 PC에서 확인하시기를 바란다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/source/&#34;&gt;영화관련 데이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/fashion/&#34;&gt;웹크롤링 데이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/shinyProject_Test/&#34;&gt;ShinyTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/corona_19/&#34;&gt;Corona_Ref&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;강사에게 영감을 준 코로나 대시보드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/COVID_19_Project/&#34;&gt;Corona_Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-더-알아볼-것&#34;&gt;IV. 더 알아볼 것&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/datastorm-open/shinymanager&#34;&gt;로그인 기능&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny App 모듈화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;약 2주동안 작성한 것 같다. 위 프로젝트는 R에 대해 처음 배우는 사람에게는 조금 난해할 수 있다. 데이터 가공 및 시각화에 대한 구체적인 설명을 하기에는 사실 공간도 부족하고 글의 본질에도 조금 벗어난다.&lt;/p&gt;
&lt;p&gt;대시보드의 본질은 매일매일 봐야하는 데이터를 자동화(&lt;code&gt;Automation&lt;/code&gt;)의 기능이 있다. 강사가 작업한 &lt;code&gt;Corona와 웹크롤링 대시보드&lt;/code&gt;는 외부 또는 수동으로 데이터를 계속 매일매일 업데이트 해주면서 쌓아가고 있는 대시보드이다. 한번 만든 이후에는 현재 별다른 코딩을 추가하지도 않고 있다. 이것외에 더 중요한 &lt;code&gt;Metric&lt;/code&gt;이 나온다면 그 때 다시 대시보드가 하나씩 추가가 될 것이다. 물론 이건 현업에서의 일이다.&lt;/p&gt;
&lt;p&gt;결국엔 이러한 과정도 매일매일 꾸준하게 하지 않으면 잊게 될 것이다. 강사가 이러한 글을 블로그에 담을 때는 결국 코드의 재사용성도 염두에 두었다. 지도 시각화 같은 경우에는 여간해서는 바뀌지 않을 것이고, 디자인만 조금 손 보면 대시보드는 늘 그럴싸하게 나오니까 말이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;의 대장정은 여기까지이다.&lt;/p&gt;
&lt;p&gt;아! 로그인 기능과 클라우드 서버를 통한 배포! 이 부분은 추후에 추가적으로 업데이트 한다. (언제가 될지는 모르겠지만&amp;hellip;) 내용적으로 어려운 건 아니다. 한번 해보면 된다. 내용적으로 어려운 건 언제나 분석(Analytics)이다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinydashboard., (2020). shinydashboard. Retrieved April 1, 2020, from &lt;a href=&#34;https://rstudio.github.io/shinydashboard/index.html/&#34;&gt;https://rstudio.github.io/shinydashboard/index.html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;flexdashboard, (2020). flexdashboard Retrieved April 2, 2020, from &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;https://rmarkdown.rstudio.com/flexdashboard/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;shinyapps.io team., (2020, March 5). shinyapps.io user guide. Retrieved March 31, 2020, from &lt;a href=&#34;https://docs.rstudio.com/shinyapps.io/&#34;&gt;https://docs.rstudio.com/shinyapps.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;김진성. (2018). 빅데이터 분석을 위한 R 프로그래밍. 서울: 가메출판사.&lt;/p&gt;
&lt;p&gt;Grolemund, G., Cheng, J., &amp;amp; Cetinkaya-Rundel, M. (2017, August 9). Customize your UI with HTML. Retrieved from &lt;a href=&#34;https://shiny.rstudio.com/articles/html-tags.html&#34;&gt;https://shiny.rstudio.com/articles/html-tags.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Allaire. (2014, January 24). Application layout guide. Retrieved March 30, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;https://shiny.rstudio.com/articles/layout-guide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Grolemund, Garrett. and Cheng, Joe., (2014). Style your apps with CSS Retrieved April 5, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/css.html&#34;&gt;https://shiny.rstudio.com/articles/css.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FABACHER, Thibaut. “Covid-19 Interactive Map (Using R with Shiny, Leaflet and Dplyr).” R, R-Bloggers, 12 Mar. 2020, &lt;a href=&#34;http://www.r-bloggers.com/covid-19-interactive-map-using-r-with-shiny-leaflet-and-dplyr/&#34;&gt;www.r-bloggers.com/covid-19-interactive-map-using-r-with-shiny-leaflet-and-dplyr/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 6_2 - Chart Automation</title>
      <link>https://chloevan.github.io/r/shiny/project_06_02/</link>
      <pubDate>Sat, 18 Apr 2020 14:15:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_06_02/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;Corona Shiny Project 3 - Visusalization (Bubble Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;Corona Shiny Project 4 - Visusalization (Map Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_05/&#34;&gt;Corona Shiny Project 5 - Chart with DateInput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_06_01/&#34;&gt;Corona Shiny Project 6_1 - 데이터 전처리)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-데이터-전처리-리뷰&#34;&gt;III. 데이터 전처리 리뷰&lt;/h2&gt;
&lt;p&gt;처음 이글을 접하는 사람들을 위해 전체적인 코드를 다시 정리하였다. 처음부터 &lt;code&gt;shiny tutorial&lt;/code&gt;을 진행하는 것도 도움이 되지만, 우선 이번 강의의 목적은 &lt;code&gt;Chart Automation&lt;/code&gt;을 어떻게 활용하는지가 우선이기 때문에 데이터셋은 전처리된 데이터셋을 다시 정리한다.&lt;/p&gt;
&lt;p&gt;아래 코드대로 실행하면 되니, 큰 문제없이 따라와주기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(rgdal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Loading required package: sp
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## rgdal: version: 1.4-8, (SVN revision 845)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 2.4.2, released 2019/06/28
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/gdal
##  GDAL binary built with GEOS: FALSE 
##  Loaded PROJ.4 runtime: Rel. 5.2.0, September 15th, 2018, [PJ_VERSION: 520]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/proj
##  Linking to sp version: 1.3-2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(httr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(leaflet)

&lt;span style=&#34;color:#75715e&#34;&gt;# Excel URL Copy&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 파일 이름만 가져오기&lt;/span&gt;
getFileName &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;(url)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에 파일 다운로드 받기&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;download.file&lt;/span&gt;(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, destfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getFileName)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에서 파일 업로드 하기&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_excel&lt;/span&gt;(getFileName)

corona_date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dateRep)

countries &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readOGR&lt;/span&gt;(dsn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop/ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,use_iconv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T,
                     verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)

countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST[ &lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST)) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

corona &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(dateRep, countriesAndTerritories, cases) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 필요한 열만 추출한다. &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by_at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cases)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# cases를 제외하고 모두 그룹을 한다는 뜻이다. &lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(row_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ungroup&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 그룹 인덱스를 만든다.&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;spread&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dateRep, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;row_id) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; dataCases &lt;span style=&#34;color:#75715e&#34;&gt;# 인덱스 제거 후 corona2로 저장한다. &lt;/span&gt;

coronaConfirmed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left_join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(), 
                                              Pop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;()), 
                             dataCases &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
                               &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countriesAndTerritories)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
                               &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(countries))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;countries&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## Warning: Column `countries` joining factor and character vector, coercing into
## character vector
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;coronaConfirmed&lt;span style=&#34;color:#a6e22e&#34;&gt;[is.na&lt;/span&gt;(coronaConfirmed)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

countries2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(countries,
                    coronaConfirmed,
                    by.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NAME&amp;#34;&lt;/span&gt;,
                    by.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;countries&amp;#34;&lt;/span&gt;,
                    sort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;처음 이글을 접한 사람들에게 여기에서 문제가 될만한 소스코드는 &lt;code&gt;readOGR&lt;/code&gt;에 해당하는 지도객체를 가져오는 문제인데, 이 부분은 강사가 작업한 &lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;Corona Shiny Project 4 - Visusalization (Map Chart)&lt;/a&gt;에서 추가학습 할 것을 권한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;countries2&lt;/code&gt; 객체로 데이터를 &lt;code&gt;Merge&lt;/code&gt; 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 합쳐진 데이터의 데이터를 다시 보면 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(NAME, Pop, &lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##          NAME      Pop 2019-12-31 2020-01-01 2020-01-02 2020-01-03 2020-01-04
## 241  Zimbabwe 13.80508          0          0          0          0          0
## 240    Zambia 15.97200          0          0          0          0          0
## 239     Yemen 28.03683          0          0          0          0          0
## 236   Vietnam 96.16016          0          0          0          0          0
## 235 Venezuela 31.30402          0          0          0          0          0
## 234   Vatican  0.00100          0          0          0          0          0
##     2020-01-05 2020-01-06 2020-01-07 2020-01-08 2020-01-09 2020-01-10
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-01-11 2020-01-12 2020-01-13 2020-01-14 2020-01-15 2020-01-16
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-01-17 2020-01-18 2020-01-19 2020-01-20 2020-01-21 2020-01-22
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-01-23 2020-01-24 2020-01-25 2020-01-26 2020-01-27 2020-01-28
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          2          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-01-29 2020-01-30 2020-01-31 2020-02-01 2020-02-02 2020-02-03
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          3          0          2          1
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-02-04 2020-02-05 2020-02-06 2020-02-07 2020-02-08 2020-02-09
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          1          1          0          2          1          1
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-02-10 2020-02-11 2020-02-12 2020-02-13 2020-02-14 2020-02-15
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          1          0          1          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-02-16 2020-02-17 2020-02-18 2020-02-19 2020-02-20 2020-02-21
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-02-22 2020-02-23 2020-02-24 2020-02-25 2020-02-26 2020-02-27
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-02-28 2020-02-29 2020-03-01 2020-03-02 2020-03-03 2020-03-04
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          0          0          0          0
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-03-05 2020-03-06 2020-03-07 2020-03-08 2020-03-09 2020-03-10
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          0          1          4          9          1
## 235          0          0          0          0          0          0
## 234          0          0          0          0          0          0
##     2020-03-11 2020-03-12 2020-03-13 2020-03-14 2020-03-15 2020-03-16
## 241          0          0          0          0          0          0
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          4          4          5          5          4          4
## 235          0          0          0          0         10          5
## 234          0          0          0          0          0          0
##     2020-03-17 2020-03-18 2020-03-19 2020-03-20 2020-03-21 2020-03-22
## 241          0          0          0          0          1          1
## 240          0          0          2          0          0          0
## 239          0          0          0          0          0          0
## 236          4          0         15          9          2          7
## 235         18          0          0          0          3          0
## 234          0          0          0          0          0          0
##     2020-03-23 2020-03-24 2020-03-25 2020-03-26 2020-03-27 2020-03-28
## 241          0          0          0          1          0          2
## 240          1          0          0          9          2          2
## 239          0          0          0          0          0          0
## 236         24          5         11         14          5         16
## 235          0         48          7         15          1         12
## 234          0          0          0          0          0          0
##     2020-03-29 2020-03-30 2020-03-31 2020-04-01 2020-04-02 2020-04-03
## 241          2          0          0          1          0          0
## 240         12          1          6          0          1          3
## 239          0          0          0          0          0          0
## 236         54          5          1          0          6          4
## 235          0          0         16          0          8          1
## 234          0          0          0          0          0          0
##     2020-04-04 2020-04-05 2020-04-06 2020-04-07 2020-04-08 2020-04-09
## 241          1          0          0          0          1          1
## 240          0          0          0          0          0          0
## 239          0          0          0          0          0          0
## 236          0          1          1          4          6          0
## 235          0          0          4         11          7          1
## 234          0          0          0          0          0          0
##     2020-04-10 2020-04-11 2020-04-12 2020-04-13 2020-04-14 2020-04-15
## 241          0          0          3          0          3          0
## 240          0          1          0          3          2          0
## 239          1          0          0          0          0          0
## 236          4          2          1          4          3          9
## 235          4          4          0          6          8          4
## 234          0          0          0          0          0          0
##     2020-04-16 2020-04-17
## 241          6          1
## 240          3          0
## 239          0          0
## 236          1          0
## 235          4          7
## 234          0          0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;변환하고 합친 데이터가 이렇게 정렬된 것을 볼 수 있다. 참고로 위 데이터는 각 나라별 확진자 수 데이터를 보여주는 것이다.&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;flexdashboard&lt;/code&gt;를 활용해서 지도 시각화를 진행해보자. 코드가 어려운 것은 아니다. 다만, &lt;code&gt;reactive&lt;/code&gt;에 대한 개념이 없으면 문법이 달라서 조금 고생할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-시각화-코드&#34;&gt;IV. 시각화 코드&lt;/h2&gt;
&lt;h3 id=&#34;1-sliderinput&#34;&gt;(1) sliderInput&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Inputs&lt;/code&gt; 탭에 아래와 같이 코드를 입력한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# to control speed, plus looping&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dayRange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Looping Animation:&amp;#34;&lt;/span&gt;,
             min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(corona_date), max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date),
             value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;median&lt;/span&gt;(corona_date)), step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, 
             animate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animationOptions&lt;/span&gt;(interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;소스코드에 대한 설명은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dateRange&lt;/code&gt; : &lt;code&gt;inputID&lt;/code&gt;이며, 날짜 데이터를 받는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Looping Animation:&lt;/code&gt; &lt;code&gt;sliderInput&lt;/code&gt; 표시글이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;: 날짜의 범위를 최소값과 최대값을 나타낸다. &lt;code&gt;corona_date&lt;/code&gt;는 데이터의 수집 날짜로 &lt;code&gt;vector&lt;/code&gt;로 구성되어 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value:&lt;/code&gt; 처음 &lt;code&gt;ShinyApp&lt;/code&gt;이 실행되었을 때 나타내는 초기값이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step:&lt;/code&gt; 1~100까지 vector가 존재할 때, 건너뛰는 단위를 나타낸다. 무언가 극적인 변화를 보여줄 때, 쓰면 좋다. 강사는 25로 지정했다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animate:&lt;/code&gt; 차트 애니메이션 작동 방식을 의미하며, &lt;code&gt;step&lt;/code&gt;에 따라 데이터가 바뀐다. &lt;code&gt;intervals&lt;/code&gt; 시간, &lt;code&gt;loop&lt;/code&gt;는 자동으로 계속 &lt;code&gt;step&lt;/code&gt;을 돌릴 것인지 &lt;code&gt;TRUE&lt;/code&gt; 또는 &lt;code&gt;FALSE&lt;/code&gt;에 따라 달라진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-날짜-데이터-다루기&#34;&gt;(2) 날짜 데이터 다루기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;세계 인구 지도 차트&lt;/a&gt; 작성했을 때의 코드를 기억하였으면 좋겠다. 왜냐하면 많이 바뀌지 않기 때문이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 색상, 범례에 사용할 것&lt;/span&gt;
mybins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;)
mypalette &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorBin&lt;/span&gt;(palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YlOrBr&amp;#34;&lt;/span&gt;, domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST, na.color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mybins)

&lt;span style=&#34;color:#75715e&#34;&gt;# 국가 클릭 시, 아래 내용으로 출력&lt;/span&gt;
mytext &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME_EN,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Area:  &amp;#34;&lt;/span&gt;, countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;CONTINENT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
  sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(htmltools&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HTML)

&lt;span style=&#34;color:#75715e&#34;&gt;# 마지막으로 Mapping&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(countries) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;()  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;( lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, lng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; , zoom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addPolygons&lt;/span&gt;( 
    fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mypalette&lt;/span&gt;(POP_EST), 
    weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;,
    dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,
    fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
    highlight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlightOptions&lt;/span&gt;(
      weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#666&amp;#34;&lt;/span&gt;,
      dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
      bringToFront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;),
    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mytext,
    labelOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelOptions&lt;/span&gt;(
      style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-weight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;, padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2px 7px&amp;#34;&lt;/span&gt;),
      textsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13px&amp;#34;&lt;/span&gt;,
      direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
    )
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addLegend&lt;/span&gt;(pal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mypalette, values&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;POP_EST, opacity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottomleft&amp;#34;&lt;/span&gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 바꿔야 하는 코드는 무엇일까? 인구 대신 확진자 수 데이터만 대입하면 된다. 그런데 문제가 있다. 날짜가 바뀔때마다 확진수도 바뀌어야 한다. 그렇지 않은가? 그래야 의미가 있기 때문이다. 즉, 여기서 고민해야 하는 것은 프로세스이다.&lt;/p&gt;
&lt;p&gt;순서대로 고민해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째, 날짜가 바뀐다.&lt;/li&gt;
&lt;li&gt;두번째, 바뀐 날짜를 문자열 변수로 저장한다.&lt;/li&gt;
&lt;li&gt;세번째, 저장된 변수를 활용하여 데이터의 &lt;code&gt;Column&lt;/code&gt;를 선택한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 Workflow대로 작업하면 된다.&lt;/p&gt;
&lt;p&gt;세번째의 개념을 좀더 돕고자 아래 소스코드를 예제로 들어본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;indicator &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-10&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indicator,
           country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME, 
           Confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2[[indicator]],
           Pop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Pop) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;desc&lt;/span&gt;(Confirmed)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##          date     country Confirmed       Pop
## 1  2020-03-10       Italy      1797 62.137802
## 2  2020-03-10       Spain       615 48.958159
## 3  2020-03-10        Iran       595 82.021564
## 4  2020-03-10      France       286 67.106161
## 5  2020-03-10     Germany       237 80.594017
## 6  2020-03-10     Denmark        75  5.605948
## 7  2020-03-10 Netherlands        56 17.084719
## 8  2020-03-10      Sweden        45  9.960487
## 9  2020-03-10 Switzerland        42  8.236303
## 10 2020-03-10     Belgium        39 11.491346
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서 주목해야 하는 코드는 &lt;code&gt;countries2[[indicator]]&lt;/code&gt; 이 코드이다. 이번에는 corona_date의 값을 바꿔서 실제로 값이 들어오는 것처럼 적용한다. 이 때에는 &lt;code&gt;max(corona_date)&lt;/code&gt;값을 가져온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;indicator &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(corona_date))
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;현재 날짜: &amp;#34;&lt;/span&gt;, indicator))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;현재 날짜: 2020-04-17&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; indicator,
           country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME, 
           Confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2[[indicator]],
           Pop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Pop) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;desc&lt;/span&gt;(Confirmed)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##          date country Confirmed       Pop
## 1  2020-04-17   Spain      5183  48.95816
## 2  2020-04-17  Turkey      4801  80.84521
## 3  2020-04-17   Italy      3786  62.13780
## 4  2020-04-17  Russia      3448 142.25752
## 5  2020-04-17 Germany      3380  80.59402
## 6  2020-04-17  France      2641  67.10616
## 7  2020-04-17  Brazil      2105 207.35339
## 8  2020-04-17  Canada      1717  35.62368
## 9  2020-04-17    Iran      1606  82.02156
## 10 2020-04-17 Belgium      1236  11.49135
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터가 수집된 4월 17일 기준으로 값이 바뀌는 것을 알 수 있다. 위와 같은 방법으로 모두 수정해주면 끝이다.&lt;/p&gt;
&lt;h3 id=&#34;3-지도-차트-완성하기&#34;&gt;(3) 지도 차트 완성하기&lt;/h3&gt;
&lt;p&gt;이제 지도차트를 작성하는데, 이 때에는 &lt;code&gt;renderLeaflet({})&lt;/code&gt; 함수를 사용하는데, 그 이유는 &lt;code&gt;reactive()&lt;/code&gt; 객체를 다루기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sliderInput()&lt;/code&gt; 에 입력되는 데이터를 받아서 사용하려면 &lt;code&gt;reactive()&lt;/code&gt; 객체로 변환해야 해서 적용해야 하기 때문에 이 부분만 주의하면 된다. (일종의 &lt;code&gt;shiny&lt;/code&gt; 문법이라 이해하였으면 좋겠다.)&lt;/p&gt;
&lt;p&gt;날짜 데이터 다루는 방법을 &lt;code&gt;shiny에 적용하면&lt;/code&gt; 아래 코드와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;dayRange &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderText&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dayRange) })
  indicator &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dayRange&lt;/span&gt;()
  &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(indicator)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;print(indicator)&lt;/code&gt;이 값은 &lt;code&gt;step&lt;/code&gt;이 바뀔 때마다 다른 날짜가 주기적으로 입력될 것이다.&lt;/p&gt;
&lt;p&gt;기존에 진행했던 소스코드 &lt;code&gt;POP_EST&lt;/code&gt;를 찾아서, &lt;code&gt;countries2[[indicator]]&lt;/code&gt;로 모두 수정한다. 그리고, &lt;code&gt;mytext&lt;/code&gt;에서도 &amp;ldquo;NewCases: &amp;ldquo;, round(countries2[[indicator]], 0),
sep=&amp;rdquo;&amp;quot;) 코드를 추가하여 보완하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;renderLeaflet&lt;/span&gt;({
  dayRange &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderText&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dayRange) })
  indicator &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dayRange&lt;/span&gt;()
  &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(indicator)

&lt;span style=&#34;color:#75715e&#34;&gt;# 색상, 범례에 사용할 것&lt;/span&gt;
mybins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;)
mypalette &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorBin&lt;/span&gt;(palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YlOrBr&amp;#34;&lt;/span&gt;, domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;countries2[[indicator]], na.color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mybins)

&lt;span style=&#34;color:#75715e&#34;&gt;# Prepare the text for tooltips:&lt;/span&gt;
mytext &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME_EN,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Area:  &amp;#34;&lt;/span&gt;, countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;CONTINENT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(countries2&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NewCases: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(countries2[[indicator]], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
  sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(htmltools&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HTML)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;map&amp;#34;&lt;/span&gt;, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries2) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;()  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;(lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, lng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; , zoom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addPolygons&lt;/span&gt;( 
    fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mypalette&lt;/span&gt;(countries2[[indicator]]), 
    weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;,
    dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,
    fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
    highlight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlightOptions&lt;/span&gt;(
      weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#666&amp;#34;&lt;/span&gt;,
      dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
      bringToFront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;),
    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mytext,
    labelOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelOptions&lt;/span&gt;(
      style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-weight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;, padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2px 7px&amp;#34;&lt;/span&gt;),
      textsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13px&amp;#34;&lt;/span&gt;,
      direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
    )
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  leaflet&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addLegend&lt;/span&gt;(pal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mypalette, values&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;countries2[[indicator]], opacity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottomleft&amp;#34;&lt;/span&gt; )
  
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output은 유투브 영상을 통해 확인한다.&lt;/p&gt;
&lt;h3 id=&#34;4-유투브-sample&#34;&gt;(4) 유투브 Sample&lt;/h3&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BB9osH5Cdwg?autoplay=1&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;이제 최종버전만 남았다. 3개의 동적 대시보드를 하나로 합치는 작업만 남았는데, 이 부분은 수강생의 과제로 남겨둔다. 전체코드는 강사가 게시한 &lt;a href=&#34;https://chloevan.shinyapps.io/COVID_19_Project/&#34;&gt;ShinyApp&lt;/a&gt;에서 확인하기를 바란다 (참고: 가급적 PC에서 보기를 바란다.)&lt;/p&gt;
&lt;p&gt;이글을 읽는 사람들에게 작게나마 도움이 되기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Round 함수 - digits</title>
      <link>https://chloevan.github.io/r/basics/round/</link>
      <pubDate>Fri, 17 Apr 2020 10:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/round/</guid>
      <description>&lt;h2 id=&#34;round-함수-소개&#34;&gt;Round 함수 소개&lt;/h2&gt;
&lt;p&gt;round 함수는 대개 소수점 자리에서 반올림 할 때 자주 쓰는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.56&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(test, digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.2 2.4 3.6 4.6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;digits = 1&lt;/code&gt;의 의미는 소수점 첫번째 자리에서 반올림 하라는 뜻이다.&lt;/p&gt;
&lt;p&gt;그런데 &lt;code&gt;digits = -1&lt;/code&gt;을 하게 되면 어떻게 될까?&lt;/p&gt;
&lt;h2 id=&#34;정수-반올림&#34;&gt;정수 반올림&lt;/h2&gt;
&lt;p&gt;빠르게 실습을 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(test2, digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] -10 -30  10  30  40 120 250
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;digits = -1&lt;/code&gt;을 하게되면 정수의 첫번째 자리에서 반올림한다.&lt;/p&gt;
&lt;p&gt;매우 기본적인 것이지만, 자주 쓰지 않으면 잘 모르는 기본함수 사용 요령법이다.&lt;/p&gt;
&lt;p&gt;Just Reminder&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 6_1 - 데이터 전처리</title>
      <link>https://chloevan.github.io/r/shiny/project_06_01/</link>
      <pubDate>Tue, 14 Apr 2020 10:15:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_06_01/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;Corona Shiny Project 3 - Visusalization (Bubble Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;Corona Shiny Project 4 - Visusalization (Map Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_05/&#34;&gt;Corona Shiny Project 5 - Chart with DateInput&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-생각해볼-문제&#34;&gt;III. 생각해볼 문제&lt;/h2&gt;
&lt;p&gt;생각해볼 문제, &lt;code&gt;sliderInput&lt;/code&gt;의 기능을 활용한다는 것의 의미는 매일매일 데이터가 변화하는 것을 확인하는 것에 의미가 있다. 누적데이터가 중요한지, 아니면 매일매일 업데이트된 데이터가 중요한지에 따라 대시보드의 성격이 달라진다.&lt;/p&gt;
&lt;p&gt;우선, 누적데이터는 &lt;code&gt;line Graph&lt;/code&gt;를 통해서 한번 보여줬기 때문에, 여기에서는 생략하겠다.&lt;/p&gt;
&lt;p&gt;날짜가 변화할 때마다 국가별 &lt;code&gt;Case&lt;/code&gt;가 달라지는 과정을 보여주고자 한다. 그런데, 문제가 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-데이터-처리의-문제점&#34;&gt;IV. 데이터 처리의 문제점&lt;/h2&gt;
&lt;p&gt;이 튜토리얼을 계속 따라왔다면, 다양한 데이터셋이 사용되고 있음을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;corona 데이터셋&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;지도 데이터셋&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;지도 데이터셋은 &lt;code&gt;sp&lt;/code&gt;라는 특별한 객체로 이루어져 있고, 이미 깔끔하게 국가별 지도 &lt;code&gt;mapping&lt;/code&gt;까지 완료된 데이터셋이다.&lt;/p&gt;
&lt;p&gt;그럼 여기에서 기준이 데이터셋이 무엇일까? 당연히 &lt;code&gt;지도 데이터셋&lt;/code&gt;이다. 강사가 시간을 가장 많이 허비한 포인트가 이 지점이다. 이 글을 읽는 사람은 그러려니 하겠지만, 사실 매우 중요하다. 왜냐하면, 지도가 &lt;code&gt;Plotting&lt;/code&gt; 되지 않는다!&lt;/p&gt;
&lt;h2 id=&#34;1-지도-데이터셋에-포함된-국가의-숫자&#34;&gt;(1) 지도 데이터셋에 포함된 국가의 숫자&lt;/h2&gt;
&lt;p&gt;우선 지도 데이터셋을 좀 더 면밀히 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(rgdal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Loading required package: sp
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## rgdal: version: 1.4-8, (SVN revision 845)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 2.4.2, released 2019/06/28
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/gdal
##  GDAL binary built with GEOS: FALSE 
##  Loaded PROJ.4 runtime: Rel. 5.2.0, September 15th, 2018, [PJ_VERSION: 520]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/proj
##  Linking to sp version: 1.3-2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;countries &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readOGR&lt;/span&gt;(dsn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop/ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,use_iconv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T,
                     verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 241
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우선 241개로 확인이 된다.&lt;/p&gt;
&lt;h2 id=&#34;2-corona-데이터셋-국가의-숫자&#34;&gt;(2) corona 데이터셋 국가의 숫자&lt;/h2&gt;
&lt;p&gt;이번에는 다운로드 엑셀 파일을 Import 하여 실제 국가의 숫자가 몇개인지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(httr)

&lt;span style=&#34;color:#75715e&#34;&gt;# URL Copy&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 파일 이름만 가져오기&lt;/span&gt;
getFileName &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;(url)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에 파일 다운로드 받기&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;download.file&lt;/span&gt;(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, destfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getFileName)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에서 파일 업로드 하기&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_excel&lt;/span&gt;(getFileName)
&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 206
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;일단 &lt;code&gt;countries&lt;/code&gt; 데이터셋의 국가의 숫자와 &lt;code&gt;corona&lt;/code&gt; 데이터셋의 국가의 숫자가 다른 것이 눈에 띈다.&lt;/p&gt;
&lt;p&gt;어떻게 해결 할 것인가? 하는 문제점이 발생한다.&lt;/p&gt;
&lt;h2 id=&#34;3-동일-국가이나-기재된-값이-상호-다른-경우&#34;&gt;(3) 동일 국가이나 기재된 값이 상호 다른 경우&lt;/h2&gt;
&lt;p&gt;우선 &lt;code&gt;U&lt;/code&gt;로 시작하는 국가를 양쪽에서 추출한 후 비교해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)
country_names &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME)
corona_names &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories))

&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(
  from_countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(country_names&lt;span style=&#34;color:#a6e22e&#34;&gt;[str_detect&lt;/span&gt;(country_names, pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^U&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty&amp;#34;&lt;/span&gt;), 
  from_corona &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; corona_names&lt;span style=&#34;color:#a6e22e&#34;&gt;[str_detect&lt;/span&gt;(corona_names, pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^U&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;]
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##             from_countries                  from_corona
## 1               Uzbekistan                       Uganda
## 2                  Uruguay                      Ukraine
## 3          U.S. Virgin Is.         United_Arab_Emirates
## 4 United States of America               United_Kingdom
## 5           United Kingdom  United_Republic_of_Tanzania
## 6     United Arab Emirates     United_States_of_America
## 7                  Ukraine United_States_Virgin_Islands
## 8                   Uganda                      Uruguay
## 9                    empty                   Uzbekistan
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 데이터에서 볼 수 있는 것처럼, 똑같은 미국이지만, 표기법이 다르다. (강사의 혼잣말, 고치는 방법이 있기는 하다. 그런데, 쉽지가 않다! 강의의 본질은 고생은 수강생이 하는게 아니라 원래 강의 준비하는 사람이 하는거다!)&lt;/p&gt;
&lt;p&gt;우선 진행방법은 아래와 같다. 여기에서 국가명을 고쳐야 하는 건, &lt;code&gt;corona&lt;/code&gt; 데이터셋이다.&lt;/p&gt;
&lt;p&gt;수정하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(stringr)

corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories[corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United_Arab_Emirates&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United Arab Emirates&amp;#34;&lt;/span&gt;
corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories[corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United_States_Virgin_Islands&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U.S. Virgin Is.&amp;#34;&lt;/span&gt;
corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories[corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United_States_of_America&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United States of America&amp;#34;&lt;/span&gt;
corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories[corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United_Republic_of_Tanzania&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty&amp;#34;&lt;/span&gt;

country_names &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME), decreasing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
corona_names &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;countriesAndTerritories)), decreasing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(
  from_countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(country_names&lt;span style=&#34;color:#a6e22e&#34;&gt;[str_detect&lt;/span&gt;(country_names, pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^U&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;]), 
  from_corona &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; corona_names&lt;span style=&#34;color:#a6e22e&#34;&gt;[str_detect&lt;/span&gt;(corona_names, pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^U&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;]
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##             from_countries              from_corona
## 1               Uzbekistan               Uzbekistan
## 2                  Uruguay                  Uruguay
## 3 United States of America           United_Kingdom
## 4           United Kingdom United States of America
## 5     United Arab Emirates     United Arab Emirates
## 6                  Ukraine                  Ukraine
## 7                   Uganda                   Uganda
## 8          U.S. Virgin Is.          U.S. Virgin Is.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 방식으로 일일이 수정해야 한다! 갑자기 머리가 아파온다. 원래 데이터싸이언티스트는 &lt;code&gt;80%의 잡무&lt;/code&gt;와 &lt;code&gt;20%의 우아함&lt;/code&gt;으로 이루어진다고 한다. 이런일을 즐거워 해야 한다. 걱정마시라, 이미 데이터 전처리 된 데이터는 별도로 &lt;code&gt;URL&lt;/code&gt;을 알려줄 것이다.&lt;/p&gt;
&lt;h2 id=&#34;4-corona-데이터-가공하기&#34;&gt;(4) corona 데이터 가공하기&lt;/h2&gt;
&lt;p&gt;여전히 한가지 더 큰 어려움이 있다. &lt;code&gt;241&lt;/code&gt;개의 데이터셋을 맞춰야 한다. 그런데, &lt;code&gt;countries@data&lt;/code&gt;의 행은 &lt;code&gt;241&lt;/code&gt;개이지만, &lt;code&gt;corona&lt;/code&gt;의 행은 &lt;code&gt;206&lt;/code&gt;개이다. 어떻게 맞춰야 할까?&lt;/p&gt;
&lt;p&gt;우선, corona데이터를 넓게 할 필요가 있다. 이유는 국가가 기준이기 때문이다. 즉, 국가가 첫번째 열에 오면 더 좋다.&lt;/p&gt;
&lt;p&gt;이 때, 우리에게 필요한 지식은 &lt;code&gt;tidyr 패키지의 gather &amp;amp; spread&lt;/code&gt; 함수의 사용법이다. 자세한 설명이 필요하면 &lt;a href=&#34;https://tidyr.tidyverse.org/&#34;&gt;tidyr&lt;/a&gt;에서 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyr)

corona &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(dateRep, countriesAndTerritories, cases) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 필요한 열만 추출한다. &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by_at&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cases)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# cases를 제외하고 모두 그룹을 한다는 뜻이다. &lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(row_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ungroup&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 그룹 인덱스를 만든다.&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;spread&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dateRep, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;row_id) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; dataCases &lt;span style=&#34;color:#75715e&#34;&gt;# 인덱스 제거 후 corona2로 저장한다. &lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(dataCases)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 206
## Columns: 107
## $ countriesAndTerritories &amp;lt;chr&amp;gt; &amp;quot;Afghanistan&amp;quot;, &amp;quot;Albania&amp;quot;, &amp;quot;Algeria&amp;quot;, &amp;quot;Andorra…
## $ `2019-12-31`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-01`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-02`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-03`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-04`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-05`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-06`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-07`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-08`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-09`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-10`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-11`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-12`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-13`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-14`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-15`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-16`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-17`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-18`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-19`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-20`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-21`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-22`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-23`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-24`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-25`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-01-26`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 3, 0, 0,…
## $ `2020-01-27`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-28`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-29`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-01-30`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 2, 0, 0,…
## $ `2020-01-31`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-01`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 2, 0, 0,…
## $ `2020-02-02`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 2, 0, 0,…
## $ `2020-02-03`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-04`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-05`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-06`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-07`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-08`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-09`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-10`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-11`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-12`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-13`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-14`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-15`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-16`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-17`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-18`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-19`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-20`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-21`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 2, 0, 0,…
## $ `2020-02-22`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 4, 0, 0,…
## $ `2020-02-23`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-24`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-25`            &amp;lt;dbl&amp;gt; 1, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 0, 0,…
## $ `2020-02-26`            &amp;lt;dbl&amp;gt; 0, NA, 1, NA, NA, NA, NA, NA, 0, NA, 0, 2, 0,…
## $ `2020-02-27`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 1, 0, 0,…
## $ `2020-02-28`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 0, 3, 0,…
## $ `2020-02-29`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 0, NA, 2, 2, 1,…
## $ `2020-03-01`            &amp;lt;dbl&amp;gt; 0, NA, 0, NA, NA, NA, NA, NA, 1, NA, 1, 3, 0,…
## $ `2020-03-02`            &amp;lt;dbl&amp;gt; 0, NA, 2, NA, NA, NA, NA, NA, 0, NA, 3, 4, 2,…
## $ `2020-03-03`            &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, 4, 4, …
## $ `2020-03-04`            &amp;lt;dbl&amp;gt; NA, NA, 2, NA, NA, NA, NA, 1, NA, NA, 8, 6, N…
## $ `2020-03-05`            &amp;lt;dbl&amp;gt; NA, NA, 7, NA, NA, NA, NA, NA, NA, NA, 11, 5,…
## $ `2020-03-06`            &amp;lt;dbl&amp;gt; NA, NA, 5, NA, NA, NA, NA, 1, NA, NA, 7, 12, …
## $ `2020-03-07`            &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, 6, NA, NA, 4, 33,…
## $ `2020-03-08`            &amp;lt;dbl&amp;gt; 3, NA, NA, NA, NA, NA, NA, 1, NA, NA, 11, 25,…
## $ `2020-03-09`            &amp;lt;dbl&amp;gt; NA, 2, 3, NA, NA, NA, NA, 3, NA, NA, 6, 3, NA…
## $ `2020-03-10`            &amp;lt;dbl&amp;gt; NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, 20, 29…
## $ `2020-03-11`            &amp;lt;dbl&amp;gt; 3, 4, NA, NA, NA, NA, NA, 7, NA, NA, 12, 51, …
## $ `2020-03-12`            &amp;lt;dbl&amp;gt; NA, 1, 0, NA, NA, NA, NA, NA, 3, NA, 14, 64, …
## $ `2020-03-13`            &amp;lt;dbl&amp;gt; NA, 12, 4, NA, NA, NA, NA, 12, 2, 2, 30, 115,…
## $ `2020-03-14`            &amp;lt;dbl&amp;gt; NA, 10, 2, 1, NA, NA, NA, 3, 7, NA, 41, 143, …
## $ `2020-03-15`            &amp;lt;dbl&amp;gt; 3, 5, 11, NA, NA, NA, 1, 11, 7, NA, 52, 151, …
## $ `2020-03-16`            &amp;lt;dbl&amp;gt; 6, 4, 11, 3, NA, NA, NA, 11, 10, NA, 49, 205,…
## $ `2020-03-17`            &amp;lt;dbl&amp;gt; 5, 9, 12, 9, NA, NA, NA, 9, 22, NA, 77, 156, …
## $ `2020-03-18`            &amp;lt;dbl&amp;gt; 1, 4, 0, 0, NA, NA, NA, 14, 26, NA, 79, 316, …
## $ `2020-03-19`            &amp;lt;dbl&amp;gt; 0, 4, 13, 39, NA, NA, NA, 18, 37, NA, 111, 31…
## $ `2020-03-20`            &amp;lt;dbl&amp;gt; 0, 11, 9, 22, NA, NA, NA, 31, 7, 2, 144, 550,…
## $ `2020-03-21`            &amp;lt;dbl&amp;gt; 2, 0, 12, 0, NA, NA, 0, 30, 14, NA, 165, 453,…
## $ `2020-03-22`            &amp;lt;dbl&amp;gt; 0, 6, 0, 13, 2, NA, 0, 67, 24, NA, 224, 375, …
## $ `2020-03-23`            &amp;lt;dbl&amp;gt; 10, 13, 8, 25, 0, NA, 0, 41, 30, NA, 611, 607…
## $ `2020-03-24`            &amp;lt;dbl&amp;gt; 6, 11, 87, 20, 0, NA, 0, 35, 4, 8, 114, 855, …
## $ `2020-03-25`            &amp;lt;dbl&amp;gt; 2, 23, 42, 31, 0, NA, 2, 86, 71, 5, 600, 796,…
## $ `2020-03-26`            &amp;lt;dbl&amp;gt; 33, 23, 33, 24, 0, NA, 0, 115, 25, 2, 376, 60…
## $ `2020-03-27`            &amp;lt;dbl&amp;gt; 0, 28, 41, 36, 1, 2, 4, 87, 39, 9, 367, 1141,…
## $ `2020-03-28`            &amp;lt;dbl&amp;gt; 16, 12, 0, 43, 1, 0, 0, 101, 43, 0, 212, 668,…
## $ `2020-03-29`            &amp;lt;dbl&amp;gt; 15, 11, 104, 41, 0, 0, 0, 55, 52, 0, 431, 594…
## $ `2020-03-30`            &amp;lt;dbl&amp;gt; 8, 15, 45, 26, 3, 0, 0, 75, 0, 22, 284, 522, …
## $ `2020-03-31`            &amp;lt;dbl&amp;gt; 27, 11, 57, 36, 0, 0, 0, 146, 58, NA, 464, 80…
## $ `2020-04-01`            &amp;lt;dbl&amp;gt; 25, 20, 73, 6, 0, 0, 0, 0, 50, 5, 150, 564, 2…
## $ `2020-04-02`            &amp;lt;dbl&amp;gt; 26, 16, 263, 14, 1, 0, 0, 167, 39, 0, 269, 52…
## $ `2020-04-03`            &amp;lt;dbl&amp;gt; 43, 18, 0, 38, 0, 1, 2, 0, 92, 5, 248, 418, 4…
## $ `2020-04-04`            &amp;lt;dbl&amp;gt; 0, 27, 139, 11, 0, 0, 6, 132, 73, 2, 324, 396…
## $ `2020-04-05`            &amp;lt;dbl&amp;gt; 35, 29, 314, 27, 2, 0, 0, 186, 34, 2, 139, 24…
## $ `2020-04-06`            &amp;lt;dbl&amp;gt; 29, 28, 20, 35, 4, 0, 0, 103, 52, 0, 57, 217,…
## $ `2020-04-07`            &amp;lt;dbl&amp;gt; 38, 16, 103, 25, 2, 0, 0, 74, 11, 7, 100, 314…
## $ `2020-04-08`            &amp;lt;dbl&amp;gt; 30, 6, 45, 19, 1, 0, 0, 87, 20, 3, 112, 343, …
## $ `2020-04-09`            &amp;lt;dbl&amp;gt; 56, 17, 104, 19, 2, 0, 0, 80, 28, 3, 96, 329,…
## $ `2020-04-10`            &amp;lt;dbl&amp;gt; 61, 9, 94, 19, 0, 0, 4, 99, 40, 5, 100, 279, …
## $ `2020-04-11`            &amp;lt;dbl&amp;gt; 37, 7, 95, 18, 0, 0, 2, 81, 16, 4, 86, 312, 6…
## $ `2020-04-12`            &amp;lt;dbl&amp;gt; 34, 17, 64, 21, 0, 0, 0, 162, 30, 6, 51, 247,…
## $ `2020-04-13`            &amp;lt;dbl&amp;gt; 52, 13, 89, 16, 0, 0, 0, 66, 46, 0, 33, 130, …
## $ `2020-04-14`            &amp;lt;dbl&amp;gt; 58, 21, 69, 8, 0, 0, 2, 69, 26, 0, 44, 106, 5…
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5-241개의-행으로-맞추기&#34;&gt;(5) 241개의 행으로 맞추기&lt;/h2&gt;
&lt;p&gt;이제 Table Join을 활용해야 한다. 이 때 조인키를 확인해야 한다. 그리고 countries 데이터셋에 맞추도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;coronaConfirmed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left_join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(), 
                                   Pop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;()), 
                        dataCases &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countriesAndTerritories)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(countries))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;countries&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## Warning: Column `countries` joining factor and character vector, coercing into
## character vector
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(coronaConfirmed)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 241
## Columns: 108
## $ countries    &amp;lt;chr&amp;gt; &amp;quot;Zimbabwe&amp;quot;, &amp;quot;Zambia&amp;quot;, &amp;quot;Yemen&amp;quot;, &amp;quot;Vietnam&amp;quot;, &amp;quot;Venezuela&amp;quot;, &amp;quot;…
## $ Pop          &amp;lt;dbl&amp;gt; 13805084, 15972000, 28036829, 96160163, 31304016, 1000, …
## $ `2019-12-31` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-01` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-02` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-03` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-04` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-05` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-06` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-07` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-08` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-09` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-10` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-11` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-12` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-13` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-14` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-15` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-16` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-17` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-18` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-19` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-20` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-21` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-22` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-23` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-24` &amp;lt;dbl&amp;gt; NA, NA, NA, 2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-25` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-26` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-27` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-28` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-29` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-30` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-01-31` &amp;lt;dbl&amp;gt; NA, NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-01` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-02` &amp;lt;dbl&amp;gt; NA, NA, NA, 2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-03` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-04` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-05` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-06` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-07` &amp;lt;dbl&amp;gt; NA, NA, NA, 2, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-08` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-09` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-10` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-11` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-12` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-13` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-14` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-15` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-16` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-17` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-18` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-19` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-20` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-21` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-22` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-23` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-24` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-25` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-26` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-27` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-28` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-02-29` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-01` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-02` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-03` &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ `2020-03-04` &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ `2020-03-05` &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ `2020-03-06` &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ `2020-03-07` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-08` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-09` &amp;lt;dbl&amp;gt; NA, NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-10` &amp;lt;dbl&amp;gt; NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-11` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-12` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-13` &amp;lt;dbl&amp;gt; NA, NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-14` &amp;lt;dbl&amp;gt; NA, NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
## $ `2020-03-15` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, 10, NA, NA, NA, 6, NA, NA, NA, NA, NA, NA…
## $ `2020-03-16` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, 5, NA, NA, 6, 2, NA, NA, NA, NA, NA, NA, …
## $ `2020-03-17` &amp;lt;dbl&amp;gt; NA, NA, NA, 4, 18, NA, NA, 2, 21, NA, NA, NA, NA, NA, NA…
## $ `2020-03-18` &amp;lt;dbl&amp;gt; NA, NA, NA, 0, 0, NA, NA, 8, 21, NA, NA, NA, NA, NA, NA,…
## $ `2020-03-19` &amp;lt;dbl&amp;gt; NA, 2, NA, 15, 0, NA, NA, 7, 29, NA, NA, NA, NA, 3, NA, …
## $ `2020-03-20` &amp;lt;dbl&amp;gt; NA, 0, NA, 9, 0, NA, NA, 0, 15, NA, NA, NA, NA, 9, NA, N…
## $ `2020-03-21` &amp;lt;dbl&amp;gt; 1, 0, NA, 2, 3, NA, NA, 10, 16, NA, NA, NA, NA, 2, NA, N…
## $ `2020-03-22` &amp;lt;dbl&amp;gt; 1, 0, NA, 7, 0, NA, NA, 0, 25, NA, NA, NA, NA, 1, NA, NA…
## $ `2020-03-23` &amp;lt;dbl&amp;gt; 0, 1, NA, 24, 0, NA, NA, 13, 23, NA, NA, NA, NA, 12, NA,…
## $ `2020-03-24` &amp;lt;dbl&amp;gt; 0, 0, NA, 5, 48, NA, NA, 3, 4, NA, NA, NA, 17, 2, NA, NA…
## $ `2020-03-25` &amp;lt;dbl&amp;gt; 0, 0, NA, 11, 7, NA, NA, 6, 27, NA, NA, NA, 0, 3, NA, NA…
## $ `2020-03-26` &amp;lt;dbl&amp;gt; 1, 9, NA, 14, 15, NA, NA, 10, 28, NA, NA, NA, 0, 5, NA, …
## $ `2020-03-27` &amp;lt;dbl&amp;gt; 0, 2, NA, 5, 1, NA, NA, 18, 21, NA, NA, NA, 0, 12, NA, N…
## $ `2020-03-28` &amp;lt;dbl&amp;gt; 2, 2, NA, 16, 12, NA, NA, 21, 0, NA, NA, NA, 2, 2, NA, N…
## $ `2020-03-29` &amp;lt;dbl&amp;gt; 2, 12, NA, 54, 0, NA, NA, 29, 66, NA, NA, NA, 3, 4, NA, …
## $ `2020-03-30` &amp;lt;dbl&amp;gt; 0, 1, NA, 5, 0, NA, NA, 12, 5, NA, NA, NA, 8, 1, NA, NA,…
## $ `2020-03-31` &amp;lt;dbl&amp;gt; 0, 6, NA, 1, 16, NA, NA, 4, 11, NA, NA, NA, NA, 4, NA, N…
## $ `2020-04-01` &amp;lt;dbl&amp;gt; 1, 0, NA, 0, 0, NA, NA, 24, 18, NA, NA, NA, 0, 9, NA, NA…
## $ `2020-04-02` &amp;lt;dbl&amp;gt; 0, 1, NA, 6, 8, NA, NA, 14, 0, NA, NA, NA, 0, 8, NA, NA,…
## $ `2020-04-03` &amp;lt;dbl&amp;gt; 0, 3, NA, 4, 1, NA, NA, 3, 31, NA, NA, NA, 3, 5, NA, NA,…
## $ `2020-04-04` &amp;lt;dbl&amp;gt; 1, 0, NA, 0, 0, NA, NA, 37, 17, NA, NA, NA, 7, 5, NA, NA…
## $ `2020-04-05` &amp;lt;dbl&amp;gt; 0, 0, NA, 1, 0, NA, NA, 39, 14, NA, NA, NA, 0, 6, NA, NA…
## $ `2020-04-06` &amp;lt;dbl&amp;gt; 0, 0, NA, 1, 4, NA, NA, 76, 6, NA, NA, NA, 2, 17, NA, NA…
## $ `2020-04-07` &amp;lt;dbl&amp;gt; 0, 0, NA, 4, 11, NA, NA, 55, 9, NA, NA, NA, 0, 2, NA, NA…
## $ `2020-04-08` &amp;lt;dbl&amp;gt; 1, 0, NA, 6, 7, NA, NA, 107, 9, NA, NA, NA, 3, 9, NA, NA…
## $ `2020-04-09` &amp;lt;dbl&amp;gt; 1, 0, NA, 0, 1, NA, NA, 51, 32, NA, NA, NA, 0, 4, NA, NA…
## $ `2020-04-10` &amp;lt;dbl&amp;gt; 0, 0, 1, 4, 4, NA, NA, 27, 17, NA, NA, NA, 5, 3, NA, NA,…
## $ `2020-04-11` &amp;lt;dbl&amp;gt; 0, 1, 0, 2, 4, NA, NA, 42, 21, NA, NA, NA, 0, 2, NA, NA,…
## $ `2020-04-12` &amp;lt;dbl&amp;gt; 3, 0, 0, 1, 0, NA, NA, 172, 7, NA, NA, NA, 1, 3, NA, NA,…
## $ `2020-04-13` &amp;lt;dbl&amp;gt; 0, 3, 0, 4, 6, NA, NA, 69, 11, NA, NA, NA, 0, 0, NA, NA,…
## $ `2020-04-14` &amp;lt;dbl&amp;gt; 3, 2, 0, 3, 8, NA, NA, 133, 9, NA, NA, NA, 0, 1, NA, NA,…
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6-na값-처리하기&#34;&gt;(6) NA값 처리하기&lt;/h2&gt;
&lt;p&gt;국가 및 날짜별로 &lt;code&gt;case&lt;/code&gt;가 정리된 것을 확인할 수 있다. 아직 문제는 끝나지 않았다. 왜냐하면 &lt;code&gt;NA&lt;/code&gt;가 있기 때문이다. &lt;code&gt;NA&lt;/code&gt;가 포함된 부분은 모두 0으로 처리하자. 왜냐하면, 우리는 숫자로 표시해야 하기 때문에 &lt;code&gt;NA&lt;/code&gt;의 공백은 있을 수 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)

&lt;span style=&#34;color:#a6e22e&#34;&gt;sapply&lt;/span&gt;(coronaConfirmed[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)],&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(x))) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as_tibble&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colnames&lt;/span&gt;(coronaConfirmed)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)])) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; date, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darkblue&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_06/project_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NA&lt;/code&gt;값 처리에 관한 그래프를 작성한 것이다. 거의 모든 국가에서 발현되기 시작한 3월 이후부터는 &lt;code&gt;NA&lt;/code&gt;가 줄어드는 것을 확인할 수 있다. (아! 시각화 분석이 아니다! 빨리 돌아가서 NA를 처리하자)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;coronaConfirmed&lt;span style=&#34;color:#a6e22e&#34;&gt;[is.na&lt;/span&gt;(coronaConfirmed)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sapply&lt;/span&gt;(coronaConfirmed[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)],&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(x))) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as_tibble&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;colnames&lt;/span&gt;(coronaConfirmed)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)])) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; date, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darkblue&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_06/project_02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;모든 &lt;code&gt;NA&lt;/code&gt;가 0으로 수렴되는 것을 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;7-데이터-저장&#34;&gt;(7) 데이터 저장&lt;/h2&gt;
&lt;p&gt;이렇게 전처리된 데이터를 다시 사용하기 위해, &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt; 등 다양한 형태로 저장을 해본다. 이 부분은 수강생의 자율에 맡기도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-수강생을-위한-과제&#34;&gt;V. 수강생을 위한 과제&lt;/h2&gt;
&lt;p&gt;지금까지 한것은 확진자(casesConfirmed) 데이터를 가지고 전처리를 진행하였다. 그러나, 확진후 사망자 수 데이터도 중요하며, 더 나아가 인구대비 확진자, 사망자 등도 중요한 데이터가 될 수 있다.&lt;/p&gt;
&lt;p&gt;문제는 아직 사망자 수 데이터를 기반으로 작업은 하지 못했다는 점이다. 이 부분은 수강생을 위한 과제로 남겨두겠다.&lt;/p&gt;
&lt;h2 id=&#34;vi-결론&#34;&gt;VI. 결론&lt;/h2&gt;
&lt;p&gt;이번에는 데이터 전처리에 대해 배우는 시간을 가졌다. 이렇게 데이터 전처리는 어렵다. 강사 역시, 글을 쓰면서 하루의 시간을 모두 통으로 보내며 전처리의 과정을 진행했다. 단순히 소스코드를 짜는 것 뿐만 아니라, 하나씩 확인하는 과정, 좀 더 나은 방법들을 고민하면서 소스코드를 짜는데 주력하였다.&lt;/p&gt;
&lt;p&gt;이제 마지막 &lt;code&gt;Chart Automation&lt;/code&gt;만 남았다.&lt;/p&gt;
&lt;p&gt;이글을 읽는 사람들에게 작게나마 도움이 되기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GT 패키지 소개</title>
      <link>https://chloevan.github.io/r/newpkgs/gt_intro/</link>
      <pubDate>Mon, 13 Apr 2020 00:21:01 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/newpkgs/gt_intro/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/newpkgs/gt_intro/gt_hex.svg&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 블로그는 2020-04-08에 소개된 &lt;a href=&#34;https://blog.rstudio.com/2020/04/08/great-looking-tables-gt-0-2/&#34;&gt;Great Looking Tables: gt(v0.2) by Richard Iannone&lt;/a&gt; 글을 번역한 것이다. 함수와 관련된 설명은 가급적 원어를 직접 인용 했으니, 영어로 직접 함수의 사용처를 음미하시길 바란다.&lt;/p&gt;
&lt;h2 id=&#34;i-intro&#34;&gt;I. Intro&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gt&lt;/code&gt;라는 이름은 &lt;code&gt;grammar of tables&lt;/code&gt;즉 &amp;ldquo;테이블의 문법&amp;quot;의 줄임말이며 &lt;code&gt;gt&lt;/code&gt;의 목표는 &lt;code&gt;ggplot2&lt;/code&gt;와 비슷하게 운영하는 것이다. 특정 테이블을 쉽게 만들 수 있을 뿐만 아니라 다양한 문제를 해결하기 위해 서로 다른 방법으로 재결합할 수 있는 기본 구성요소 집합을 기술하는 역할을 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; 사용자가 맞춤형(&lt;code&gt;customized&lt;/code&gt;) 테이블을 &lt;code&gt;R Markdown&lt;/code&gt;에서 만들 필요가 있다면, &lt;code&gt;gt&lt;/code&gt; 패키지가 그 과정에 도움을 줄 것이다. 패키지를 설치해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gt&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;표를 구성하고, 서식과 주석을 적용하며, 원하는 대로 스타일을 만드는 방법은 매우 다양하다. 현재 &lt;code&gt;gt&lt;/code&gt;는 테이블을 &lt;code&gt;HTML&lt;/code&gt; 출력 형식으로 렌더링하고 있으며 이미지 파일로 내보낼 수 있는 기능을 가지고 있다. 조만간 &lt;code&gt;LaTeX&lt;/code&gt;와 &lt;code&gt;RTF&lt;/code&gt; 출력 포맷도 지원할 계획이다.&lt;/p&gt;
&lt;p&gt;gt 패키지의 &lt;a href=&#34;https://gt.rstudio.com/&#34;&gt;Website&lt;/a&gt;에는 시작하기 위한 문서와 테이블 출력이 어떻게 나타나야 하는지를 보여주는 많은 예와 이미지가 있는 &lt;a href=&#34;https://gt.rstudio.com/reference/index.html&#34;&gt;다양한 funciton reference section&lt;/a&gt;이 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-gt-table-structure&#34;&gt;II. gt table structure&lt;/h2&gt;
&lt;p&gt;패키지의 저자가 고려한 것은 테이블의 구조를 파악해서 구조화 작업을 진행해야 하고, 이에 맞는 함수의 언어를 만드는 것이 필요했다. 아래 그림에서 보는 것처럼, 테이블(위에서 아래로 내려가면서)은 크게 &lt;code&gt;Table Header&lt;/code&gt;, &lt;code&gt;Column Lables&lt;/code&gt;, &lt;code&gt;stub and stub head&lt;/code&gt;, &lt;code&gt;table body&lt;/code&gt;, &lt;code&gt;table footer&lt;/code&gt;이 포함된다. 이러한 각 구성 요소에는 하위 구성 요소가 있을 수 있다(예: &lt;code&gt;table header&lt;/code&gt;에는 &lt;code&gt;title&lt;/code&gt; &amp;amp; &lt;code&gt;subtitle&lt;/code&gt;가 들어 있으며 &lt;code&gt;table body&lt;/code&gt;에는 &lt;code&gt;individual cells&lt;/code&gt; 을 포함하고 있다). 아래 그림을 통해서 다시한번 각 구조에 대해 파악하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/newpkgs/gt_intro/gt_parts_of_a_table.svg&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;새로운 문법을 배우는 것은 분명 고통이 수반된다. 그러나 &lt;code&gt;ggplot2&lt;/code&gt;와 같이, 새로운 단어들은 익숙해지는 데 다소 시간이 걸리지만, 우리는 그것들을 배우는 것이 기존의 표를 분석하고 이해하는 능력을 향상시켜 &lt;code&gt;gt&lt;/code&gt;로 성공적으로 재현할 것이라고 믿는다.&lt;/p&gt;
&lt;h2 id=&#34;iii-sample&#34;&gt;III. Sample&lt;/h2&gt;
&lt;h2 id=&#34;1-hello-world&#34;&gt;(1) Hello World&lt;/h2&gt;
&lt;p&gt;어느 문법이나 &lt;code&gt;Hello World&lt;/code&gt;는 존재한다. &lt;code&gt;exibble&lt;/code&gt; 데이터 집합은 &lt;code&gt;gt&lt;/code&gt;에 포함되며, 다양한 데이터를 실험하기 위한 데이터셋을 준비했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(gt)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(exibble)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;8개의 row와 9개의 column으로 구성되어 있고, 숫자, 문자, 범주형, 날짜까지, 모든 종류의 데이터가 종류해도 무방하다. 기존의 데이터셋을 &lt;code&gt;gt()&lt;/code&gt;로 바꿔주는 것이 중요하다. &lt;code&gt;ggplot()&lt;/code&gt;에 데이터셋을 입력하는 형태를 기억해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
data &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 문법을 기억하면 좋을 것 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사실 별거 아니지만, 조금 깔끔한 형태의 테이블이 출력되었다. &lt;code&gt;ggplot()&lt;/code&gt; 함수가 ggplot2 그래프를 그리는 첫번째 &lt;code&gt;starting point&lt;/code&gt;것처럼 &lt;code&gt;gt()&lt;/code&gt; 함수는 &lt;code&gt;gt&lt;/code&gt; 테이블을 만들기 위한 첫 번째 함수의 역할을 수행한다.&lt;/p&gt;
&lt;h2 id=&#34;2-formatting-data-in-columns&#34;&gt;(2) Formatting data in columns&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;exibble&lt;/code&gt; 데이터셋에는 다양한 열 유형이 포함되어 있음을 기억하고 있다. 이것은 입력 데이터 값을 포맷하는 &lt;code&gt;gt&lt;/code&gt;의 &lt;code&gt;fmt_*()&lt;/code&gt; 함수를 활용하여 정리를 해보자. 가급적 원어를 그대로 정리하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have num display numbers with exactly 2 decimal places using fmt_number()&lt;/li&gt;
&lt;li&gt;show nicely formatted dates in date using date_style 6 (the m_day_year style) with fmt_date()&lt;/li&gt;
&lt;li&gt;format the 24-h time values in time to time_style 4 (the hm_p style) with fmt_time()&lt;/li&gt;
&lt;li&gt;make the datetimes in datetime formatted as such with the fmt_datetime() function&lt;/li&gt;
&lt;li&gt;transform the currency column with fmt_currency() to show us values in the euro currency (currency = &amp;ldquo;KRW&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_number&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(num), decimals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_date&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(date), date_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_time&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(time), time_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_datetime&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(datetime), date_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, time_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_currency&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(currency), currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KRW&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;번역시, 추가 내용, 위 함수에서 한국 사람들이 궁금해 할, &lt;code&gt;KRW&lt;/code&gt;가 있는지 확인해봤다. 다행히 존재하였다. 확인하는 방법은 &lt;code&gt; info_currencies(begins_with = &amp;quot;k&amp;quot;)&lt;/code&gt;를 입력하면 &lt;code&gt;k&lt;/code&gt;를 가지고 있는 다양한 나라의 화폐단위를 확인할 수 있고, 해당 문자열 코드를 &lt;code&gt;KRW&lt;/code&gt; 대신 입력하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info_currencies&lt;/span&gt;(begins_with &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사용자들이 기대했던 것처럼, 전체 Column에는 매우 구체적인 방법으로 서식이 적용되었다. 좀 더 디테일한 수정도 가능하다. 특정 열에 있는 행의 하위 선택 유형을 지정할 수 있으며, 대상 행을 지정하는 방법(예: 행 색인, 스텁의 행 이름, 열 데이터에 기초한 조건문 등)이 상당히 많다.&lt;/p&gt;
&lt;p&gt;조금 더 테이블을 입맛에 맞게 수정하고 싶다면, 더 많은 &lt;code&gt;fmt_*()&lt;/code&gt; 함수가 있다. 물론, 이러한 함수들이 사용자나 또는 클라이언트의 요구에 정확히 부합하지 않는다면 사용자는 일반적인 &lt;code&gt;fmt()&lt;/code&gt; 함수를 사용하고 특정 부분에는 사용자 정의 함수 또는 응용해서 가공할 수도 있다.&lt;/p&gt;
&lt;h2 id=&#34;3-a-table-with-a-header-and-a-footer&#34;&gt;(3) A table with a header and a footer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;테이블&lt;/code&gt;에 몇몇 구성품을 추가할 수 있다. &lt;code&gt;제목(title)&lt;/code&gt;과 &lt;code&gt;부제(subtitle)&lt;/code&gt;가 있는 &lt;code&gt;머리글(header)&lt;/code&gt;과 &lt;code&gt;소스 노트(source_note)&lt;/code&gt;가 있는 &lt;code&gt;바닥글(footer)&lt;/code&gt;을 포함 할 수 있다. 이 때에는 &lt;code&gt;tab_header()&lt;/code&gt; 및 &lt;code&gt;tab_source_note()&lt;/code&gt; 함수가 사용될 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_header&lt;/span&gt;(
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**gt** 패키지 내부에 있는 `exibble` 데이터셋  &amp;#34;&lt;/span&gt;),
    subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gt 패키지에는 6개의 데이터셋이 더 존재한다.&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_source_note&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More information is available at `?exibble`.&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기존 테이블에 parts 부분들이 들어간다면 &lt;code&gt;tab_*()&lt;/code&gt; 함수가 사용되어질 것이다. 또한 &lt;code&gt;Markdown&lt;/code&gt; 형태의 함수(&lt;code&gt;md()&lt;/code&gt;)가 사용되는 이유는 &lt;code&gt;markdown style&lt;/code&gt;을 테이블에 적용하기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;4-adding-a-stub-and-organizing-rows-into-row-groups&#34;&gt;(4) Adding a stub and organizing rows into row groups&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;exibble&lt;/code&gt; 데이터셋은 행과 &lt;code&gt;group columns&lt;/code&gt;로 이루어진 것을 알 수 있습니다. 이 때, &lt;code&gt;gt(rowname_col = &amp;quot;row&amp;quot;, groupname_col = &amp;quot;group&amp;quot;)&lt;/code&gt;을 추가한다. 여기에서 &lt;code&gt;stub&lt;/code&gt;이라는 문법은 조금 생소하기 때문에 아래 그림을 통해서 다시한번 확인하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/newpkgs/gt_intro/gt_hex.svg&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;부가적인 설명보다는 코드를 통해서 어떻게 결과값이 출력되는 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;(rowname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;, groupname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_header&lt;/span&gt;(
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**gt** 패키지 내부에 있는 `exibble` 데이터셋  &amp;#34;&lt;/span&gt;),
    subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gt 패키지에는 6개의 데이터셋이 더 존재한다.&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_source_note&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More information is available at `?exibble`.&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이러한 변화를 통해서 테이블 왼쪽의 영역(&lt;code&gt;stub&lt;/code&gt;)에 행 레이블과 각 행 그룹위에 있는 행 그룹 레이블을 효과적으로 제공하는 것을 볼 수 있다. 만약에 행 그룹의 순서를 다시 정렬하고 싶다면, &lt;code&gt;row_group_order()&lt;/code&gt; 함수를 사용하여 그룹화를 다시 정렬한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;(rowname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;, groupname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_header&lt;/span&gt;(
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**gt** 패키지 내부에 있는 `exibble` 데이터셋  &amp;#34;&lt;/span&gt;),
    subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gt 패키지에는 6개의 데이터셋이 더 존재한다.&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_source_note&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More information is available at `?exibble`.&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;row_group_order&lt;/span&gt;(
    groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grp_b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grp_a&amp;#34;&lt;/span&gt;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-using-spanner-column-labels&#34;&gt;(5) Using spanner column labels&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stub&lt;/code&gt;과 같이, 하나 이상의 열을 포함하는 &lt;code&gt;spanner column&lt;/code&gt; 레이블을 통해 열 그룹화를 만들 수 있다. &lt;code&gt;tab_spanner()&lt;/code&gt; 함수가 이러한 기능을 제공하는데, 라벨과 열 선택을 통해 새 라벨이 해당 열 위에 배치되고 관련 수평 규칙은 가로로 확장된다. 열이 서로 인접하지 않는다면 &lt;code&gt;tab_spanner()&lt;/code&gt;가 자동으로 함께 모이게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;exibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;(rowname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;, groupname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_spanner&lt;/span&gt;(label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;날짜와 시간 Tab&amp;#34;&lt;/span&gt;, columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matches&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date|time&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_header&lt;/span&gt;(
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**gt** 패키지 내부에 있는 `exibble` 데이터셋  &amp;#34;&lt;/span&gt;),
    subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gt 패키지에는 6개의 데이터셋이 더 존재한다.&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_source_note&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More information is available at `?exibble`.&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;row_group_order&lt;/span&gt;(
    groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grp_b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grp_a&amp;#34;&lt;/span&gt;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;tab_spanner(label = &amp;quot;날짜와 시간 Tab&amp;quot;, columns = matches(&amp;quot;date|time&amp;quot;))&lt;/code&gt; 소스코드를 추가하면 되는데, &lt;code&gt;matches(&amp;quot;date|time&amp;quot;)&lt;/code&gt; 문법은 &lt;code&gt;dplyr 패키지&lt;/code&gt;내의 함수로 &lt;code&gt;date&lt;/code&gt; 또는 &lt;code&gt;time&lt;/code&gt; 열을 가져오라는 뜻이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-much-more&#34;&gt;IV. Much More&lt;/h2&gt;
&lt;h2 id=&#34;1-gt-test-drive&#34;&gt;(1) gt Test Drive&lt;/h2&gt;
&lt;p&gt;짧게 소개하는 글이기 때문에, 이것으로 사용자의 만족을 기대할 수는 없다. &lt;code&gt;RStudio Cloud&lt;/code&gt; 사용자라면 &lt;code&gt;gt Test Drive&lt;/code&gt;에 있는 소스코드를 활용하는 것도 좋다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/project/779965&#34;&gt;gt Test Drive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/newpkgs/gt_intro/gt_test_drive.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-gt-dataset&#34;&gt;(2) gt Dataset&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gt&lt;/code&gt; 패키지 연습에 제공되는, 6개의 &lt;a href=&#34;https://gt.rstudio.com/articles/gt-datasets.html&#34;&gt;데이터셋&lt;/a&gt;을 패키지에 포함시켰다: &lt;code&gt;countrypps&lt;/code&gt;, &lt;code&gt;sza&lt;/code&gt;, &lt;code&gt;gtcars&lt;/code&gt;, &lt;code&gt;sp500&lt;/code&gt;, &lt;code&gt;pizzaplace&lt;/code&gt; , &lt;code&gt;exibble&lt;/code&gt;을 기념으로 로고를 만들었다 (굳이 이런걸..).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/newpkgs/gt_intro/gt_datasets_labeled.svg&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-색상-이미지-입히기-소스코드-별도&#34;&gt;(3) 색상, 이미지 입히기 (소스코드 별도)&lt;/h2&gt;
&lt;p&gt;각주 삽입, 텍스트, 테두리 및 채우기 수정, 요약 행 추가와 같은 훨씬 더 유용한 작업을 수행할 수 있다. 본 블로그에서는 제공되지 않고, 대신 관련 코드를 제공한다. (&lt;a href=&#34;https://gist.github.com/rich-iannone/1da1ae7a7203958a0c5b1bd1d4b24017&#34;&gt;available in this gist&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;그러나, 번역시 가져왔다. 다행히 에러없이 잘 수행된다!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(paletteer)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(gt)

pizzaplace &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;case_when&lt;/span&gt;(
    type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chicken&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chicken (pizzas with chicken as a major ingredient)&amp;#34;&lt;/span&gt;,
    type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classic&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classic (classical pizzas)&amp;#34;&lt;/span&gt;,
    type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;supreme&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;supreme (pizzas that try a little harder)&amp;#34;&lt;/span&gt;,
    type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;veggie&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;veggie (pizzas without any meats whatsoever)&amp;#34;&lt;/span&gt;,
  )) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(size, levels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXL&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(type, size) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summarize&lt;/span&gt;(
    sold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(),
    income &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(price)
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;(rowname_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_header&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#127829; Pizzas Sold in 2015 &amp;amp;#127829;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_number&lt;/span&gt;(
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(sold),
    decimals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    use_seps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt_currency&lt;/span&gt;(
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(income),
    currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USD&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cols_align&lt;/span&gt;(align &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;, columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;data_color&lt;/span&gt;(
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(sold, income),
    colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scales&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;col_numeric&lt;/span&gt;(
      palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paletteer&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;paletteer_d&lt;/span&gt;(
        palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ggsci::red_material&amp;#34;&lt;/span&gt;
      ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(),
      domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
    ),
    alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summary_rows&lt;/span&gt;(
    groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;,
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(sold),
    fns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(TOTAL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;),
    formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt_number,
    decimals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    use_seps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summary_rows&lt;/span&gt;(
    groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;,
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(income),
    fns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(TOTAL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;),
    formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt_currency,
    currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USD&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;grand_summary_rows&lt;/span&gt;(
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(sold),
    fns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(`GRAND TOTAL` &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;),
    formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt_number,
    decimals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    use_seps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;grand_summary_rows&lt;/span&gt;(
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(income),
    fns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(`GRAND TOTAL` &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;),
    formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt_currency,
    currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USD&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_footnote&lt;/span&gt;(
    footnote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The pizza category with the highest total sales.&amp;#34;&lt;/span&gt;,
    locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cells_row_groups&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classic (classical pizzas)&amp;#34;&lt;/span&gt;)
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_footnote&lt;/span&gt;(
    footnote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom sizes for **The Greek** pizza.&amp;#34;&lt;/span&gt;),
    locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cells_stub&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXL&amp;#34;&lt;/span&gt;))
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_footnote&lt;/span&gt;(
    footnote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a new record. Truly, 2015 was a **great** year for the `pizzaplace`.&amp;#34;&lt;/span&gt;),
    locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cells_grand_summary&lt;/span&gt;(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt;(sold))
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tab_options&lt;/span&gt;(
    summary_row.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ACEACE80&amp;#34;&lt;/span&gt;,
    grand_summary_row.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#990000&amp;#34;&lt;/span&gt;,
    row_group.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFEFDB80&amp;#34;&lt;/span&gt;,
    heading.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#EFFBFC&amp;#34;&lt;/span&gt;,
    column_labels.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#EFFBFC&amp;#34;&lt;/span&gt;,
    stub.background.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#EFFBFC&amp;#34;&lt;/span&gt;,
    table.font.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#323232&amp;#34;&lt;/span&gt;,
    table_body.hlines.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    table_body.border.top.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    heading.border.bottom.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    row_group.border.top.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    row_group.border.bottom.style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,
    stub.border.style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashed&amp;#34;&lt;/span&gt;,
    stub.border.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    stub.border.width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1px&amp;#34;&lt;/span&gt;,
    summary_row.border.color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#989898&amp;#34;&lt;/span&gt;,
    table.width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60%&amp;#34;&lt;/span&gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;opt_all_caps&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;결론-번역-시-느낀점&#34;&gt;결론: 번역 시, 느낀점.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;grammar of tables&lt;/code&gt; 이 한 단어로 향후 R Studio에서 &lt;code&gt;테이블&lt;/code&gt; 다루는 문법이 어떤 형태로 발전하는지 보여주는 좋은 예가 될 것 같다. 기존에는 굉장히 많은 종류의 테이블 관련 패키지가 존재하였지만, 문법적으로 일치가 되지는 않았다. &lt;code&gt;ggplot2&lt;/code&gt;에서 발전한 다양한 &lt;code&gt;extension&lt;/code&gt; 패키지가 있는 것을 고려하면, &lt;code&gt;table&lt;/code&gt; 역시 그러한 형태로 발전할 것은 분명해 보인다.&lt;/p&gt;
&lt;h2 id=&#34;더-보기&#34;&gt;더 보기&lt;/h2&gt;
&lt;p&gt;현재 &lt;code&gt;gt&lt;/code&gt; 패키지에 &lt;code&gt;Latex&lt;/code&gt; 지원이 되지 않는다. 따라서, 현재 모든 output은 html 코드로 출력되는 관련 파일 링크를 당분간 이 섹션에서 공유를 할 예정이니, 한번 더 아래 링크에서 확인하기를 바란다.&lt;/p&gt;
&lt;p&gt;내용은 똑같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/newpkgs/gt_intro_sc.html&#34;&gt;GT 패키지 소개&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 5 - Chart with DateInput</title>
      <link>https://chloevan.github.io/r/shiny/project_05/</link>
      <pubDate>Sat, 11 Apr 2020 10:15:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_05/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;Corona Shiny Project 3 - Visusalization (Bubble Chart)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_04/&#34;&gt;Corona Shiny Project 4 - Visusalization (Map Chart)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-date-control&#34;&gt;III. Date Control&lt;/h2&gt;
&lt;p&gt;이제 프로젝트의 마지막에 와 있다. 오늘의 내용은 간단하게 표현하면 날짜에 따라 그래프가 달라져야 하는 것을 어떻게 기능적으로 구현할 것인가에 대한 과제가 들어있다.&lt;/p&gt;
&lt;p&gt;또한, 늘 그래왔던 것처럼, Sample로 구현을 먼저 한 후에 응용을 하면 된다. 당연히 처음에는 어렵다. 그러나, 1-2번 반복해서 하다보면, 자연스럽게 익히게 되니, 크게 염려하지 않기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;1-dateinput-핸들링&#34;&gt;(1) DateInput 핸들링&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;project_03&lt;/a&gt;에서 확인해야 하는 내용의 소스코드를 그대로 사용해야 하니, &lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;project_03&lt;/a&gt; 내용이 숙지가 되지 않았으면 다시 공부할 것을 권한다. 강사는 글의 편의성을 위해, 나눠서 작성을 했다. 우선 &lt;code&gt;Global Bubble Chart&lt;/code&gt;부터 다룬다. 각 코드에 대한 자세한 설명은 여기에서는 생략한다.&lt;/p&gt;
&lt;h3 id=&#34;a-global-chunk-code&#34;&gt;(A) Global Chunk Code&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Global Chunk Code&lt;/code&gt;는 아래와 같이 되어 있을 것이다. 본 포스트에서 필요한 데이터는 &lt;code&gt;corona3&lt;/code&gt; 데이터셋이다. 다시 &lt;code&gt;Review&lt;/code&gt;하는 마음으로 코드를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(plotly)    &lt;span style=&#34;color:#75715e&#34;&gt;# 동적 시각화&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(viridis)   &lt;span style=&#34;color:#75715e&#34;&gt;# 색상 관련 패키지&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)    &lt;span style=&#34;color:#75715e&#34;&gt;# 엑셀파일 데이터 수집&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse) &lt;span style=&#34;color:#75715e&#34;&gt;# 데이터 가공 및 ggplot2 시각&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# get code data&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://pkgstore.datahub.io/JohnSnowLabs/country-and-continent-codes-list/country-and-continent-codes-list-csv_csv/data/b7876b7f496677669644f3d1069d3121/country-and-continent-codes-list-csv_csv.csv&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Country Code 변수명 재정의&lt;/span&gt;
country_code &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(url, stringsAsFactors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(Continent_Name, Three_Letter_Country_Code) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(continent_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Three_Letter_Country_Code)

&lt;span style=&#34;color:#75715e&#34;&gt;# Covid_19 변수명 재정의&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dateRep, 
         country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countriesAndTerritories, 
         continent_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countryterritoryCode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; corona2 

&lt;span style=&#34;color:#75715e&#34;&gt;# continent_code 변수 기준으로 데이터 통합&lt;/span&gt;
corona3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left_join&lt;/span&gt;(corona2, country_code)

&lt;span style=&#34;color:#75715e&#34;&gt;# 결과 확인&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(corona3)  

Rows&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;339&lt;/span&gt;
Columns&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; date           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; day            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; month          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; year           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cases          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; deaths         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; country        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afgh…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ geoId          &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;A…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; continent_code &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ popData2018    &amp;lt;dbl&amp;gt; 37172386, 37172386, 37172386, 37172386, 37172386, …
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ Continent_Name &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;A…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b-slide-bar-chunk-code&#34;&gt;(B) Slide Bar Chunk Code&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;corona3&lt;/code&gt; 데이터셋을 확보했다면, 이제는 &lt;code&gt;Slide Bar&lt;/code&gt;를 만들어본다. &lt;code&gt;dateInput&lt;/code&gt; 코드를 입력한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Inputs {.sidebar data-width=300}
-----------------------------------------------------------------------
원하는 날짜에 놓고 &lt;span style=&#34;color:#e6db74&#34;&gt;`Button`&lt;/span&gt;을 누르세요. 

&lt;span style=&#34;color:#e6db74&#34;&gt;```r
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Step 1. Click Global Bubble Chart&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;h4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Step 2. Change Date&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;dateInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bubbleDate&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date:&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-01&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;h4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check if bubble is moving by date&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c-flexdashboard-code&#34;&gt;(C) flexdashboard Code&lt;/h3&gt;
&lt;p&gt;마지막으로 &lt;code&gt;Global Bubble Chart&lt;/code&gt; 탭에서 그래프가 출력되는지 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create data Reactive&lt;/span&gt;
corona_bubble_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
  corona3 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(cty_code)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(day, month, year, geoId)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Reorder countries to having big bubbles on top&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(cum_cases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(cases), 
         cum_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(deaths)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# prepare text for tooltip&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, country, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday cases: &amp;#34;&lt;/span&gt;, cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday_deaths: &amp;#34;&lt;/span&gt;, deaths, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_cases: &amp;#34;&lt;/span&gt;, cum_cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_deaths: &amp;#34;&lt;/span&gt;, cum_deaths, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;distinct&lt;/span&gt;(date, cases, deaths, country, .keep_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlotly&lt;/span&gt;({
  &lt;span style=&#34;color:#75715e&#34;&gt;# Classic ggplot&lt;/span&gt;
  p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;corona_bubble_df&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;deaths, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; popData2018, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Continent_Name, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;text)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_size&lt;/span&gt;(range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_viridis&lt;/span&gt;(discrete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, guide&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplotly&lt;/span&gt;(p, tooltip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 소스코드를 새로운 &lt;code&gt;flexdashboard template&lt;/code&gt; 정상적으로 실행했다면 아래와 같이 나타나면 정상이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_05/project_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;d-날짜-입력값-자동화-코드&#34;&gt;(D) 날짜 입력값 자동화 코드&lt;/h3&gt;
&lt;p&gt;문제는 날짜를 바꿔도 그래프는 달라지지 않는다. 왜 그럴까? &lt;code&gt;reactive dataset&lt;/code&gt; 코드를 따라 작성했다면, &lt;code&gt;filter(date == 2020-04-05)&lt;/code&gt; 이와 같이 입력한 것을 확인할 수 있을 것이다. 즉, &lt;code&gt;2020-04-05&lt;/code&gt; 이 부분을 입력값으로 대체를 해야 한다. 아래와 같이 수정한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter(date == &amp;quot;2020-04-05&amp;quot;, !is.na(cty_code)&lt;/code&gt;를 &lt;code&gt;filter(date &amp;lt;= as.Date(as.character(input$bubbleDate)), !is.na(cty_code))&lt;/code&gt; 수정한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter(date == &amp;quot;2020-04-05&amp;quot;)&lt;/code&gt;를 &lt;code&gt;filter(date == as.Date(as.character(input$bubbleDate))&lt;/code&gt;로 수정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create data Reactive&lt;/span&gt;
corona_bubble_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
  corona3 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bubbleDate)), &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(cty_code)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(day, month, year, geoId)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Reorder countries to having big bubbles on top&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(cum_cases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(cases), 
         cum_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(deaths)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# prepare text for tooltip&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, country, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday cases: &amp;#34;&lt;/span&gt;, cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday_deaths: &amp;#34;&lt;/span&gt;, deaths, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_cases: &amp;#34;&lt;/span&gt;, cum_cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_deaths: &amp;#34;&lt;/span&gt;, cum_deaths, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bubbleDate))) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;distinct&lt;/span&gt;(date, cases, deaths, country, .keep_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;날짜를 입력받는데, &lt;code&gt;as.character()&lt;/code&gt;가 나온 것에 대해 의구심이 생길 수 있는데, 이 부분을 다루려면 R의 Shiny의 &lt;code&gt;Date Input&lt;/code&gt; 및 R 프로그래밍에서의 &lt;code&gt;Date Type에&lt;/code&gt;값을 처리하는 것에 대한 부가적인 설명이 필요해서 일단 여기에서는 설명하지 않는다. (강사가 이 문제를 푸는데 약 30-40분 시간을 허비했다!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input$bubbleDate&lt;/code&gt;는 뭘까? &lt;code&gt;shiny&lt;/code&gt;의 &lt;code&gt;input &amp;amp; output&lt;/code&gt; 개념에 대한 이해도가 필요하며, 이 기본적인 개념은 &lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;에서 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러면 이제 다른 날짜를 클릭하면, 그래프가 달라지는 것을 확인할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_05/project_02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;정상적으로 바뀐 것을 확인을 하였다면, 수정 후 다시 재 배포하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;p&gt;간단하게 소스코드 1-2줄 수정으로 의미있는 시각화가 구현되었다. 이제 본 프로젝트의 마지막이다. 다음 튜토리얼에서는 날짜의 범위(Range)를 이용하여 자동으로 그래프가 변화되는 것을 만들어본다.&lt;/p&gt;
&lt;p&gt;이글을 읽는 사람들에게 작게나마 도움이 되기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Shiny Tutorial. Lession 4 Display reactive output. from &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson4/&#34;&gt;https://shiny.rstudio.com/tutorial/written-tutorial/lesson4/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 4 - Visusalization (Map Chart)</title>
      <link>https://chloevan.github.io/r/shiny/project_04/</link>
      <pubDate>Thu, 09 Apr 2020 10:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_04/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_03/&#34;&gt;Corona Shiny Project 3 - Visusalization (Bubble Chart)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-leaflet-소개&#34;&gt;III. Leaflet 소개&lt;/h2&gt;
&lt;p&gt;leaflet 패키지에 관한 간단한 소개에 강사가 작성한 글이 있다. 구체적인 내용은 여기에서 참고하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/graph01_leaflet/&#34;&gt;Leaflet for R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-지도-시각화-작업에-앞서서-고려할-내용&#34;&gt;VI. 지도 시각화 작업에 앞서서 고려할 내용&lt;/h2&gt;
&lt;h2 id=&#34;1-지도-데이터-수집하기&#34;&gt;(1) 지도 데이터 수집하기&lt;/h2&gt;
&lt;p&gt;지도 시각화를 작업하려면, 필수적으로 위도와 경도가 담긴 데이터를 확보해야 한다. 이번 프로젝트에서 관건이 되는 건 국가별 위도 경도 데이터를 확보하는 소스코드를 작업해야 한다.&lt;/p&gt;
&lt;p&gt;원소스부터 수집하는 방법 등 다양한 방법이 있지만, 강사는 아래와 같이 진행했다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;a href=&#34;https://www.naturalearthdata.com/downloads/50m-cultural-vectors/50m-admin-0-countries-2/&#34;&gt;Natural Earth Data&lt;/a&gt;에서 &lt;code&gt;Download Countries&lt;/code&gt;데이터 파일을 다운로드 받은 후 적정 경로에서 데이터를 로드 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;폴더 트리 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.
├── ne_50m_admin_0_countries.README.html
├── ne_50m_admin_0_countries.VERSION.txt
├── ne_50m_admin_0_countries.cpg
├── ne_50m_admin_0_countries.dbf
├── ne_50m_admin_0_countries.prj
├── ne_50m_admin_0_countries.shp
└── ne_50m_admin_0_countries.shx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각각의 확장명이 있는데, 각각의 확장명을 이해하려면 또다른 공부를 해야 한다. (현재 시점에서 강사는 관심이 크게 없다!)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;countries&lt;/code&gt; 코드는 그대로 실행해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_04/project_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(rgdal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Loading required package: sp
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## rgdal: version: 1.4-8, (SVN revision 845)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 2.4.2, released 2019/06/28
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/gdal
##  GDAL binary built with GEOS: FALSE 
##  Loaded PROJ.4 runtime: Rel. 5.2.0, September 15th, 2018, [PJ_VERSION: 520]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.6/Resources/library/rgdal/proj
##  Linking to sp version: 1.3-2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;countries &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readOGR&lt;/span&gt;(dsn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop/ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,use_iconv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T,
                     verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(countries)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;SpatialPolygonsDataFrame&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;countries의 class는 &lt;code&gt;sp&lt;/code&gt;로 일반적인 &lt;code&gt;data.frame&lt;/code&gt; 형태가 아닌 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-countries-data-시각화&#34;&gt;(2) Countries data 시각화&lt;/h2&gt;
&lt;p&gt;일단, 뭔지는 몰라도 실제 시각화 되는지 확인해보자. 이 때에는 &lt;code&gt;leaflet package&lt;/code&gt;를 활용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(leaflet)
&lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countries) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, zoom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_04/project_02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;오! 신기하게 되었다. 이 소스코드가 실제로 R Markdown에서도 적용되는지 확인해본다. 그러려면, &lt;code&gt;countries&lt;/code&gt; 데이터를 저장한 후, &lt;code&gt;R Markdown&lt;/code&gt;코드에서 불러오는 걸 수행해야 한다. 어떻게 수행하면 좋을까? &lt;code&gt;MySQL&lt;/code&gt;과 같은 &lt;code&gt;RDB&lt;/code&gt;로는 저장이 당연히 되지 않는다. 그러면, &lt;code&gt;NoSQL&lt;/code&gt;로 데이터를 &lt;code&gt;Input&lt;/code&gt; 하면 된다. 왜 강사가 &lt;code&gt;MongoDB&lt;/code&gt;로 작업하는지 이 때 비로써 &lt;code&gt;아!&lt;/code&gt; 하면 충분하다.&lt;/p&gt;
&lt;h2 id=&#34;3-mongodb에-저장하기&#34;&gt;(3) MongoDB에 저장하기&lt;/h2&gt;
&lt;p&gt;이 데이터를 &lt;code&gt;MongoDB&lt;/code&gt;에 실제로 저장되는지 확인해본다.
이 때 작업해야 하는 것은 &lt;code&gt;sp class&lt;/code&gt;를 &lt;code&gt;MongoDB&lt;/code&gt; 형태인 &lt;code&gt;JSON 형태&lt;/code&gt;로 바꿔져야 하는 작업이 남았는데, 어려운 것은 아니니, 소스 코드를 참고한다.&lt;/p&gt;
&lt;p&gt;다행히 R은 GIS 형태의 sp class를 다룰 수 있도록 도와주는 패키지를 지원하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로 해당 패키지 설치 과정에서는 &lt;code&gt;gdal&lt;/code&gt; 및 &lt;code&gt;sf&lt;/code&gt; 버전 관련 에러가 나올 확률이 크다. 이런 경우, &lt;a href=&#34;https://github.com/r-spatial/sf&#34;&gt;sf 공식문서&lt;/a&gt; 문서를 참조하기를 바란다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Facing similar problem I have followed the steps below:

&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt; On Terminal: gdalinfo --version to check which gdal version do you have. Mine was GDAL 2.2.0, released 2017/04/28 after brew update and brew upgrade

&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; From here: https://github.com/r-spatial/sf, instructions for macOS, as I have already gdal installed, I have used only brew unlink gdal and then brew link --force gdal2

&lt;span style=&#34;color:#66d9ef&#34;&gt;3.&lt;/span&gt; I reinstalled rgdal on R: install.packages(&amp;#34;rgdal&amp;#34;, repos = &amp;#34;http://cran.us.r-project.org&amp;#34;, type = &amp;#34;source&amp;#34;) and I have confirmed it was compiled with configure: GDAL: 2.2.0

&lt;span style=&#34;color:#66d9ef&#34;&gt;4.&lt;/span&gt; Finally, install.packages(&amp;#34;sf&amp;#34;) and it required to be compiled: binary source needs_compilation sf 0.5-3 TRUE
Again, I have confirmed configure: GDAL: 2.2.0 and checking GDAL version &amp;gt;= 2.0.0... yes

After that, I have the new version installed: library(sf) Linking to GEOS 3.6.2, GDAL 2.2.0, proj.4 4.9.3

I hope it could be a solution for you too.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;에러를 잘 다루는 사람이 일의 성과도 높다! 일의 해결법은 대부분 공식문서에 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;sf&amp;quot;, configure.args = &amp;quot;--with-proj-lib=/usr/local/lib/&amp;quot;)
install.packages(&amp;quot;geojsonio&amp;quot;, dependencies = TRUE)
remotes::install_github(&amp;quot;ropensci/geojsonlint&amp;quot;)
library(geojsonio)

# json
county_json &amp;lt;- geojson_json(countries)

&amp;gt; class(county_json)
[1] &amp;quot;geofeaturecollection&amp;quot; &amp;quot;geojson&amp;quot;             
[3] &amp;quot;geo_json&amp;quot;             &amp;quot;json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;geon_json 형태로 데이터가 변환된 것을 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(mongolite)
collection &amp;lt;- &amp;quot;countries&amp;quot; 
db &amp;lt;- &#39;learningspoons&#39;
mongo_id &amp;lt;- Sys.getenv(&amp;quot;MONGO_ID&amp;quot;) # 보안 유지를 위해 가렸다.(실무에서는 이렇게 작업하라고 권유하는 것임!) 
mongo_pw &amp;lt;- Sys.getenv(&amp;quot;MONGO_PW&amp;quot;) # (실무에서는 이렇게 작업하라고 권유하는 것임!)  

mongo_url &amp;lt;- paste0(&#39;mongodb+srv://&#39;, mongo_id, &#39;:&#39;,mongo_pw,&#39;@learningspoons-rhpei.gcp.mongodb.net/&#39;)

conn &amp;lt;- mongo(collection = collection, 
              db = db, 
              url = mongo_url)

conn$insert(county_json)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_04/project_03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;실제로 MongoDB에 잘 들어간 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;4-shapefile-저장-및-불러오기&#34;&gt;(4) ShapeFile 저장 및 불러오기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt;에 저장하는 방법이 싫다면, 매우 간단히, &lt;code&gt;.RData 형태로 저장해도 된다.&lt;/code&gt; 이렇게 다양한 형태로 저장할 수 있음을 확인한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;save(countries, file=&amp;quot;shapeFile.RData&amp;quot;)
load(&amp;quot;shapeFile.RData&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;v-국가별-인구-데이터-지도-시각화-예제&#34;&gt;V. 국가별 인구 데이터 지도 시각화 예제&lt;/h2&gt;
&lt;p&gt;수집된 데이터를 통해서 다양한 시각화를 진행할 수 있다. 지도 시각화 관한 다양한 예제는 &lt;a href=&#34;https://rstudio.github.io/leaflet/shapes.html&#34;&gt;leaflet&lt;/a&gt; 확인한다.&lt;/p&gt;
&lt;p&gt;특히, 주의해야 하는 것은 데이터의 형태가 &lt;code&gt;sp&lt;/code&gt; 형태인지, 아니면 &lt;code&gt;geojson&lt;/code&gt; 형태인지에 따라 조금씩 달라지니, 여기에 주의하면서 관련 공식문서를 읽도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-소스-코드-실행&#34;&gt;(1) 소스 코드 실행&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 패키지 로드&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(rgdal)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(leaflet)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(viridis)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RCurl)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RColorBrewer)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지도 데이터 수집&lt;/span&gt;
countries &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readOGR&lt;/span&gt;(dsn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop/ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ne_50m_admin_0_countries&amp;#34;&lt;/span&gt;,
                     encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,use_iconv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T,
                     verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 인구수 데이터 가공&lt;/span&gt;
countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST&lt;span style=&#34;color:#a6e22e&#34;&gt;[which&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;
countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST)) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 색상, 범례에 사용할 것&lt;/span&gt;
mybins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;)
mypalette &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorBin&lt;/span&gt;(palette&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YlOrBr&amp;#34;&lt;/span&gt;, domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST, na.color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mybins)

&lt;span style=&#34;color:#75715e&#34;&gt;# 국가 클릭 시, 아래 내용으로 출력&lt;/span&gt;
mytext &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;NAME_EN,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Area:  &amp;#34;&lt;/span&gt;, countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;CONTINENT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(countries&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;POP_EST, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
  sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(htmltools&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HTML)

&lt;span style=&#34;color:#75715e&#34;&gt;# 마지막으로 Mapping&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(countries) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;()  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;( lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, lng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; , zoom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addPolygons&lt;/span&gt;( 
    fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mypalette&lt;/span&gt;(POP_EST), 
    weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;,
    dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,
    fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
    highlight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlightOptions&lt;/span&gt;(
      weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#666&amp;#34;&lt;/span&gt;,
      dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
      bringToFront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;),
    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mytext,
    labelOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelOptions&lt;/span&gt;(
      style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-weight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;, padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2px 7px&amp;#34;&lt;/span&gt;),
      textsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13px&amp;#34;&lt;/span&gt;,
      direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
    )
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addLegend&lt;/span&gt;(pal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mypalette, values&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;POP_EST, opacity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottomleft&amp;#34;&lt;/span&gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_04/project_04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-소스-코드-설명&#34;&gt;(2) 소스 코드 설명&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인구수 데이터 가공: 0인 데이터는 NA로 처리한 뒤, 인구수가 인구수는 단위가 크기때문에, 백만명 단위로 처리했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;색상, 범례에 사용할 것: 국가별 인구수에 색상의 차별화를 하려면 &lt;code&gt;mybins &amp;lt;- c(0,10,20,50,100,500,Inf)&lt;/code&gt;에 따라 차별화를 두었다. 만약 기준이 다르다면, 다른 기준점을 적용하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leaflet Mapping: &lt;code&gt;Leaflet + Choropleths&lt;/code&gt; 검색을 하면 다양한 예제가 나오니 거기에서 응용하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/leaflet/choropleths.html&#34;&gt;Choropleths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-apply-to-r-markdown&#34;&gt;VI. Apply To R Markdown.&lt;/h2&gt;
&lt;p&gt;이제 위 데이터를 활용해서 실제로 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지에 적용되는지 확인해보자. 다행히 leaflet과 R Markdown은 연동이 매우 잘되서, Editor에서 작업한 소스 코드를 그대로 응용해도 무방하다. 단, &lt;code&gt;reactive 데이터 셋&lt;/code&gt;은 당연히 &lt;code&gt;renderLeaflet()&lt;/code&gt;을 활용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Row
-----------------------------------------------------------------------

&lt;span style=&#34;color:#75715e&#34;&gt;### World Population
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;```r
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Final Map&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(countries) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;()  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setView&lt;/span&gt;( lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, lng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; , zoom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addPolygons&lt;/span&gt;( 
    fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mypalette&lt;/span&gt;(POP_EST), 
    weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;,
    dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,
    fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
    highlight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlightOptions&lt;/span&gt;(
      weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#666&amp;#34;&lt;/span&gt;,
      dashArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
      fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
      bringToFront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;),
    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mytext,
    labelOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelOptions&lt;/span&gt;(
      style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-weight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;, padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2px 7px&amp;#34;&lt;/span&gt;),
      textsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13px&amp;#34;&lt;/span&gt;,
      direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
    )
  ) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  leaflet&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addLegend&lt;/span&gt;(pal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mypalette, values&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;POP_EST, opacity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottomleft&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_04/project_05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;vii-결론&#34;&gt;VII. 결론&lt;/h2&gt;
&lt;p&gt;이번 포스트에서는, &lt;code&gt;leaflet&lt;/code&gt; 패키지를 활용한 지도 시각화 실전에 준하는 과정을 만들었다. 지도 데이터를 다루는 것은 사실 쉬운 것은 아니다. 강사가 GIS 개념을 다루는 데 참조했던 원문 링크를 보고 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;이글을 읽는 사람들에게 작게나마 도움이 되기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;viii-reference&#34;&gt;VIII. Reference&lt;/h2&gt;
&lt;p&gt;Moraga, P. (n.d.). Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny. from &lt;a href=&#34;http://www.paulamoraga.com/book-geospatial/index.html&#34;&gt;http://www.paulamoraga.com/book-geospatial/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 3 - Visusalization (Bubble Chart)</title>
      <link>https://chloevan.github.io/r/shiny/project_03/</link>
      <pubDate>Wed, 08 Apr 2020 10:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_03/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;현재 진행중인 프로젝트가 궁금하다면 아래를 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project 1 - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_02/&#34;&gt;Corona Shiny Project 2 - Visusalization (Time Series)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-bubble-chart&#34;&gt;III. Bubble Chart&lt;/h2&gt;
&lt;p&gt;뉴스 기사를 접하면, 버블차트가 그려진 기사를 접하게 될 것이다. 아래 이미지가 말하는 것은 매우 선명하다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_03/project_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이러한 버블차트가 산점도와 만나면 훨씬 더 분명하게 메시지를 던질 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_03/project_02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;소득과 건강과 관련된 그래프를 인구수에 비례하여 어느정도 상관이 있는지를 보여준다. &lt;code&gt;Bubble Chart&lt;/code&gt;는 이렇게 기존의 2차원의 산점도에서 3차원까지 확장해서 보여준다는 큰 의미가 있다.&lt;/p&gt;
&lt;p&gt;이 그래프를 우선적으로 작성한 뒤, &lt;code&gt;Shiny App&lt;/code&gt;에 배포하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-그래프-작성의-목적&#34;&gt;(1) 그래프 작성의 목적&lt;/h2&gt;
&lt;p&gt;우선 확진자(&lt;code&gt;cases&lt;/code&gt;)와 사망자(&lt;code&gt;deaths&lt;/code&gt;)의 상관관계를 그리되, 인구수를 Bubble로 치환할 것이다. &lt;code&gt;Sample&lt;/code&gt;로 &lt;code&gt;2020-04-05&lt;/code&gt; 기준으로 우선 처리해서 시각화로 만들어 보자.&lt;/p&gt;
&lt;h2 id=&#34;iv-practice-in-r-editor&#34;&gt;IV. Practice in R Editor&lt;/h2&gt;
&lt;h2 id=&#34;1-패키지-로드&#34;&gt;(1) 패키지 로드&lt;/h2&gt;
&lt;p&gt;시각화에 필요한 패키지는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(plotly)    &lt;span style=&#34;color:#75715e&#34;&gt;# 동적 시각화&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(viridis)   &lt;span style=&#34;color:#75715e&#34;&gt;# 색상 관련 패키지&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)    &lt;span style=&#34;color:#75715e&#34;&gt;# 엑셀파일 데이터 수집&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse) &lt;span style=&#34;color:#75715e&#34;&gt;# 데이터 가공 및 ggplot2 시각화&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-데이터-가져오기&#34;&gt;(2) 데이터 가져오기&lt;/h2&gt;
&lt;p&gt;지난 시간에는 SQL DB를 통해서 소스코드를 가져왔다면, 이번에는 엑셀파일을 통해서 데이터를 가져오도록 하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;코로나 데이터셋 데이터 가져오기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)

&lt;span style=&#34;color:#75715e&#34;&gt;# get covid data&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_excel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_corona_file_path&amp;#34;&lt;/span&gt;, sheet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(dateRep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(dateRep)) 
  
Rows&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;905&lt;/span&gt;
Columns&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; dateRep                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; day                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; month                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; year                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cases                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, …
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; deaths                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; countriesAndTerritories &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanista…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ geoId                   &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ countryterritoryCode    &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,…&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; popData2018             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37172386&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37172386&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37172386&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37172386&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위와 같은 형태의 데이터 셋이 출력되면 정상이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두번째로 작업해야 하는 것은 &lt;code&gt;Continent Code&lt;/code&gt;가 필요하다. &lt;code&gt;Continent Code&lt;/code&gt;를 통해서 &lt;code&gt;country&lt;/code&gt;를 그룹화 해야 하기 때문에 &lt;code&gt;Table Join&lt;/code&gt;도 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# get code data&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://pkgstore.datahub.io/JohnSnowLabs/country-and-continent-codes-list/country-and-continent-codes-list-csv_csv/data/b7876b7f496677669644f3d1069d3121/country-and-continent-codes-list-csv_csv.csv&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Country Code 변수명 재정의&lt;/span&gt;
country_code &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(url, stringsAsFactors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(Continent_Name, Three_Letter_Country_Code) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(continent_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Three_Letter_Country_Code)

&lt;span style=&#34;color:#75715e&#34;&gt;# Covid_19 변수명 재정의&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dateRep, 
         country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countriesAndTerritories, 
         continent_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; countryterritoryCode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; corona2 

&lt;span style=&#34;color:#75715e&#34;&gt;# continent_code 변수 기준으로 데이터 통합&lt;/span&gt;
corona3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left_join&lt;/span&gt;(corona2, country_code)

&lt;span style=&#34;color:#75715e&#34;&gt;# 결과 확인&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(corona3)  

Rows&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;339&lt;/span&gt;
Columns&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; date           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; day            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; month          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; year           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cases          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; deaths         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; country        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afgh…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ geoId          &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AF&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;A…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; continent_code &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ popData2018    &amp;lt;dbl&amp;gt; 37172386, 37172386, 37172386, 37172386, 37172386, …
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ Continent_Name &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;Asia&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;A…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;국가별 Code 데이터는 &lt;a href=&#34;https://datahub.io/JohnSnowLabs/country-and-continent-codes-list&#34;&gt;datahub.io&lt;/a&gt;에서 가져으니 참고하기를 바란다.
&lt;ul&gt;
&lt;li&gt;(만약, 위 주소에 문제가 생기면 강사에게 개별 컨택하면 데이터가 보관된 제 개인 &lt;code&gt;github url&lt;/code&gt;을 공유해주겠다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_03/project_03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-데이터-요약&#34;&gt;(3) 데이터 요약&lt;/h2&gt;
&lt;p&gt;데이터 요약을 할 때, 고려할 사항 중의 하나는 &lt;code&gt;누적 데이터다.&lt;/code&gt; 날짜로 &lt;code&gt;filtering&lt;/code&gt;을 할 때 해당 기간까지의 누적 확진자수와 누적 사망자수도 같이 계산하는 소스코드를 진행했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; corona3 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 

  &lt;span style=&#34;color:#75715e&#34;&gt;# cty_code가 없는 데이터는 삭제했다. 원래는 찾아서 개별 국가와 통합하는게 맞기는 하지만.. (숙제로 남겨둔다!)&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(cty_code)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(day, month, year, geoId)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Reorder countries to having big bubbles on top&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# 아래 코드가 누적수치를 뽑을 때 쓰는 방법이니 참고한다. &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(cum_cases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(cases), 
         cum_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(deaths)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# plotly에서 표시 될 데이터 정보&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, country, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ncases (M): &amp;#34;&lt;/span&gt;, cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday_deaths: &amp;#34;&lt;/span&gt;, deaths, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_cases: &amp;#34;&lt;/span&gt;, cum_cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_deaths: &amp;#34;&lt;/span&gt;, cum_deaths, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# 같은 국가명인데, 다른 대륙으로 묶인 경우가 있었다. &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# cases &amp;amp; deaths는 똑같아서, 중복값 처리 했다. &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;distinct&lt;/span&gt;(date, cases, deaths, country, .keep_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(data)

Rows&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;
Columns&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
Groups&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; country [198]
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; date           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2020-04-05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; cases          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;314&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;241&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; deaths         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, …
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; country        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Afghanistan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Albania&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Andorra&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Algeria&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ cty_code       &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;AFG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;ALB&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AND&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;DZA&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;AGO&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;ATG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;ARG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; popData2018    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37172386&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2866376&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77006&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42228429&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30809762&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9628&lt;/span&gt;…
&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; Continent_Name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;chr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asia&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Europe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Europe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Africa&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Africa&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ cum_cases      &amp;lt;dbl&amp;gt; 270, 333, 466, 1300, 10, 15, 1451, 1506, 64, 5687,…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ cum_deaths     &amp;lt;dbl&amp;gt; 5, 19, 17, 130, 2, 0, 43, 14, 0, 34, 186, 10, 4, 4…
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ text           &amp;lt;chr&amp;gt; &amp;#34;&lt;/span&gt;Country&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Afghanistan&lt;span style=&#34;color:#a6e22e&#34;&gt;\ncases &lt;/span&gt;(M)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;\ntoday_deaths…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 데이터 가공 및 요약이 끝이났다. 시각화만 남았다. 시각화는 &lt;code&gt;ggplot2&lt;/code&gt;로 개발한 뒤에, &lt;code&gt;ggplotly()&lt;/code&gt;에서 담아서 출력한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;deaths, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; popData2018, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Continent_Name, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;text)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# x값에 로그를 준 이유는? 극단적인 이상치가 발생되어 전체적인 흐름 확인하기가 어려웠다. &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_size&lt;/span&gt;(range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_viridis&lt;/span&gt;(discrete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, guide&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
  
pp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplotly&lt;/span&gt;(p, tooltip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;)
pp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_03/project_04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그림이 나오면 성공이다. 이제 R Markdown에서 응용하는 소스코드를 만들어보자.&lt;/p&gt;
&lt;h2 id=&#34;v-apply-to-r-markdown&#34;&gt;V. Apply to R Markdown&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Global Bubble Chart&lt;/code&gt; 탭에 해당하는 소스코드를 찾아서 아래와 같이 입력하고 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create data Reactive&lt;/span&gt;
corona_bubble_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
  corona3 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(cty_code)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(day, month, year, geoId)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Reorder countries to having big bubbles on top&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(cum_cases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(cases), 
         cum_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(deaths)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# prepare text for tooltip&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country: &amp;#34;&lt;/span&gt;, country, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday cases: &amp;#34;&lt;/span&gt;, cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntoday_deaths: &amp;#34;&lt;/span&gt;, deaths, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_cases: &amp;#34;&lt;/span&gt;, cum_cases, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\ntotal_deaths: &amp;#34;&lt;/span&gt;, cum_deaths, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-05&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;distinct&lt;/span&gt;(date, cases, deaths, country, .keep_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
})

&lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlotly&lt;/span&gt;({
  &lt;span style=&#34;color:#75715e&#34;&gt;# Classic ggplot&lt;/span&gt;
  p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;corona_bubble_df&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;deaths, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; popData2018, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Continent_Name, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;text)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_size&lt;/span&gt;(range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Population (M)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_viridis&lt;/span&gt;(discrete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, guide&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplotly&lt;/span&gt;(p, tooltip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_03/project_05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;vi-더-할-수-있는-것-과제로-남겨두기&#34;&gt;VI. 더 할 수 있는 것 (과제로 남겨두기)&lt;/h2&gt;
&lt;p&gt;위 통계는 단순히 확진자수와 사망자수의 통계를 나타나는 것이지만, 인구수 대비 확진자수, 사망자수, 또한 치사율 등을 추가로 구할 수 있을 것이다. 이러한 부분이 매우 중요하다면, &lt;code&gt;shiny&lt;/code&gt;의 &lt;code&gt;valueBox&lt;/code&gt; 같은 것을 활용하여 보여주는 것도 하나의 좋은 대시보드 자료가 될 수 있다. 이러한 내용들은 향후 코로나 대시보드를 제작할 때 참고 하여 강사가 만든 것 보다 더 좋은 대시보드를 만들어가는데 도움이 되었으면 좋겠다.&lt;/p&gt;
&lt;h2 id=&#34;vii-conclusion&#34;&gt;VII. Conclusion&lt;/h2&gt;
&lt;p&gt;오늘은 &lt;code&gt;Bubble Chart&lt;/code&gt;를 직접 연습해보고 &lt;code&gt;R Markdown&lt;/code&gt;에 응용하는 소스코드를 진행하였다. 시각화 강의 때도 언뜻 설명하였지만, 강사가 다른 그래프보다 plotly를 응용하는 이유는 ggplot2를 지원하기 때문이다. 익숙한 코드로 우선 작업후 &lt;code&gt;ggplotly()&lt;/code&gt; 함수 한줄이면 충분히 &lt;code&gt;Interactive&lt;/code&gt;하게 시각화를 해줄 수 있다. 지난 포스팅에서는 &lt;code&gt;dygraphs&lt;/code&gt; 패키지를 사용하면서 동적 시각화를 작성했고, 오늘은 &lt;code&gt;plotly&lt;/code&gt; 패키지를 구성하여 작업했다.&lt;/p&gt;
&lt;p&gt;이글을 읽는 사람들에게 작게나마 도움이 되기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;viii-reference&#34;&gt;VIII. Reference&lt;/h2&gt;
&lt;p&gt;Holtz Yan. (2019). Interactive bubble chart. Retrieved April 8, 2020, from &lt;a href=&#34;https://www.r-graph-gallery.com/bubble_chart_interactive_ggplotly.html&#34;&gt;https://www.r-graph-gallery.com/bubble_chart_interactive_ggplotly.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project 2 - Visusalization (Time Series)</title>
      <link>https://chloevan.github.io/r/shiny/project_02/</link>
      <pubDate>Tue, 07 Apr 2020 10:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_02/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-project&#34;&gt;II. Shiny Project&lt;/h2&gt;
&lt;p&gt;이전 포스트에서는 &lt;code&gt;Corona 데이터셋&lt;/code&gt;을 구하는 방법에 대해 기술하였다. 그리고, 데이터셋을 &lt;code&gt;MongoDB&lt;/code&gt;에 저장하는 방법에 대해 서술하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/project_01/&#34;&gt;Corona Shiny Project I - Get Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-shiny-project-with-flexdashboard-package&#34;&gt;III. Shiny Project with flexdashboard package.&lt;/h2&gt;
&lt;p&gt;강사는 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 활용할 예정이기 때문에 어떻게 처음 시작하는지는 여기서 추가 설명은 하지 않는다. 다만, 처음 이 페이지를 방문한 사람을 위해 강사가 작성한 블로그 글 &lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;에서 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;1-model-dashboard&#34;&gt;(1) Model Dashboard&lt;/h2&gt;
&lt;p&gt;강사가 참조하려는 대시보드는 아래와 같이 만들어갈 예정이다. &lt;code&gt;Heatmap&lt;/code&gt; 대신에 세계지도를 넣으려고 하며, 날짜에 따라 어떻게 시시각각 변하는지 만들 예정이다. 또한, &lt;code&gt;Time Series Chart&lt;/code&gt; 또는 &lt;code&gt;Bubble Chart&lt;/code&gt; 애니메이션을 활용하여 국가별로 누적 확진자수와 사망자수를 만들 예정이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jjallaire.shinyapps.io/shiny-biclust/&#34;&gt;Gene Expression Biclustering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_02/project_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-필수-패키지-불러오기&#34;&gt;(2) 필수 패키지 불러오기&lt;/h2&gt;
&lt;p&gt;강사가 사용하려는 패키지는 아래와 같다. (작업하다보면 추가가 될 수 있어서, 계속 업데이트 하려고 한다.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```r
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 데이터를 &amp;#39;global&amp;#39; chunk에 넣고, 대시보드의 모든 사용자가 데이터를 공유할 수 있도록 지원하는 소스 코드&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(mongolite)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(leaflet)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dygraphs)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(xts)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-layout-기본-구성&#34;&gt;(3) Layout 기본 구성&lt;/h2&gt;
&lt;p&gt;강사는 아래와 같이 기본 구성도를 작성하였다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_02/project02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-get-data-from-mongodb&#34;&gt;III. Get Data From MongoDB&lt;/h2&gt;
&lt;p&gt;아래 소스코드를 통해서 데이터를 가져온다. MongoDB에 관련된 자료는 &lt;a href=&#34;https://rpubs.com/Evan_Jung/r_mongodb&#34;&gt;R MongoDB 접속 및 소개 자료&lt;/a&gt;에서 확인하기를 바란다. 사실 본 프로젝트에서는 꼭 이렇게 하지 않아도 된다. 그러나, 조금 더 깊은 내용을 원하면, 이렇게 해줘야 함을 명시한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(mongolite)
collection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;covid_19&amp;#34;&lt;/span&gt; 
db &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;learningspoons&amp;#39;&lt;/span&gt;
mongo_id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 보안 유지를 위해 가렸다.(실무에서는 이렇게 작업하라고 권유하는 것임!) &lt;/span&gt;
mongo_pw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_PW&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (실무에서는 이렇게 작업하라고 권유하는 것임!)  &lt;/span&gt;

mongo_url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongodb+srv://&amp;#39;&lt;/span&gt;, mongo_id, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;,mongo_pw,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@learningspoons-rhpei.gcp.mongodb.net/&amp;#39;&lt;/span&gt;)

conn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongo&lt;/span&gt;(collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collection, 
              db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db, 
              url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mongo_url)

&lt;span style=&#34;color:#75715e&#34;&gt;# get data&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 소스코드는 &lt;code&gt;global&lt;/code&gt; chunk에 작성한다. 이유는 위 데이터를 우선 공동으로 사용되어야 하기 때문이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tip-1: 여기에서 &lt;code&gt;Sys.getenv(&amp;quot;MONGO_ID&amp;quot;)&lt;/code&gt;와 함께 &lt;code&gt;App Publishing&lt;/code&gt;을 진행하면, shinyapp.io에서 에러가 날 가능성이 크다. 이유는 &lt;code&gt;Sys.getenv(&amp;quot;&amp;quot;)&lt;/code&gt;은 환경설정 파일(&lt;code&gt;.Renviron&lt;/code&gt;)인데, 당연히 &lt;code&gt;github&lt;/code&gt; 등에는 공적으로 같이 올리지 않는다. 강사는 publishing 할 때, 명시적으로 ID와 PW를 같이 기재하여 배포하였지만, 보안상으로는 당연히 그렇게 하면 안된다. 이에 대한 적절한 해결책을 공유하니, 참고하기를 바란다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/39084284/how-to-pass-environment-variables-to-shinyapps&#34;&gt;How to pass environment variables to shinyapps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-sidebar-구성&#34;&gt;IV. Sidebar 구성&lt;/h2&gt;
&lt;p&gt;이제 본격적으로 시각화를 구현하기에 앞서서 슬라이드형 날짜를 구성해보자.&lt;/p&gt;
&lt;h2 id=&#34;1-전역변수-지정&#34;&gt;(1) 전역변수 지정&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;global chunk&lt;/code&gt;에 아래와 같이 추가적으로 코드를 입력한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 날짜 지정&lt;/span&gt;
corona_date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dateRep)

&lt;span style=&#34;color:#75715e&#34;&gt;# 특정 Input값이 없을 경우 대비&lt;/span&gt;
variable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; F
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 코드를 지정했다면, 아래와 같이 소스코드를 작업한 뒤 결과물을 빠르게 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Inputs {.sidebar data-width=300}
-----------------------------------------------------------------------
원하는 날짜에 놓고 &lt;span style=&#34;color:#e6db74&#34;&gt;`Button`&lt;/span&gt;을 누르세요. 

&lt;span style=&#34;color:#e6db74&#34;&gt;```r
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;uiOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Slider&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(corona_date), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date),
                    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date)), animate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;renderUI&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is.null&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;variable)){
    }else{
      &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;variable &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cases&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deaths&amp;#34;&lt;/span&gt;)){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(corona_date), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date),
                    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date)), animate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        }else{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(corona_date), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date),
                    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date)&lt;span style=&#34;color:#ae81ff&#34;&gt;-7&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(corona_date)), animate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        } &lt;span style=&#34;color:#75715e&#34;&gt;# else&lt;/span&gt;
    } &lt;span style=&#34;color:#75715e&#34;&gt;# is.null&lt;/span&gt;
  })
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_02/project_03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;추가적으로 더 넣을 내용이 생기면 업데이트 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;v-time-series-데이터-작성&#34;&gt;V. Time Series 데이터 작성&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny App&lt;/code&gt;을 작성할 때, 특히 시각화와 데이터 처리와 관련해서 작업할 때는 &lt;code&gt;R Markdown&lt;/code&gt;에서 하는 것보다, 일반 &lt;code&gt;.R&lt;/code&gt;파일을 하나 생성해서 빠르게 구현하는 것을 추천한다.&lt;/p&gt;
&lt;p&gt;강사가 작업할 Time Series 시각화는 &lt;code&gt;dygraphs&lt;/code&gt; 패키지를 할용하려고 한다. 참고로 강사 역시, dygraphs 패키지를 이전에 사용해본적은 없다! 즉, 현재 듣는 수강생과 동일한 입장에서 작업하는 것임을 알고, 자신감 있게 작업하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.r-graph-gallery.com/317-time-series-with-the-dygraphs-library.html&#34;&gt;Time series visualization with the dygraphs package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강사가 R 에디터에서 빠르게 작업한 전체 소스코드는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# load data in &amp;#39;global&amp;#39; chunk so it can be shared by all users of the dashboard&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(mongolite)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dygraphs)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(xts)

collection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;covid_19&amp;#34;&lt;/span&gt; 
db &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;learningspoons&amp;#39;&lt;/span&gt;
mongo_id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 보안 유지를 위해 가렸다.(실무에서는 이렇게 작업하라고 권유하는 것임!) &lt;/span&gt;
mongo_pw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_PW&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (실무에서는 이렇게 작업하라고 권유하는 것임!)  &lt;/span&gt;

mongo_url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongodb+srv://&amp;#39;&lt;/span&gt;, mongo_id, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;,mongo_pw,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@learningspoons-rhpei.gcp.mongodb.net/&amp;#39;&lt;/span&gt;)

conn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongo&lt;/span&gt;(collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collection, 
              db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db, 
              url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mongo_url)

&lt;span style=&#34;color:#75715e&#34;&gt;# get data&lt;/span&gt;
corona &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 날짜 변환&lt;/span&gt;
corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dateRep &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(corona&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dateRep)

&lt;span style=&#34;color:#75715e&#34;&gt;# summarise&lt;/span&gt;
corona2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; corona &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(dateRep) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total_cases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(cases), 
            total_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(deaths))

cases_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xts&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; corona2[, &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;], order.by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; corona2&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;dateRep)
p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dygraph&lt;/span&gt;(cases_data) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dyOptions&lt;/span&gt;(drawPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, pointSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, fillGraph&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_02/project_04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;R Markdown&lt;/code&gt;에 응용만 하면 된다. 그런데, 여기서 주의점! &lt;code&gt;shiny tutorial&lt;/code&gt;에서 패키지 설명서를 잘 읽었다면, interactive graph package와 연동이 잘 된다는 걸 기억했으면 좋겠다. 즉, 생각보다 쉽게 작업할 수 있다는 뜻이다. &lt;code&gt;dygraphs&lt;/code&gt; 패키지 설명서를 다시 한번 읽어보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/dygraphs/shiny.html&#34;&gt;Using in Shiny Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ui.R&lt;/code&gt;코드에서 &lt;code&gt;dygraphOutput(&amp;quot;dygraph&amp;quot;)&lt;/code&gt;을 봤으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 형태로 소스코드를 응용할 것이다. 잘 따라와주기를 바란다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;corona_xts &amp;lt;- reactive({
  temp &amp;lt;- corona %&amp;gt;% 
  mutate(dateRep = as.Date(dateRep)) %&amp;gt;% 
  group_by(dateRep) %&amp;gt;% 
  summarise(total_cases = sum(cases), 
            total_deaths = sum(deaths))
  xts::xts(x = temp[, -1], order.by = temp$dateRep)
})

renderDygraph({
  dygraph(corona_xts(), height = 400) %&amp;gt;% 
  dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.2,
              hideOnMouseOut = FALSE) %&amp;gt;% 
  dyOptions(drawPoints = TRUE, 
            pointSize = 4, 
            fillGraph=TRUE, 
            axisLineWidth = 1.5)
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_02/project_05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 형태로 나오면 완성이다. 아쉽지만, 아직은 &lt;code&gt;date&lt;/code&gt;와 연동된 것은 아니다. &lt;code&gt;date&lt;/code&gt;와 연동하려면, 보다 더 많은 작업을 해야 한다! 아직은 좀 더 기다리자.&lt;/p&gt;
&lt;p&gt;다음 시간에는 &lt;code&gt;Bubble Chart&lt;/code&gt;를 작성하는 코드를 실습해보자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corona Shiny Project I - Get Data</title>
      <link>https://chloevan.github.io/r/shiny/project_01/</link>
      <pubDate>Mon, 06 Apr 2020 09:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/project_01/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-tutorial-소개&#34;&gt;I. Shiny Tutorial 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_08/&#34;&gt;shiny tutorial 08 - HTML, CSS 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-코로나-바이러스-대시보드-개발-동기&#34;&gt;II. 코로나 바이러스 대시보드 개발 동기&lt;/h2&gt;
&lt;p&gt;강사가 처음 대시보드 강의를 기획할 때는, 이커머스 강의를 기획하고 준비했었다. 그러나, 3월부터 전세계적으로 코로나 바이러스가 확산되기 시작하면서, 코로나 바이러스 대시보드가 우후죽순처럼 생기기 시작했다.&lt;/p&gt;
&lt;p&gt;시간이 지나더라도, 최소 10년 가까이 회자될 코로나 바이러스 대시보드를 교육용으로 만들어 둘 필요는 있다고 생각을 했다.&lt;/p&gt;
&lt;p&gt;본 튜토리얼부터는 그동안에 익힌 &lt;code&gt;R의 주요 패키지&lt;/code&gt;들을 활용하여 데이터 수집 - 저장 - 시각화까지 순차적으로 개발하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-코로나-바이러스&#34;&gt;III. 코로나 바이러스!!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_01/project01.jpeg&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;2019년 12월부터 중국 우한에서 급속하게 퍼진 코로나 바이러스가 전세계를 강타하기 시작했고, 2020년 4월 6일 오전 9시 기준, 전세계 확진자수는 183개국 120만명을 돌파했고, 68,000명의 사망자 숫자를 돌파했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_01/project02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이 기간 동안, (강사 포함) 많은 사람들의 경제적으로, 심리적으로, 육체적으로 어려움을 겪고 있는데, 반드시 꼭 빠른 시일안에 종식되기를 기원하며.. 데이터 분석가 본연의 업무인 시각화에 본격적으로 집중해보자.&lt;/p&gt;
&lt;h2 id=&#34;vi-다양한-대시보드-맛보기&#34;&gt;VI. 다양한 대시보드 맛보기&lt;/h2&gt;
&lt;p&gt;3월 중순에 읽은 글 하나를 소개한다. Shiny Project에 좋은 참고자료가 될 것 같다. &lt;a href=&#34;https://towardsdatascience.com/top-5-r-resources-on-covid-19-coronavirus-1d4c8df6d85f&#34;&gt;Top 35 R resources on Novel COVID-19 Coronavirus&lt;/a&gt;. 기회가 된다면 이 중에서 10개 정도는 소개하는 글을 번역하고 싶기는 하다.&lt;/p&gt;
&lt;h2 id=&#34;v-shiny-project---데이터-가져오기&#34;&gt;V. Shiny Project - 데이터 가져오기&lt;/h2&gt;
&lt;p&gt;가장 큰 문제는 역시나 데이터 수집이다. 이번 포스트에서는 데이터 수집 후 저장까지 작성하는 코드를 보여준다.&lt;/p&gt;
&lt;p&gt;코드에 대한 자세한 설명은 생략하며, 향후 웹 크롤링 Tutorial을 제작할 때 공유하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-데이터-소스-확인&#34;&gt;(1) 데이터 소스 확인&lt;/h2&gt;
&lt;p&gt;현재 코로나 관련 데이터의 원천은 모두 &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&lt;/a&gt; Repository에서 관리하고 있다.&lt;/p&gt;
&lt;p&gt;전세계에서 의료 통계에 대한 접근 권한이 일반 사용자에게는 당연히 제한된다. 즉, 주어진 데이터셋에서 다양한 대시보드를 작업해야 하는 것이 Data Scientist &amp;amp; Analyst에게는 기본적인 업무이다.&lt;/p&gt;
&lt;p&gt;데이터 분석업에 처음 입문하는 분들에게는 사실 &lt;code&gt;Johns Hopkins CSSE&lt;/code&gt;의 Repo는 굉장히 큰 배움의 장터가 될 것이다. 강사도 많이 배우고 있다. 꼭 전체적인 흐름 및 작성 요령 등을 익히기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_01/project03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series&#34;&gt;여기, csse_covid_19_time_series&lt;/a&gt;에 있는 데이터를 가져와서 사용할 수 있지만, 본 포스트에서는 사용하지 않는다. 이유는 데이터 전처리를 조금 많이 해줘야 한다. 본인의 데이터 전처리 실력을 조금 뽐내고 싶다면, 여기에서 해도 좋다. 실제 강사가 처음 만들 때는 여기 데이터를 활용 하기는 했다. 단순 작업들이 많은데, 시간적으로 1-2일 시간을 들여 전처리를 진행하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전처리 전의 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(RCurl)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## ✓ ggplot2 3.3.0     ✓ purrr   0.3.3
## ✓ tibble  3.0.0     ✓ dplyr   0.8.5
## ✓ tidyr   1.0.0     ✓ stringr 1.4.0
## ✓ readr   1.3.1     ✓ forcats 0.4.0
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## x tidyr::complete() masks RCurl::complete()
## x dplyr::filter()   masks stats::filter()
## x dplyr::lag()      masks stats::lag()
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;URL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getURL&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&amp;#34;&lt;/span&gt;)

data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; URL, check.names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(data[1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##   Province/State Country/Region      Lat    Long 1/22/20 1/23/20 1/24/20
## 1                   Afghanistan  33.0000 65.0000       0       0       0
## 2                       Albania  41.1533 20.1683       0       0       0
## 3                       Algeria  28.0339  1.6596       0       0       0
## 4                       Andorra  42.5063  1.5218       0       0       0
## 5                        Angola -11.2027 17.8739       0       0       0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 데이터는 확진자와 사망자 모두를 포함하고 있지 않다. 다시 말하면, 위 데이터 모두를 가져와서 날짜별로 재정리하는 코드가 남았다. (무언가 복잡한 것 같다!! 실제로 그렇다!!) 데이터 전처리는 숙제로 과제로 남겨두겠다. 강사가 정리한 것이 있기는 하다! 그러나, 여기에서 보여주지는 않을 것이다!! (프로젝트 마지막날에 공유해주겠다!)&lt;/p&gt;
&lt;p&gt;그래서 수강생들이 조금 더 정제된 데이터를 웹에서 불러와서 사용할 만한 것을 찾았다!! Hooray!! &lt;a href=&#34;https://data.europa.eu/euodp/en/data/dataset/covid-19-coronavirus-data/resource/55e8f966-d5c8-438e-85bc-c7a5a26f4863&#34;&gt;Euro Open Data Portal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/coronaProject/project_01/project04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이제 여기에서 데이터를 수집할 것이다! 다행히 Access URL이 있다. (강사는 백업으로 강사 데이터 github 저장소에 별도로 보관했다. 파일 다운로드가 안되면 강사의 깃허브 URL을 공유할테니 개별적으로 요청하시기를 바란다. )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차 백업: 2020-04-06&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-데이터-수집&#34;&gt;(2) 데이터 수집&lt;/h2&gt;
&lt;p&gt;이제 본격적으로 데이터 수집 및 간단한 데이터 처리를 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(readxl)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(httr)

&lt;span style=&#34;color:#75715e&#34;&gt;# URL Copy&lt;/span&gt;
url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 파일 이름만 가져오기&lt;/span&gt;
getFileName &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;(url)

&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에 파일 다운로드 받기&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;download.file&lt;/span&gt;(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, destfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getFileName)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 현재 객체의 파일 리스트 확인&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;list.files&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;COVID-19-geographic-disbtribution-worldwide.xlsx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 지정된 디렉토리에서 파일 업로드 하기&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_excel&lt;/span&gt;(getFileName)
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 10
##   dateRep               day month  year cases deaths countriesAndTer… geoId
##   &amp;lt;dttm&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;
## 1 2020-04-05 00:00:00     5     4  2020    35      1 Afghanistan      AF   
## 2 2020-04-04 00:00:00     4     4  2020     0      0 Afghanistan      AF   
## 3 2020-04-03 00:00:00     3     4  2020    43      0 Afghanistan      AF   
## 4 2020-04-02 00:00:00     2     4  2020    26      0 Afghanistan      AF   
## 5 2020-04-01 00:00:00     1     4  2020    25      0 Afghanistan      AF   
## 6 2020-03-31 00:00:00    31     3  2020    27      0 Afghanistan      AF   
## # … with 2 more variables: countryterritoryCode &amp;lt;chr&amp;gt;, popData2018 &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;국가별로 깔끔하게 정리된 데이터를 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;vi-shiny-project---데이터-전처리&#34;&gt;VI. Shiny Project - 데이터 전처리&lt;/h2&gt;
&lt;p&gt;간단하게 데이터를 전처리를 해보자. 데이터를 수집한 뒤에 무조건 전처리를 해줘야 한다! (데이터 전처리 함수를 별도로 만드는 과정을 진행해야 한다!)&lt;/p&gt;
&lt;p&gt;혹시, R이 저용량에서만 사용하는 것 아니냐는 우문이 나올 것 같아서 링크 하나를 남겨둔다! 꼭 참고하기를 바란다 (입문자에게는 어려울 수 있다!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://livefreeordichotomize.com/2019/06/04/using_awk_and_r_to_parse_25tb/&#34;&gt;Using AWK and R to parse 25tb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터 전처리를 할 작업은 한가지만 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dplyr&lt;/code&gt; 패키지의 &lt;code&gt;select()&lt;/code&gt;함수를 활용하여 &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;geoId&lt;/code&gt;을 삭제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;data2mongo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(day, month, year, geoId))
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(data2mongo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   dateRep             cases deaths countriesAndTer… countryterritor… popData2018
##   &amp;lt;dttm&amp;gt;              &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;
## 1 2020-04-05 00:00:00    35      1 Afghanistan      AFG                 37172386
## 2 2020-04-04 00:00:00     0      0 Afghanistan      AFG                 37172386
## 3 2020-04-03 00:00:00    43      0 Afghanistan      AFG                 37172386
## 4 2020-04-02 00:00:00    26      0 Afghanistan      AFG                 37172386
## 5 2020-04-01 00:00:00    25      0 Afghanistan      AFG                 37172386
## 6 2020-03-31 00:00:00    27      0 Afghanistan      AFG                 37172386
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vii-mongodb에-저장&#34;&gt;VII. MongoDB에 저장&lt;/h2&gt;
&lt;p&gt;데이터를 올린 것은 좋았지만, 아직 끝난 것은 아니다. 현재 사용중인 &lt;code&gt;Session&lt;/code&gt;을 종료하면 (또는 &lt;code&gt;RStudio&lt;/code&gt;)를 종료하면 전처리된 데이터는 당연히 사라진다.&lt;/p&gt;
&lt;p&gt;즉, 다시 전처리 코드를 실행해야 한다. (했던 것을 또하기는 싫다.) 이렇게 저장된 데이터를 &lt;code&gt;Database&lt;/code&gt;에 저장해야 하는데, 기존에 학습했던 &lt;code&gt;MongoDB&lt;/code&gt;에 저장한다. 여기서 저장된 데이터를 &lt;code&gt;Shiny Server&lt;/code&gt;에서 불러와서 대시보드로 작업하는 코드를 구현할 것이다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rpubs.com/Evan_Jung/r_mongodb&#34;&gt;R MongoDB 접속 및 소개 자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(mongolite)
collection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;covid_19&amp;#34;&lt;/span&gt; 
db &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;learningspoons&amp;#39;&lt;/span&gt;
mongo_id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_ID&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 보안 유지를 위해 가렸다.(실무에서는 이렇게 작업하라고 권유하는 것임!) &lt;/span&gt;
mongo_pw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sys.getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGO_PW&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (실무에서는 이렇게 작업하라고 권유하는 것임!)  &lt;/span&gt;

mongo_url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongodb+srv://&amp;#39;&lt;/span&gt;, mongo_id, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;,mongo_pw,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@learningspoons-rhpei.gcp.mongodb.net/&amp;#39;&lt;/span&gt;)

conn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongo&lt;/span&gt;(collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collection, 
              db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db, 
              url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mongo_url)

&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(conn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## &amp;lt;Mongo collection&amp;gt; &#39;covid_19&#39; 
##  $aggregate(pipeline = &amp;quot;{}&amp;quot;, options = &amp;quot;{\&amp;quot;allowDiskUse\&amp;quot;:true}&amp;quot;, handler = NULL, pagesize = 1000, iterate = FALSE) 
##  $count(query = &amp;quot;{}&amp;quot;) 
##  $disconnect(gc = TRUE) 
##  $distinct(key, query = &amp;quot;{}&amp;quot;) 
##  $drop() 
##  $export(con = stdout(), bson = FALSE, query = &amp;quot;{}&amp;quot;, fields = &amp;quot;{}&amp;quot;, sort = &amp;quot;{\&amp;quot;_id\&amp;quot;:1}&amp;quot;) 
##  $find(query = &amp;quot;{}&amp;quot;, fields = &amp;quot;{\&amp;quot;_id\&amp;quot;:0}&amp;quot;, sort = &amp;quot;{}&amp;quot;, skip = 0, limit = 0, handler = NULL, pagesize = 1000) 
##  $import(con, bson = FALSE) 
##  $index(add = NULL, remove = NULL) 
##  $info() 
##  $insert(data, pagesize = 1000, stop_on_error = TRUE, ...) 
##  $iterate(query = &amp;quot;{}&amp;quot;, fields = &amp;quot;{\&amp;quot;_id\&amp;quot;:0}&amp;quot;, sort = &amp;quot;{}&amp;quot;, skip = 0, limit = 0) 
##  $mapreduce(map, reduce, query = &amp;quot;{}&amp;quot;, sort = &amp;quot;{}&amp;quot;, limit = 0, out = NULL, scope = NULL) 
##  $remove(query, just_one = FALSE) 
##  $rename(name, db = NULL) 
##  $replace(query, update = &amp;quot;{}&amp;quot;, upsert = FALSE) 
##  $run(command = &amp;quot;{\&amp;quot;ping\&amp;quot;: 1}&amp;quot;, simplify = TRUE) 
##  $update(query, update = &amp;quot;{\&amp;quot;$set\&amp;quot;:{}}&amp;quot;, filters = NULL, upsert = FALSE, multiple = FALSE)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;연결이 완료된 후에는 이제 데이터를 그대로 저장시키면 된다.&lt;/li&gt;
&lt;li&gt;소스코드 자체가 어려운 것은 아니니 참고하기를 바란다.&lt;/li&gt;
&lt;li&gt;먼저 데이터가 있는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;0개인 것이 확인이 되었으면 이번에는 저장 후 다시 데이터를 확인해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(data2mongo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## List of 5
##  $ nInserted  : num 8905
##  $ nMatched   : num 0
##  $ nRemoved   : num 0
##  $ nUpserted  : num 0
##  $ writeErrors: list()
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 8905
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터가 들어간 숫자만큼 나와면 정상이다. 이렇게 전처리에 들어간 데이터를 보통 실무에서는 Data Mart 분석 테이블이라고 부르기도 한다. 강사는 분석 테이블이라는 용어를 좋아하기는 하다. 무언가 더 전처리를 할 필요가 없는.. 이러한 일련의 과정을 보통 &lt;code&gt;ETL(Extract, Transformate, Load)&lt;/code&gt;이라고 하며. 보통은 반복적으로 일어날 것 같으면 &lt;code&gt;Function&lt;/code&gt;을 만들어서 실행시키기도 한다. (강사가 진행하는 강의에서 맛보기로 볼 수 있다!)&lt;/p&gt;
&lt;p&gt;이렇게 간단하게 코로나 데이터 수집부터 몽고DB에 저장하는 것 까지 실습했다.&lt;/p&gt;
&lt;p&gt;다음 장에서는 &lt;code&gt;flexdashboard + Shiny Source&lt;/code&gt; 코드를 직접 구현하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pray for Victims of Covid_19. Contribution to them with this tutorial.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 08 - HTML, CSS 적용</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_08/</link>
      <pubDate>Sun, 05 Apr 2020 11:30:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_08/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-html-css-jquery-소개&#34;&gt;II. HTML, CSS, JQuery 소개&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;에서 &lt;code&gt;Shiny&lt;/code&gt;와 &lt;code&gt;HTML&lt;/code&gt; 문법 사이에는 여러 공통점이 있다는 것을 확인 했다. 여기에서는 &lt;code&gt;HTML&lt;/code&gt;의 내용보다는 &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;JQuery&lt;/code&gt;에 대해서 다루도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선, 처음 접하는 &lt;code&gt;CSS&lt;/code&gt;와 &lt;code&gt;JQuery&lt;/code&gt;에 대해 간단하게 정리하면 아래와 같을 것이다 (김진성, 2018, p.678).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시맨틱 태그, 디자인 속성 비 권장&lt;/li&gt;
&lt;li&gt;CSS 대체 태그 중단(center, frame, font 등)&lt;/li&gt;
&lt;li&gt;웹 개발용 API 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 문서 작성 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML문서를 대상으로 디자인 적용&lt;/li&gt;
&lt;li&gt;디자인 소프트웨어(Photoshop) 일부 기능 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 디자인 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최신 자바스크립트&lt;/li&gt;
&lt;li&gt;문서 객체 처리, 이벤트 핸들링, 애니메이션&lt;/li&gt;
&lt;li&gt;ajax 등의 개발에 필요한 라이브러리 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 동적 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;읽고나면, 딱히 정리되는 건 아니다. 역시 직접 실행해보고 해봐야 안다. &lt;code&gt;CSS&lt;/code&gt;부터 적용한 &lt;code&gt;Shiny&lt;/code&gt;가 어떻게 달라지는지 확인해보자.&lt;/p&gt;
&lt;p&gt;이번 &lt;code&gt;Tutorial&lt;/code&gt; 부터는 &lt;code&gt;ui.R&lt;/code&gt; &amp;amp; &lt;code&gt;server.R&lt;/code&gt; 두 파일로 구분할 것이다. 실제 프로젝트에서도 그렇게 진행한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-css-적용&#34;&gt;III. CSS 적용&lt;/h2&gt;
&lt;h2 id=&#34;1-css-파일-다운-받기&#34;&gt;(1) CSS 파일 다운 받기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;빠르게 대시보드를 작성해야 하는 것이 선결과제이기 때문에, 처음부터 하나씩 만들 생각을 하면 곤란하다.&lt;/li&gt;
&lt;li&gt;CSS파일 부트스트랩: &lt;a href=&#34;https://bootswatch.com/&#34;&gt;https://bootswatch.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 싸이트에 들어가면 마음에 드는 테마를 클릭하여 &lt;code&gt;CSS&lt;/code&gt;파일을 다운로드 받는다. 강사는 &lt;code&gt;Darkly&lt;/code&gt;를 선택했다.&lt;/p&gt;
&lt;h2 id=&#34;2-r-shiny-project-시작&#34;&gt;(2) R Shiny Project 시작&lt;/h2&gt;
&lt;p&gt;새롭게 R Shiny Project를 시작해본다. [&lt;code&gt;File&lt;/code&gt;] - [&lt;code&gt;New File&lt;/code&gt;] - [&lt;code&gt;Shiny Web App&lt;/code&gt;]을 클릭하면 아래와 같은 팝업이 나오는데, 여기에서 반드시, &lt;code&gt;Multiple File (ui.R/server.R)&lt;/code&gt;을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;디렉토리 &lt;code&gt;tree&lt;/code&gt;구조를 살펴보면 아래와 같다. 특히 &lt;code&gt;css&lt;/code&gt;파일이 어떤 폴더 안에 있는지를 확인한다. 반드시, &lt;code&gt;www folder&lt;/code&gt;안에 &lt;code&gt;css&lt;/code&gt; 파일이 있어야 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree
├── server.R
├── ui.R
└── www
    └── bootstrap.min.css
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-app-화면-비교&#34;&gt;(3) App 화면 비교&lt;/h2&gt;
&lt;p&gt;기본적으로 제공되는 &lt;code&gt;ui.R&lt;/code&gt;와 &lt;code&gt;server.R&lt;/code&gt; 소스코드를 그대로 활용했다. 실제로는 각자 준비한 소스코드가 있어야 하기 때문에, 실제 다운로드 받은 &lt;code&gt;css&lt;/code&gt; 파일 적용할 때에는 조금 달라질 수 있음을 유의한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 기본 &lt;code&gt;Shiny App&lt;/code&gt; 화면이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본 소스코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is the user-interface definition of a Shiny web application. You can&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# run the application by clicking &amp;#39;Run App&amp;#39; above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyUI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(


    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이번에는, &lt;code&gt;CSS&lt;/code&gt; 파일을 적용한 &lt;code&gt;Shiny App&lt;/code&gt; 화면이다. 여기에서 주의 깊게 봐야하는 것은 어떻게 &lt;code&gt;Shiny&lt;/code&gt;에서 &lt;code&gt;CSS File&lt;/code&gt;이 적용되는지의 여부다. 우선, 화면부터 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;배경색이 바뀐것을 확인할 수 있다. 여기에서 &lt;code&gt;css&lt;/code&gt;경로가 들어간 &lt;code&gt;코드 한줄&lt;/code&gt; 만 입력하면 된다. (# css 테마 적용, 코드 참조)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is the user-interface definition of a Shiny web application. You can&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# run the application by clicking &amp;#39;Run App&amp;#39; above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyUI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

    &lt;span style=&#34;color:#75715e&#34;&gt;# css 테마 적용&lt;/span&gt;
    tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;(rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;, href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bootstrap.min.css&amp;#34;&lt;/span&gt;)
    ),
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기본 화면으로만 구성하니, 약간 멋이 없다. 이럴 때는 shiny gallery에서 응용해보자. 마찬가지로, 강사는 소스코드를 그대로 사용할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;4-다른-앱의-적용-실습&#34;&gt;(4) 다른 앱의 적용 (실습)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny Gallery&lt;/code&gt;에서 &lt;a href=&#34;https://shiny.rstudio.com/gallery/retirement-simulation.html&#34;&gt;Retirement: simulating wealth with random returns, inflation and withdrawals&lt;/a&gt; &lt;code&gt;소스코드(ui.R / server.R)&lt;/code&gt;를 전체 &lt;code&gt;Copy&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;p&gt;그 후에, 아래 코드를&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;css&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;테마&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;적용&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slate.css&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ui.R&lt;/code&gt; 적당한 곳에 놓고 적용해본다. 그러면, &lt;code&gt;shiny Gallery&lt;/code&gt;에서 보던 것과 다른 색상이 나타날 것이다. (&lt;code&gt;slate.css&lt;/code&gt; 적용)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-css-shiny에-직접-적용-제목-수정&#34;&gt;(5) CSS Shiny에 직접 적용 (제목 수정)&lt;/h2&gt;
&lt;p&gt;막상 전체를 해놓고 보니, 배경은 바뀌었으나, 특히 제목(&lt;code&gt;Retirement: simulating wealth with random returns, inflation and withdrawals&lt;/code&gt;)글씨크기가 작아졌다. 또한 폰트도 바꾸고 싶은 충동이 느껴졌다. 이럴 때는, 전체 수정이 아닌 부분 수정의 개념으로 접근해서 입력해야 한다. (역시 Web Design은 힘들다!)&lt;/p&gt;
&lt;p&gt;우선 아래 두개의 소스코드를 기억해두자. 아래 소스코드를 기존의 &lt;code&gt;css&lt;/code&gt;파일과 적용하면 된다.&lt;/p&gt;
&lt;p&gt;다른 소스코드는 만지지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원 소스코드 (&lt;code&gt;ui.R&lt;/code&gt;)는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(theme&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simplex.min.css&amp;#34;&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label {font-size: 12px;}&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.recalculating {opacity: 1.0;}&amp;#34;&lt;/span&gt;
  ),

  &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retirement: simulating wealth with random returns, inflation and withdrawals&amp;#34;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;바뀐 소스코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# css 테마 적용&lt;/span&gt;
    tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;(rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;, href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slate.css&amp;#34;&lt;/span&gt;), 
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;HTML&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      @import url(&amp;#39;//fonts.googleapis.com/css?family=Lobster|Cabin:400,700&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&lt;/span&gt;)),
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label {font-size: 12px;}&amp;#34;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.recalculating {opacity: 1.0;}&amp;#34;&lt;/span&gt;, 
        )
    ),
    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# h1 폰트 수정하는 코드 &lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;h1&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retirement: simulating wealth with random returns, inflation and withdrawals&amp;#34;&lt;/span&gt;, 
       style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-family: &amp;#39;Lobster&amp;#39;, cursive;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        font-weight: 1000; line-height: 1.1; 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        color: 	#FFFFFF;&amp;#34;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;바뀐 폰트와 제목이 커진 것을 확인할 수 있다. 이와 같이 미세하게 적용하려면 해당 &lt;code&gt;tag&lt;/code&gt;, 이를테면, &lt;code&gt;h1&lt;/code&gt;에 적용한 예의 경우처럼 직접적으로 적용해야 한다. 다시 느끼시겠지만, shiny를 시각적으로 잘 구현하려면, &lt;code&gt;HTML&lt;/code&gt;과 &lt;code&gt;CSS&lt;/code&gt;을 잘 알고 있어야 함을 이해했을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;p&gt;지금까지 &lt;code&gt;shiny&lt;/code&gt;에 &lt;code&gt;css&lt;/code&gt;코드를 입력하는 방법을 배웠다. 어려운 내용은 아니지만, 처음에는 어떻게 적용을 해야할지 모르는 경우가 많다. 그러한 분들에게 도움이 되기를 바라며.. 특히 잊지 말아야 하는 것은 &lt;code&gt;css&lt;/code&gt; 파일을 생성 후 shiny에 적용하려면 &lt;code&gt;www&lt;/code&gt; 폴더의 위치 즉 트리구조를 지키는 것을 만드는 것을 잊지 말아야 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-더-알아보기&#34;&gt;V. 더 알아보기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JQuery&lt;/code&gt;와 &lt;code&gt;JavaScript&lt;/code&gt;를 연동하는 예제는 수강생들의 개별적인 과제로 남겨두겠다. 어려운 내용은 아니지만, 역시 어떻게 적용되는지는 실제로 해봐야 안다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/53944084/shiny-with-jquery-ui&#34;&gt;JQuery 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.listendata.com/2018/12/javascript-shiny-r.html&#34;&gt;JavaScript 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;특히 &lt;code&gt;shiny&lt;/code&gt;는 다양한 &lt;code&gt;JavaScript&lt;/code&gt;를 쉽게 응용할 수 있도록 &lt;code&gt;shinyjs&lt;/code&gt;라는 패키지를 직접 만들었는데, 다양한 예제들이 있으니, 한번 확인해보면 좋다. 간단한 &lt;code&gt;JavaScript&lt;/code&gt;는 &lt;a href=&#34;https://deanattali.com/shinyjs/&#34;&gt;shinyjs&lt;/a&gt;에서 활용하라는 뜻이기도 하다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;김진성. (2018). 빅데이터 분석을 위한 R 프로그래밍. 서울: 가메출판사.&lt;/p&gt;
&lt;p&gt;Grolemund, Garrett. and Cheng, Joe., (2014). Style your apps with CSS Retrieved April 5, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/css.html&#34;&gt;https://shiny.rstudio.com/articles/css.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Application of CSS in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 07 - flexdashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_07/</link>
      <pubDate>Thu, 02 Apr 2020 21:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_07/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-flexdashboard-패키지의-개요&#34;&gt;II. flexdashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;기존의 &lt;code&gt;shinydashboard&lt;/code&gt;와의 가장 큰 차이점은 &lt;code&gt;flexdashboard&lt;/code&gt;의 패키지는 &lt;code&gt;R Markdown&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 형식을 지원한다는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식문서에 따르면, flexdashabord는 R에서 제공하는 다양한 형태의 &lt;code&gt;htmlwidgets&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;lattice&lt;/code&gt;, &lt;code&gt;grid graphics&lt;/code&gt;, &lt;code&gt;tabular data&lt;/code&gt;, &lt;code&gt;gauges and value boxes&lt;/code&gt;, and &lt;code&gt;text annotations&lt;/code&gt; 등을 지원한다 (거의 대부분 기능을 제공한다는 뜻으로 읽힘).&lt;/li&gt;
&lt;li&gt;기존의 &lt;code&gt;shiny tutorial&lt;/code&gt;를 잘 따라해왔다면, 대부분 느끼겠지만, 대시보드의 &lt;code&gt;열&lt;/code&gt;과 &lt;code&gt;행&lt;/code&gt;을 맞추는 건 쉽지가 않다. PC환경의 대시보드 형태로 구현이 되기 때문에, 모바일로 화면 전환이 쉽지가 않은데, &lt;code&gt;flexdashboard&lt;/code&gt;는 이러한 기능도 제공한다.&lt;/li&gt;
&lt;li&gt;기본적으로 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지는 &lt;code&gt;static&lt;/code&gt;한 대시보드인데, &lt;code&gt;dynamic&lt;/code&gt;하게 앱을 작성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 설치한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;flexdashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;패키지를 설치하고 나면, [&lt;code&gt;File&lt;/code&gt;] - [&lt;code&gt;New File&lt;/code&gt;] - [&lt;code&gt;R Markdown&lt;/code&gt;] - [&lt;code&gt;From Template&lt;/code&gt;] 순서대로 클릭하면 아래와 같이 &lt;code&gt;Flex Dashboard&lt;/code&gt; 파일이 활성화 되는데, 이 파일을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;클릭과 함께 아래와 같은 형태의 코드가 준비된 것을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서 &lt;code&gt;shiny dashboard&lt;/code&gt; 형태로 구현하려면 간단하게 &lt;code&gt;runtime: shiny&lt;/code&gt;를 &lt;code&gt;YAML header&lt;/code&gt;에 추가하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#66d9ef&#34;&gt;runtime&lt;/span&gt;: shiny
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-sample&#34;&gt;(1) Sample&lt;/h2&gt;
&lt;p&gt;아래 샘플 소스코드를 작성하여 실행한다. 아래 소스 코드 실행의 주요 목적은 &lt;code&gt;R Markdown&lt;/code&gt;과 &lt;code&gt;R Shiny&lt;/code&gt;가 어떻게 조금씩 다른지 확인하는 차원의 소스 코드이다. Sample 코드는 &lt;a href=&#34;https://beta.rstudioconnect.com/jjallaire/shiny-embedding/&#34;&gt;flexdashboard: Shiny Embedding&lt;/a&gt; 에서 가져와서 응용 했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;flexdashboard: Shiny Embedding&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    vertical_layout: scroll
runtime: shiny
---

```{r global, include=FALSE}
# 데이터를 &amp;#39;global&amp;#39; chunk에 넣고, 대시보드의 모든 사용자가 데이터를 공유할 수 있도록 지원하는 소스 코드
library(datasets)
data(WorldPhones)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
Module
=======================================================================

### Embedding a Shiny Module

```{r, include=FALSE}
# Shiny module definition (would typically be defined in a separate R script)

# UI function
worldPhonesUI &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  fillCol(height = 600, flex = c(NA, 1), 
    inputPanel(
      selectInput(ns(&amp;#34;region&amp;#34;), &amp;#34;Region:&amp;#34;, choices = colnames(WorldPhones))
    ),
    plotOutput(ns(&amp;#34;phonePlot&amp;#34;), height = &amp;#34;100%&amp;#34;)
  )
}

# Server function
worldPhones &amp;lt;- function(input, output, session) {
  output$phonePlot &amp;lt;- renderPlot({
    barplot(WorldPhones[,input$region]*1000, 
            ylab = &amp;#34;Number of Telephones&amp;#34;, xlab = &amp;#34;Year&amp;#34;)
  })
}
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;

```{r}
# Include the module
worldPhonesUI(&amp;#34;phones&amp;#34;)
callModule(worldPhones, &amp;#34;phones&amp;#34;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 파일을 실행하면 아래와 같이 화면이 구성되면 완성이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;flexdashabord&lt;/code&gt;의 구조는&lt;code&gt;R Markdown&lt;/code&gt;의 목차 및 내용을 구성하는 방식과 비슷하다. 차이점이 있다면, R chunk &lt;code&gt;{r, include=FALSE} &lt;/code&gt;안에 &lt;code&gt;shiny code&lt;/code&gt;를 진행할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;본 소스코드에서는 &lt;code&gt;Modularizing&lt;/code&gt;이 적용되었는데, 튜토리얼의 마지막 즈음에 복잡한 &lt;code&gt;shiny app&lt;/code&gt;을 만들기 위한 가이드라인의 차원에서 다루도록 한다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;이제 각각의 Layouts 대해 간단하게 설명하도록 해보자.&lt;/p&gt;
&lt;h2 id=&#34;iv-layouts&#34;&gt;IV. Layouts&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Layouts&lt;/code&gt;의 구성요소는 크게 3가지로 구분된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Orientation&lt;/code&gt;: 행과 열로 구분한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scrolling Layout&lt;/code&gt;: 만약에 차트가 많다면 한 화면에 다 넣을 수 없기 때문에 이때에는 스크롤 기능을 추가해주는 것이 좋다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tabsets&lt;/code&gt;: 강사가 제일 좋아하는 기능이다. 이유는 간단한다. 다양한 그래프와 정보를 한 화면에서 볼 수 있도록 넣을 수 있고, &lt;code&gt;Tab&lt;/code&gt; 클릭만으로 정보 제공이 가능하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;본 포스트에서는 &lt;code&gt;Tabsets&lt;/code&gt; 기준으로 작성하였는데, 이 글을 보는 사람들도 가급적 아래와 같은 형식으로 기본 &lt;code&gt;Format&lt;/code&gt;을 설정하는 것을 권유한다. 여기에서 주의해야 할 점은 어떤 시점에 &lt;code&gt;{.tabset}&lt;/code&gt;을 코드 작성 하느냐에 따라 디자인이 달라지기 때문에 수시로 확인해서 점검한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no free lunch, Open Source is free but hardworking is required. - ChloEvan -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-column&#34;&gt;(1) Column&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Column&amp;#34;
output: flexdashboard::flex_dashboard
---
    
Column 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Column {.tabset}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;실행된 화면에서 &lt;code&gt;Chart 2&lt;/code&gt;와 &lt;code&gt;Chart 3&lt;/code&gt;를 교대로 클릭하며 내용을 확인해본다. 이번에는 Rows를 기준으로 작업하는데, 사실상 달라지는 건 기존의 소스코드와 없다.&lt;/p&gt;
&lt;h2 id=&#34;2-rows&#34;&gt;(2) Rows&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;{.tabset-fade}&lt;/code&gt; 속성값은 탭이 변환될 때마다 Fade in/out 효과를 적용하여 준다. 실제로 아래와 같이 나오는지 코드 작성을 통해 확인해본다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-components&#34;&gt;V. Components&lt;/h2&gt;
&lt;p&gt;개요 페이지에서 언급했던 것처럼 &lt;code&gt;flexdashboard&lt;/code&gt;는 다양한 &lt;code&gt;Componets&lt;/code&gt;를 제공한다. &lt;code&gt;shiny&lt;/code&gt;와 &lt;code&gt;R Markdown&lt;/code&gt; 내용과 중복되는 예를 들면, &lt;code&gt;R graphics&lt;/code&gt;, &lt;code&gt;Tabular Data&lt;/code&gt; 등은 생략한다. 즉, 기존에 알고 있는 코드 문법과 차이가 없다는 뜻이기도 하다. 본 포스트에서는 &lt;code&gt;HTML Widgets&lt;/code&gt;(사실, 이것도 shiny &amp;amp; shinydashboard에서도 사용은 가능하다!) &lt;code&gt;Navigation Bar&lt;/code&gt;만 언급하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-html-widgets&#34;&gt;(1) HTML Widgets&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CRAN&lt;/code&gt;에 등록되어 있는 &lt;code&gt;30&lt;/code&gt;개 이상의 패키지는 &lt;code&gt;HTML Widgets&lt;/code&gt;을 제공한다. 즉, 이러한 &lt;code&gt;Widgets&lt;/code&gt;들은 모두 본 패키지에서 작성이 가능하다. 향후 코로나 프로젝트를 위해 지도 패키지인 &lt;code&gt;leaflets&lt;/code&gt;의 간단 예제로 간단하게 소스 코드를 구현해본다. 소스코드보다는 어떻게 대시보드화가 되는지 결과 위주로 보기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chart 2&lt;/code&gt; 섹션에 지도화면이 정상적으로 출력된다면 완성이다. &lt;code&gt;Chart 1&lt;/code&gt;에는 어떤 내용을 추가할지, &lt;code&gt;Chart 3&lt;/code&gt;에는 어떤 내용을 추가할지 보여줘야 할지 고민해야 하며, Dynamic하게 모든 차트가 동시에 적용되게 하려면, 결국엔 &lt;code&gt;데이터셋&lt;/code&gt;이 모듈화처럼 움직여야 한다 (일단, Pass!!, 본 프로젝트에 들어가면 자세히 소개하기로 한다!)&lt;/p&gt;
&lt;h2 id=&#34;2-navigation-bar&#34;&gt;(2) Navigation Bar&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Navigation Bar&lt;/code&gt;는 다중페이지가 만들어질 때 보통 사용된다. 대시 보드에 다중 페이지가 있으면 &lt;code&gt;Navigation Bar&lt;/code&gt;의 왼쪽에 다중 페이지와 링크로 연결되게 되며, 이 때에는 소셜 링크와 대시 보드의 소스 코드를 볼 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;leaflet&lt;/code&gt;을 활용하여 만들었던 기존 소스코드에 &lt;code&gt;Navigation Bar&lt;/code&gt;, &lt;code&gt;social&lt;/code&gt;, &lt;code&gt;source code&lt;/code&gt; 기능을 추가 하도록 하겠다. 어디에 어떻게 구현이 되는지 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    navbar:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;-&lt;/span&gt; { title: &amp;#34;About&amp;#34;, href: &amp;#34;https://chloevan.github.io/about/&amp;#34; }
    social: [ &amp;#34;twitter&amp;#34;, &amp;#34;facebook&amp;#34;, &amp;#34;menu&amp;#34;, &amp;#34;linkedin&amp;#34; ]
    source_code: embed
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;우측 상단에 보면, &lt;code&gt;About&lt;/code&gt; 버튼, 각각의 &lt;code&gt;Social Network&lt;/code&gt; 기능, 특히 &lt;code&gt;Facebook&lt;/code&gt;, &lt;code&gt;Twitter&lt;/code&gt;, &lt;code&gt;Linkedin&lt;/code&gt;과 같이 대시보드를 공유할 수 있는 기능들이 있는 것을 볼 수 있다. 이러한 기능들은 현재  &lt;code&gt;Corona-19&lt;/code&gt; 대시보드와 같이 빅데이터를 활용하여 시각화로 &lt;code&gt;Insight&lt;/code&gt;를 줄 때, 매우 유용한 기능이다.&lt;/p&gt;
&lt;p&gt;마지막으로 &lt;code&gt;source code&lt;/code&gt;는 현재 보고 있는 화면에 대한 전체 &lt;code&gt;source code&lt;/code&gt;를 보여주는 기능인데, 이 부분 역시 소스코드 공유를 통해 커뮤니티에 기여하고 싶을 때 넣어주면 좋다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny07.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;vii-shinydashboard-vs-flexdashboard의-활용에-관한-개인적인-단상&#34;&gt;VII. shinydashboard Vs. flexdashboard의 활용에 관한 개인적인 단상&lt;/h2&gt;
&lt;p&gt;각 패키지마다 장단점이 있지만, 굳이 두가지 중에서 한 패키지를 먼저 배워야 한다면 강사는 &lt;code&gt;flexdashboard&lt;/code&gt;로 우선 작업하는 것을 권유한다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;code&gt;shinydashboard Vs. flexdashboard&lt;/code&gt;에 대한 &lt;a href=&#34;https://shiny.rstudio.com/articles/dashboards.html&#34;&gt;비교 글&lt;/a&gt;에 대한 원문을 읽어보는 것을 권한다. (사실 그렇게 큰 내용은 없다.)&lt;/p&gt;
&lt;p&gt;일단 간단하게 요약하면, &lt;code&gt;shinydashboard&lt;/code&gt;는 입문자들이 접근하기에는 조금 어려운 점이 있다. 물론, 추후에 &lt;code&gt;HTML &amp;amp; CSS&lt;/code&gt;와 같은 기능에 대한 필요성이 느껴진다면, &lt;code&gt;shinydashboard&lt;/code&gt;에 자바스크립트 등 복잡성 있게 구현이 가능하겠지만.. 추천하지는 않는다 (왜 꼭 R로 그렇게 해야하는가? 복잡성 있게 구현한다면 나는 차라리 유료 BI Tool을 쓰자고 할 것 같다!) 하는 의문점이 늘 있어왔다. 다년간 R 커뮤니티를 관찰한 결과 &lt;code&gt;R&lt;/code&gt;을 활용하는 사람들의 대부분(특히 국내 R 유저의 특성상)의 사실상 프로그래밍에 익숙하지 않은 사람들이 대부분인 것을 추정하기 때문에 &lt;code&gt;R Shiny&lt;/code&gt;를 하는 사람들에게 &lt;code&gt;R Markdown&lt;/code&gt; 보고서를 빠르게 웹으로 구현하는 일련의 과정이 훨씬 빠르고 간결하기 때문에 추천한다. (지극히 개인적인 생각)&lt;/p&gt;
&lt;h2 id=&#34;viii-다루지-못한-것들&#34;&gt;VIII. 다루지 못한 것들&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;와 &lt;code&gt;flexdashboard&lt;/code&gt;에 다양한 기능들을 접해봤지만, 아직 다루지 못한 그러나 중요한 기능이 하나 있다. &lt;code&gt;Mobile&lt;/code&gt;의 접근성이다. 이 부분은 향후 프로젝트를 진행하면서 한번 짚고 넘어가도록 하겠다.&lt;/p&gt;
&lt;p&gt;이제 기본적인 이론 중 마지막 한가지가 남아있다. &lt;code&gt;shiny&lt;/code&gt;에서 &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;Javascript&lt;/code&gt; 연동이다.&lt;/p&gt;
&lt;p&gt;이제 미니 프로젝트의 시작점이 얼마 남지 않았다. 고지를 향해 조금만 더 달려가보자!&lt;/p&gt;
&lt;h2 id=&#34;ix-reference&#34;&gt;IX. Reference&lt;/h2&gt;
&lt;p&gt;flexdashboard, (2020). flexdashboard Retrieved April 2, 2020, from &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;https://rmarkdown.rstudio.com/flexdashboard/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered flexdashboard in Shiny&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ChloEvan. (2020, March 18). R Markdown Introduction. Retrieved April 2, 2020, from &lt;a href=&#34;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&#34;&gt;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;웹개발 개발경력이 되신 분들은 shiny 홈페이지에 게재된 &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modularizing Shiny app code&lt;/a&gt;을 자세히 읽어보기를 권한다. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 06 - shinydashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_06/</link>
      <pubDate>Wed, 01 Apr 2020 17:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_06/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shinydashboard-패키지의-개요&#34;&gt;II. shinydashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTML content&lt;/code&gt;와 &lt;code&gt;Layouts&lt;/code&gt; 조작하는 것이 편해지면 대시보드를 만들 수 있다. 그런데, 문제는 대시보드 개발을 처음부터 하는 것과 어느정도 정해진 포맷을 활용하여 작성하는 것은 다르다. 반복해서 말하지만, 데이터분석가가 처음부터 개발해서 &lt;code&gt;사내 내부용 보고서&lt;/code&gt;를 꼭 작성해서 만들어야 하는가?하는가? 글쎄. 개인적으로 동의하기 어렵다. 핵심적인 내용의 지표만 산출 및 작성 요약하여 보고하는 것이 데이터 분석가의 기본적인 업무이자 핵심적인 업무이기 때문에, 다양한 대시보드를 빠르게 그러나 가독성있게 만드는 것이 중요하다. 어차피, 이러한 대시보드 역시, 시간이 지나면 결국엔 보는 사람만 본다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt; 패키지와 그리고 다음 장에서 설명할 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 활용하여 대시보드를 빠르게 만들어봄으로써 shiny 개발 &amp;amp; 배포를 빠르게 반복적으로 진행하며 학습하는 것을 권한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;shinydashboard&lt;/code&gt; 패키지를 설치한다. &lt;code&gt;shiny&lt;/code&gt; 패키지가 설치가 되어 있지 않거나 &lt;code&gt;shiny Version (&amp;gt;=0.11)&lt;/code&gt;이 낮은 경우, 설치 에러가 날 수 있으니 주의 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;shinydashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1-shinydashboard-구조&#34;&gt;(1) shinydashboard 구조&lt;/h2&gt;
&lt;p&gt;Shiny의 기본구조는 &lt;code&gt;ui&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt;으로 구성되어 있음을 알고 있다. shinydashboard 패키지를 사용시, 이 때의 &lt;code&gt;ui&lt;/code&gt; 문법이 조금 달라진다. 어렵지는 않다. 그냥 제공하는 함수가 다를 뿐이다.&lt;/p&gt;
&lt;p&gt;일단 간단하게 소스와 결과를 확인해 보자! 아래 소스코드를 따라하면서 연습할 때는 &lt;code&gt;app.R&lt;/code&gt; 파일을 생성한 뒤 아래 코드를 작성하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;shinydashboard&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:graphics&#39;:
## 
##     box
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:3474
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardPage()&lt;/code&gt; 안에 &lt;code&gt;Header()&lt;/code&gt;, &lt;code&gt;Sidebar()&lt;/code&gt;, &lt;code&gt;Body()&lt;/code&gt;가 만들어진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 대시보드는 &lt;code&gt;default&lt;/code&gt;로 만들어진 것이고, 여기에서 이제 각각의 구성품을 채워넣는 작업을 할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-basic-dashboard&#34;&gt;IV. Basic Dashboard&lt;/h2&gt;
&lt;h2 id=&#34;1-dashboardheader&#34;&gt;(1) dashboardHeader()&lt;/h2&gt;
&lt;p&gt;먼저 제목부터 달아보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:4095
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;왼쪽 상단에 &lt;code&gt;첫번째 대시보드&lt;/code&gt; 글자가 보일 것이다. 만약, &lt;code&gt;dashboardHeader(disable = TRUE)&lt;/code&gt;를 하게 되면 불필요해 보이는 &lt;code&gt;header&lt;/code&gt; 공간은 사라지고 &lt;code&gt;Sidebar&lt;/code&gt;와 &lt;code&gt;Body&lt;/code&gt; 공간만 남게 된다.&lt;/p&gt;
&lt;h2 id=&#34;2-dashboardsidebar&#34;&gt;(2) dashboardSidebar()&lt;/h2&gt;
&lt;p&gt;Sidebar의 주 활용 용도는 메뉴 구성과 같은 개념으로 파악하면 좋다. 아래 소스코드를 활용해서 실습하기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    )
  ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7315
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dashboardSidebar()&lt;/code&gt; 안에 &lt;code&gt;sidebarMenu()&lt;/code&gt; 메뉴 구성을 만든다. 그 이후에 &lt;code&gt;menuItem()&lt;/code&gt;을 입력하는데, 다양한 &lt;code&gt;Arguments&lt;/code&gt;들이 있는 것을 확인할 수 있다. 각 &lt;code&gt;Arguments&lt;/code&gt; 사용 설명서는 &lt;code&gt;?menuItem&lt;/code&gt;를 실행한 후, 확인하는 것을 추천한다. 각각의 &lt;code&gt;Arguments&lt;/code&gt;들은 일종의 대시보드 화면을 좀 더 &lt;code&gt;Interactive&lt;/code&gt;하게 만들어주는 옵션이기 때문에, 다양한 방법으로 시도하는 것을 권유한다.&lt;/p&gt;
&lt;h2 id=&#34;3-dashboardbody&#34;&gt;(3) dashboardBody()&lt;/h2&gt;
&lt;p&gt;기존 shiny에서 작업했던 &lt;code&gt;inputId&lt;/code&gt;, &lt;code&gt;outputId&lt;/code&gt; 값이 일치한 것을 기억했으면 좋겠다. 마찬가지로 &lt;code&gt;menuItem() tabName&lt;/code&gt;값은 &lt;code&gt;Body() tabName&lt;/code&gt;값과 일치해야 한다.&lt;/p&gt;
&lt;p&gt;이유는 간단하다. &lt;code&gt;menuItem&lt;/code&gt;의 각 메뉴들을 클릭할 때마다, 다른 화면이 나타나게끔 하려고 하는 것이 &lt;code&gt;menuItem&lt;/code&gt;을 사용하는 목적이기 때문이다. 일종의 &lt;code&gt;Key&lt;/code&gt;값이라고 하면 적정한 표현일까?&lt;/p&gt;
&lt;p&gt;아래 소스를 통해서 한번 더 확인해본다. &lt;code&gt;Body&lt;/code&gt; 안에 들어가는 소스코드도 중요하지만, 여기에서는 &lt;code&gt;tabName&lt;/code&gt;을 유심히 관찰할 필요가 있다. 처음에 발생하는 에러의 대부분은 &lt;code&gt;ID&lt;/code&gt;가 일치하지 않아 발생하는 경우가 대부분이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# sidebarMenu&lt;/span&gt;
  ), &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardSidebar&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItems&lt;/span&gt;(
      &lt;span style=&#34;color:#75715e&#34;&gt;# First tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드 탭 내용&amp;#34;&lt;/span&gt;), 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidRow&lt;/span&gt;(
          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plot1&amp;#34;&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;)),

          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(
            title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Controls&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of observations:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
          ) &lt;span style=&#34;color:#75715e&#34;&gt;# box&lt;/span&gt;
        ) &lt;span style=&#34;color:#75715e&#34;&gt;# fluidRow&lt;/span&gt;
      ), &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem(tabName = &amp;#34;dashboard&amp;#34;)&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Second tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯 탭 내용&amp;#34;&lt;/span&gt;)
      ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem&lt;/span&gt;
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItems&lt;/span&gt;
  ) &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardBody&lt;/span&gt;
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;)
  histdata &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; histdata&lt;span style=&#34;color:#a6e22e&#34;&gt;[seq_len&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;slider)]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(data)
  })
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8129
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardBody()&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItems&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItem&lt;/code&gt; 순서대로 코드를 작성하는데, 가장 많이 실수하는 곳은 예상할 수 있겠지만 &lt;code&gt;tabItems&lt;/code&gt;와 &lt;code&gt;tabItem&lt;/code&gt; 오기하는 것이 많기 때문에 주의 하기 바란다.&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;대시보드 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;위젯 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-더-알아보기&#34;&gt;V. 더 알아보기&lt;/h2&gt;
&lt;p&gt;지금까지 작성한 내용은 매우 기초적인 부분에서만 접근을 한 것이기 때문에, 더 많은 기능은 직접 해봐야 알 수 있다. shinydashboard 패키지에 대한 구체적인 내용들은  &lt;a href=&#34;https://rstudio.github.io/shinydashboard/structure.html&#34;&gt;Structure&lt;/a&gt;, &lt;a href=&#34;https://rstudio.github.io/shinydashboard/appearance.html&#34;&gt;Apperance&lt;/a&gt; 등을 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;vi-sample&#34;&gt;VI. Sample&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;를 활용한 예제코드를 보면서 &lt;code&gt;필사&lt;/code&gt; 하는 것을 추천한다. 그리고 전반적인 과정을 이해하면, 그 후에 약간의 코드 수정으로 응용하여 배포하는 것을 권유한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/086-bus-dashboard/&#34;&gt;Twin Cities Buses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/087-crandash/&#34;&gt;crandash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinydashboard., (2020). shinydashboard. Retrieved April 1, 2020, from &lt;a href=&#34;https://rstudio.github.io/shinydashboard/index.html/&#34;&gt;https://rstudio.github.io/shinydashboard/index.html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered shinydashboard in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 05 - Sharing Apps</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_05/</link>
      <pubDate>Tue, 31 Mar 2020 01:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_05/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-deployment의-개요&#34;&gt;II. Shiny Deployment의 개요&lt;/h2&gt;
&lt;p&gt;이 영역은 웹개발자에게는 매우 쉬운 영역일 수도 있다. 그러나, 웹 환경에 익숙하지 않은 R 유저에게는 조금 버거울 수도 있다. 2-3번 정도만 반복하면 쉽게 작업하게 될 것이고, Shiny를 클라우드 서버를 통해 배포하는 방법도 익힐 수 있다.&lt;/p&gt;
&lt;p&gt;운이 좋게도, RStudio 에서는 무료로 매우 쉽게 배포를 할 수 있도록 하고 있다. 또한 On-Premise(사내 전용) 환경에서 배포할 수 있도록 오픈 소스도 제공하고 있다. 서버는 사실 경제적 비용이 발생하기 때문에, 클라우드로 배포할지, 도커(Docker) 및 오픈소스로 구현하여 배포할지, 고민할 필요는 있다. 배포에 관한 자세한 내용은 &lt;a href=&#34;https://shiny.rstudio.com/deploy/&#34;&gt;Hosting and Deployment&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-shinyappsio&#34;&gt;III. Shinyapps.io&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;에서 소개한 Sample Dashboard는 모두 &lt;code&gt;Shinyapps.io&lt;/code&gt;에서 배포를 하는 중이다. 배포 하는 과정은 어렵지 않으니 간단히 그 과정만 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;1-회원가입&#34;&gt;(1) 회원가입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shinyapps.io/admin/#/login&#34;&gt;shinyapps.io&lt;/a&gt;에서 회원가입을 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 싸이트에서 회원가입을 진행하고 RStudio로 돌아온다.&lt;/p&gt;
&lt;h2 id=&#34;2-shiny-app-실행&#34;&gt;(2) Shiny App 실행&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단한 소스코드로 ShinyApp을 실행한다.&lt;/li&gt;
&lt;li&gt;소스코드는 Shiny User Case에 있는 &lt;a href=&#34;https://shiny.rstudio.com/gallery/kmeans-example.html&#34;&gt;Iris K-Means Clustering&lt;/a&gt;에서 가져왔다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.R&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
iris &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; iris
vars &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(iris), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Species&amp;#34;&lt;/span&gt;)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pageWithSidebar&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;headerPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Iris k-means clustering&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xcol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X Variable&amp;#39;&lt;/span&gt;, vars),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ycol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y Variable&amp;#39;&lt;/span&gt;, vars, selected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[[2]]),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clusters&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cluster count&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
    ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plot1&amp;#39;&lt;/span&gt;)
  )
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output, session) {

  &lt;span style=&#34;color:#75715e&#34;&gt;# Combine the selected variables into a new data frame&lt;/span&gt;
  selectedData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    iris[, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;xcol, input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;ycol)]
  })

  clusters &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;kmeans&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(), input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;clusters)
  })

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;palette&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E41A1C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#377EB8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#4DAF4A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#984EA3&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FF7F00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFFF33&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#A65628&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#F781BF&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#999999&amp;#34;&lt;/span&gt;))

    &lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(),
         col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;cluster,
         pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;centers, pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
  })

}

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the application &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8977
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shiny App&lt;/code&gt;을 실행하고 난 후에 우측 상단의 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭한다.&lt;/li&gt;
&lt;li&gt;아래 그림 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-shinyappsio-연동&#34;&gt;(3) ShinyApps.io 연동&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 아래와 같은 팝업창이 활성화 될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;다음 메뉴에서 &lt;code&gt;ShinyApps.io&lt;/code&gt; 또는 &lt;code&gt;RStudio Connect&lt;/code&gt;를 선택하라는 팝업이 활성화 될 것이다. 여기에서 &lt;code&gt;ShinyApps.io&lt;/code&gt;를 선택한다. &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;는 일종의 유료 버전이기 때문에 여기에서는 다루지 않는다. 자세히 알아보고 싶다면 &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;마지막 하단의 이미지에서 드디어 &lt;code&gt;Token&lt;/code&gt;값을 받아야 하는데, 이 &lt;code&gt;Token&lt;/code&gt;값은 &lt;code&gt;ShinyApps.io&lt;/code&gt; 싸이트에서 확인해야 한다. 아래 팝업창을 유지한채로 웹사이트로 이동한다. 이동할 웹사이트는 친절하게 &lt;code&gt;Go to&lt;/code&gt; &lt;a href=&#34;http://www.shinyapps.io/&#34;&gt;&lt;code&gt;your account on Shiny Apps&lt;/code&gt;&lt;/a&gt;로 클릭할 수 연동되어 있으니 클릭해주면 된다. 클릭 후 우측 상단의 Dashboard 메뉴를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;Tokens&lt;/code&gt;을 찾아야 하는데, &lt;code&gt;Tokens&lt;/code&gt;는 왼쪽 메뉴에 &lt;code&gt;[Account]&lt;/code&gt;-&lt;code&gt;[Tokens]&lt;/code&gt;-&lt;code&gt;[Add Token]&lt;/code&gt;를 순서대로 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그러면 Token &amp;amp; Secret에 값이 생성 될 것인데, 이 때 [&lt;code&gt;show&lt;/code&gt;] 버튼을 클릭하면 다음과 같은 이미지에서 [&lt;code&gt;Show Secret&lt;/code&gt;] 버튼을 클릭한 후 전체 소스코드를 복사한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;복사한 소스코드는 &lt;code&gt;Connect ShinyApps.io Account&lt;/code&gt;에 붙여넣기 한후 &lt;code&gt;Connect Account&lt;/code&gt;를 실행한뒤 &lt;code&gt;Publish to Server&lt;/code&gt; 팝업창에서 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 연동이 완료된다. 이 때 &lt;code&gt;Shiny Project Title&lt;/code&gt;은 URL에 적용되므로 참고하기를 바란다. 강사는 &lt;code&gt;shinyProject_Test&lt;/code&gt; 이름으로 &lt;code&gt;Title&lt;/code&gt;을 적용했다.&lt;/p&gt;
&lt;p&gt;Publishing을 진행하면 Deploy창이 활성화되면서 아래와 같은 메시지가 출력이 되기 시작할 것이다. App이 무거우면 배포하는데도 시간이 소요되므로 이 부분은 참고하기를 바란다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Preparing to deploy application...DONE
Uploading bundle for application: 2027237...DONE
Deploying bundle: 2948176 for application: 2027237 ...
Waiting for task: 709961221
  building: Building image: 3271985
  building: Installing packages
  building: Installing files
  building: Pushing image: 3271985
  deploying: Starting instances
  success: Stopping old instances
Application successfully deployed to https://chloevan.shinyapps.io/shinyProject_Test/
Deployment completed: https://chloevan.shinyapps.io/shinyProject_Test/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;참고로 이왕 배포하는 시간에 대해 굳이 비교하자면, 확실히 &lt;code&gt;RStudio&lt;/code&gt;에서 배포하는 속도는 강사가 블로그를 작성하는 &lt;code&gt;go&lt;/code&gt;언어 기반으로 작성된 &lt;code&gt;hugo + github.io&lt;/code&gt;보다 속도는 체감적으로 많이 느린감이 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-배포-확인&#34;&gt;IV. 배포 확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;방금 전에 구현한 &lt;code&gt;App&lt;/code&gt;이 다음 URL에서 확인 할 수 있을 것이다.   &lt;a href=&#34;https://chloevan.shinyapps.io/shinyProject_Test/&#34;&gt;https://chloevan.shinyapps.io/shinyProject_Test/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;RStudio를 활용하면 무료로 배포를 하는데, 간단한 클릭만으로도 배포를 할 수 있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;어떤 수강생들이 이런 질문을 한적이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux에서 배포를 하고 싶어요, 클라우드에서 배포를 하고 싶어요, 도커에서 배포를 하고 싶어요,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;결론부터 말하면 모두 가능하다. Shiny를 개발단에서 확인하고 싶다면, 정식문서를 참고하기를 바란다. &lt;a href=&#34;https://docs.rstudio.com/shiny-server/&#34;&gt;공식문서: Shiny Server Professional v1.5.13 Administrator&amp;rsquo;s Guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;도커에서 배포 예제: &lt;a href=&#34;https://www.bjoern-bos.de/post/learn-how-to-dockerize-a-shinyapp-in-7-steps/&#34;&gt;Learn How to Dockerize a ShinyApp in 7 Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS 배포 예제: &lt;a href=&#34;https://abndistro.com/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/&#34;&gt;Deploying a Shiny App with Shiny Server on an AWS EC2 Instance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로, 강사는 GCP를 사랑한 나머지, GCP에 배포를 한적이 있다. 관련해서 배포 예제 글도 작성한 글이 있었는데, Tutorial 마지막에 정리해서 공유를 할 수 있을까? 하도록 노력하겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinyapps.io team., (2020, March 5). shinyapps.io user guide. Retrieved March 31, 2020, from &lt;a href=&#34;https://docs.rstudio.com/shinyapps.io/&#34;&gt;https://docs.rstudio.com/shinyapps.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Deployment in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 04 - Layouts</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_04/</link>
      <pubDate>Sun, 29 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_04/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-layouts의-개요&#34;&gt;II. Layouts의 개요&lt;/h2&gt;
&lt;p&gt;이번 시간에는 &lt;code&gt;Shiny Layouts&lt;/code&gt; 개요에 대한 간략적인 소개를 하려고 한다. 영어가 편하거나 중고급 개발자 분들은 &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;Application layout guide&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;사실, 이 부분은 자세하게 다루기에는 부담이 존재한다. &lt;code&gt;Layouts&lt;/code&gt;에 대한 디자인은 굉장히 주관적일 뿐더러, 처음부터 만들어가려면 그만큼 시간도 오래 걸리기 때문이다. 우리가 잊지말아야 하는 것 중의 하나는 &lt;code&gt;Data Scientist&lt;/code&gt;는 &lt;code&gt;Web Developer&lt;/code&gt;는 아니다. 기존의 &lt;code&gt;Web Developer&lt;/code&gt;보다 대시보드를 시각적으로 더 잘 만들수는 없다. 그러나, 어떤 수집딘 데이터에서 어떤 &lt;code&gt;Insight&lt;/code&gt;를 클라이언트에게 전달하지는 &lt;code&gt;Web Developer&lt;/code&gt;보다는 더 나은 포지션에 있다.&lt;/p&gt;
&lt;p&gt;따라서, &lt;code&gt;Layout&lt;/code&gt;의 큰 개념만 잡는다면 다음부터는 &lt;code&gt;R&lt;/code&gt;에서 제공하는 주요 &lt;code&gt;Dashboard&lt;/code&gt; 패키지를 사용하는 것을 적극 권장한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-main-functions&#34;&gt;III. Main Functions&lt;/h2&gt;
&lt;h2 id=&#34;예시-1-sidebar-layout&#34;&gt;예시 1. Sidebar Layout&lt;/h2&gt;
&lt;p&gt;이러한 &lt;code&gt;Layout&lt;/code&gt;은 보통 화면 왼쪽에는 (단, Mobile 화면 위쪽) &lt;code&gt;input&lt;/code&gt;에 관한 기능이 나온다면, 화면 오른쪽에는 &lt;code&gt;input&lt;/code&gt;에 따라 결과값이 나타나는 &lt;code&gt;output&lt;/code&gt;의 그래프, 표 등이 출력된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 패키지&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# ui 정의&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sidebar Layout 예시&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#75715e&#34;&gt;# 제목 Panel&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(
        inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;샘플사이즈&amp;#34;&lt;/span&gt;,
        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
      )
    ),

    &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hist&amp;#34;&lt;/span&gt;)
    )
  )
)

&lt;span style=&#34;color:#75715e&#34;&gt;# server 정의&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# output will be displayed&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;n))
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shinyApp 실행&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:6286
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;예시-2-grid-layout&#34;&gt;예시 2. Grid Layout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sidebarLayout()&lt;/code&gt;은 가장 낮은 수준의 grid layout을 제공하고 있는데, 본 예시에서는 조금 더 구체적으로 &lt;code&gt;Grid Layout&lt;/code&gt;을 지정하도록 한다. 여기서 알아두어야 할 핵심 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fluidRow()&lt;/code&gt;: 행과 관련이 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column()&lt;/code&gt;: 열과 관련이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Column의 너비는 은 &lt;a href=&#34;https://getbootstrap.com/docs/4.0/layout/grid/&#34;&gt;Bootstrp 12-wide grid system&lt;/a&gt;에 기초하며, 하나의 &lt;code&gt;fluidRow()&lt;/code&gt;안에는 12개의 &lt;code&gt;column()&lt;/code&gt;이 존재한다. (다시한번 느끼지만, Shiny를 잘할려면 HTML/CSS/JS를 잘해야 한다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)

dataset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; diamonds

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;다이아몬드 데이터 탐색&amp;#34;&lt;/span&gt;,
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plot&amp;#39;&lt;/span&gt;),
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;hr&lt;/span&gt;(),

  &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidRow&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;h4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;다이아몬드 데이터 탐색&amp;#34;&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sampleSize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sample Size&amp;#39;&lt;/span&gt;, 
                  min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(dataset), value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(dataset)), 
                  step&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, round&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;br&lt;/span&gt;(),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;checkboxInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jitter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jitter&amp;#39;&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;checkboxInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smooth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Smooth&amp;#39;&lt;/span&gt;)
    ),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset), &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)[[2]]),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)))
    ),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;facet_row&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Facet Row&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(None&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset))),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;facet_col&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Facet Column&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(None&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)))
    )
  )
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output){    

  dataset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    diamonds&lt;span style=&#34;color:#a6e22e&#34;&gt;[sample&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(diamonds), input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;sampleSize),]
  })

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    
    p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dataset&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color)
    
    facets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;facet_row, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;facet_col)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(facets &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. ~ .&amp;#39;&lt;/span&gt;)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;facet_grid&lt;/span&gt;(facets)
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;jitter)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_jitter&lt;/span&gt;()
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;smooth)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_smooth&lt;/span&gt;()
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(p)
    
  }, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:4447
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;예시-3-navbar-pages&#34;&gt;예시 3. Navbar Pages&lt;/h2&gt;
&lt;p&gt;일반적인 웹사이트 메뉴 구성도와 큰 차이가 없다. 메뉴를 구성하는데, Top 메뉴와 Secondary Navigation까지 지원이 가능하다.&lt;/p&gt;
&lt;p&gt;이 기능을 구현할 때는 사실상의 &lt;code&gt;Shiny Project&lt;/code&gt; 단계로 진입하기 때문에, 이 때에는 메뉴 구성도와 같은 &lt;code&gt;웹사이트 개발 지식&lt;/code&gt;이 수반되어야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;navbarPage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Application&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Component 1&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Component 2&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;navbarMenu&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub-Component A&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub-Component B&amp;#34;&lt;/span&gt;))
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7782
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;지금까지 &lt;code&gt;Layouts&lt;/code&gt;의 기본 개요와 함께 주요 &lt;code&gt;Functions&lt;/code&gt;에 대해 간단하게 학습하는 시간을 가졌다. 여기에서는 &lt;code&gt;Layouts&lt;/code&gt;의 기본 개념만 알고 있으면 추후에 &lt;code&gt;Shiny&lt;/code&gt; 대시보드 디자인을 할 때, 보다 쉽게 구현이 가능하다.&lt;/p&gt;
&lt;p&gt;특히, Grid System에 대한 개념이 매우 중요하므로 &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;Application layout guide&lt;/a&gt;에서 추가 학습을 진행하는 것을 권장한다.&lt;/p&gt;
&lt;p&gt;다음 시간에는 Shiny App의 배포에 대해 작성하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Allaire. (2014, January 24). Application layout guide. Retrieved March 30, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;https://shiny.rstudio.com/articles/layout-guide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Layouts in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 03 - HTML content</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_03/</link>
      <pubDate>Fri, 27 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_03/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-html-content-개요&#34;&gt;II. HTML Content 개요&lt;/h2&gt;
&lt;p&gt;이번 시간에는 HTML Content 개요에 대한 간략적인 소개를 하려고 한다. 영어가 편하거나 중고급 개발자 분들은 &lt;a href=&#34;https://shiny.rstudio.com/articles/html-tags.html&#34;&gt;Customize your UI with HTML&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;텍스트 및 이미지와 같은 HTML 콘텐츠를 사용하여 Shiny 앱의 모양을 사용자 지정할 수 있다. HTML은 다양한 태그의 조합으로 UI를 꾸미는 역할을 하며, Shiny의 문법역시 HTML 태그와 거의 유사하다. 예를 들면 아래와 같다. (Shiny: HTML)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;h1(): &lt;!-- raw HTML omitted --&gt; first level header,&lt;/li&gt;
&lt;li&gt;strong(): &lt;!-- raw HTML omitted --&gt; 글씨 굵게,&lt;/li&gt;
&lt;li&gt;em(): &lt;!-- raw HTML omitted --&gt; 글씨 이탤릭체,&lt;/li&gt;
&lt;li&gt;a(): &lt;!-- raw HTML omitted --&gt; web 페이지 연결,&lt;/li&gt;
&lt;li&gt;img(): &lt;!-- raw HTML omitted --&gt; 이미지 삽입,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shiny는 굉장히 HTML 지향적으로 구성되어 있다. 만약 더 많은 태그가 궁금한 사람들은 아래에서 다음과 같이 소스코드를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(tags)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;a&amp;quot;           &amp;quot;abbr&amp;quot;        &amp;quot;address&amp;quot;     &amp;quot;area&amp;quot;        &amp;quot;article&amp;quot;    
##   [6] &amp;quot;aside&amp;quot;       &amp;quot;audio&amp;quot;       &amp;quot;b&amp;quot;           &amp;quot;base&amp;quot;        &amp;quot;bdi&amp;quot;        
##  [11] &amp;quot;bdo&amp;quot;         &amp;quot;blockquote&amp;quot;  &amp;quot;body&amp;quot;        &amp;quot;br&amp;quot;          &amp;quot;button&amp;quot;     
##  [16] &amp;quot;canvas&amp;quot;      &amp;quot;caption&amp;quot;     &amp;quot;cite&amp;quot;        &amp;quot;code&amp;quot;        &amp;quot;col&amp;quot;        
##  [21] &amp;quot;colgroup&amp;quot;    &amp;quot;command&amp;quot;     &amp;quot;data&amp;quot;        &amp;quot;datalist&amp;quot;    &amp;quot;dd&amp;quot;         
##  [26] &amp;quot;del&amp;quot;         &amp;quot;details&amp;quot;     &amp;quot;dfn&amp;quot;         &amp;quot;dialog&amp;quot;      &amp;quot;div&amp;quot;        
##  [31] &amp;quot;dl&amp;quot;          &amp;quot;dt&amp;quot;          &amp;quot;em&amp;quot;          &amp;quot;embed&amp;quot;       &amp;quot;eventsource&amp;quot;
##  [36] &amp;quot;fieldset&amp;quot;    &amp;quot;figcaption&amp;quot;  &amp;quot;figure&amp;quot;      &amp;quot;footer&amp;quot;      &amp;quot;form&amp;quot;       
##  [41] &amp;quot;h1&amp;quot;          &amp;quot;h2&amp;quot;          &amp;quot;h3&amp;quot;          &amp;quot;h4&amp;quot;          &amp;quot;h5&amp;quot;         
##  [46] &amp;quot;h6&amp;quot;          &amp;quot;head&amp;quot;        &amp;quot;header&amp;quot;      &amp;quot;hgroup&amp;quot;      &amp;quot;hr&amp;quot;         
##  [51] &amp;quot;html&amp;quot;        &amp;quot;i&amp;quot;           &amp;quot;iframe&amp;quot;      &amp;quot;img&amp;quot;         &amp;quot;input&amp;quot;      
##  [56] &amp;quot;ins&amp;quot;         &amp;quot;kbd&amp;quot;         &amp;quot;keygen&amp;quot;      &amp;quot;label&amp;quot;       &amp;quot;legend&amp;quot;     
##  [61] &amp;quot;li&amp;quot;          &amp;quot;link&amp;quot;        &amp;quot;main&amp;quot;        &amp;quot;mark&amp;quot;        &amp;quot;map&amp;quot;        
##  [66] &amp;quot;menu&amp;quot;        &amp;quot;meta&amp;quot;        &amp;quot;meter&amp;quot;       &amp;quot;nav&amp;quot;         &amp;quot;noscript&amp;quot;   
##  [71] &amp;quot;object&amp;quot;      &amp;quot;ol&amp;quot;          &amp;quot;optgroup&amp;quot;    &amp;quot;option&amp;quot;      &amp;quot;output&amp;quot;     
##  [76] &amp;quot;p&amp;quot;           &amp;quot;param&amp;quot;       &amp;quot;picture&amp;quot;     &amp;quot;pre&amp;quot;         &amp;quot;progress&amp;quot;   
##  [81] &amp;quot;q&amp;quot;           &amp;quot;rp&amp;quot;          &amp;quot;rt&amp;quot;          &amp;quot;ruby&amp;quot;        &amp;quot;s&amp;quot;          
##  [86] &amp;quot;samp&amp;quot;        &amp;quot;script&amp;quot;      &amp;quot;section&amp;quot;     &amp;quot;select&amp;quot;      &amp;quot;small&amp;quot;      
##  [91] &amp;quot;source&amp;quot;      &amp;quot;span&amp;quot;        &amp;quot;strong&amp;quot;      &amp;quot;style&amp;quot;       &amp;quot;sub&amp;quot;        
##  [96] &amp;quot;summary&amp;quot;     &amp;quot;sup&amp;quot;         &amp;quot;table&amp;quot;       &amp;quot;tbody&amp;quot;       &amp;quot;td&amp;quot;         
## [101] &amp;quot;template&amp;quot;    &amp;quot;textarea&amp;quot;    &amp;quot;tfoot&amp;quot;       &amp;quot;th&amp;quot;          &amp;quot;thead&amp;quot;      
## [106] &amp;quot;time&amp;quot;        &amp;quot;title&amp;quot;       &amp;quot;tr&amp;quot;          &amp;quot;track&amp;quot;       &amp;quot;u&amp;quot;          
## [111] &amp;quot;ul&amp;quot;          &amp;quot;var&amp;quot;         &amp;quot;video&amp;quot;       &amp;quot;wbr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;names(tags)&lt;/code&gt;는 총 114개의 함수로 구성되어 있고, 이 숫자 역시 shiny 패키지가 업데이트 될수록 함수가 늘어나는 양상을 띄고 있다. (예: Shiny 홈페이지에는 110개의 함수만 소개됨)&lt;/p&gt;
&lt;h2 id=&#34;iii-shiny-안에-tag-생성&#34;&gt;III. Shiny 안에 Tag 생성&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ui&lt;/code&gt; 내부에 별도로 &lt;code&gt;HTML tag&lt;/code&gt;를 생성하고 싶다면 아래와 같이 &lt;code&gt;tags&lt;/code&gt;를 활용하여 HTML 태그를 생성하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;예시-1-h1-tag&#34;&gt;예시 1. &lt;code&gt;h1 tag&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h1&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h1 tag&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;h1&amp;gt;h1 tag&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-2-div-tag-속성값-입력&#34;&gt;예시 2. &lt;code&gt;div tag 속성값 입력&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-3-div-태그-안에-p-태그-넣기&#34;&gt;예시 3. &lt;code&gt;div&lt;/code&gt; 태그 안에 &lt;code&gt;p&lt;/code&gt; 태그 넣기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;, checked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;p&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-4-div-태그-안에-p--a-태그-같이-넣기&#34;&gt;예시 4. &lt;code&gt;div&lt;/code&gt; 태그 안에 &lt;code&gt;p&lt;/code&gt; &amp;amp; &lt;code&gt;a&lt;/code&gt; 태그 같이 넣기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;, checked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;(href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Do it. Click Here!&amp;#34;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;a href=&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&amp;gt;Let&amp;#39;s Do it. # Click Here!&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-5-withtags-활용법&#34;&gt;예시 5. withTags 활용법&lt;/h2&gt;
&lt;p&gt;HTML tags를 활용하려면 지속적으로 &lt;code&gt;tags&lt;/code&gt;를 입력해야 하는 불편함이 있다. 그런데, &lt;code&gt;withTags&lt;/code&gt;를 활용하면 &lt;code&gt;tags&lt;/code&gt;를 중복적으로 사용하지 않아도 되는 장점이 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withTags&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;, checked&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;(href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Do it. Click Here!&amp;#34;&lt;/span&gt;)
  )
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;a href=&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&amp;gt;Let&amp;#39;s Do it.  Click Here!&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;웹프로그래머에게는 사실 매우 간단한 작업일 수도 있지만, Web 환경에 익숙하지 않은 데이터 분석가에게는 조금은 어려울 수 있다. 그러나, 오픈소스로 대시보드를 작업해야 한다면, HTML은 매우 중요한 작업이 될 가능성이 크다. 시각적으로 좋은 디자인일 수록, 가독성이 높은 대시보드일수록 클라이언트 또는 상급자가 쉽게 의사결정을 할 수 있도록 도와줄 수 있기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Grolemund, G., Cheng, J., &amp;amp; Cetinkaya-Rundel, M. (2017, August 9). Customize your UI with HTML. Retrieved from &lt;a href=&#34;https://shiny.rstudio.com/articles/html-tags.html&#34;&gt;https://shiny.rstudio.com/articles/html-tags.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered HTML content in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 02 - Shiny Structure</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_02/</link>
      <pubDate>Sun, 22 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_02/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-소개&#34;&gt;I. Shiny 소개&lt;/h2&gt;
&lt;p&gt;지난시간에 Shiny에 관한 대략적인 소개를 했다. 처음 이 페이지를 방문한 사람들 위해 &lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt; 에서 짧게 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-shiny-app-structure&#34;&gt;II. Shiny App Structure&lt;/h2&gt;
&lt;p&gt;아래 샘플 코드를 확인하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# load the shiny package&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# 화면 구성 (UI) - 프론트엔드&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample size&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hist&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# 서버 구성 - 벡엔드&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;n))
 
    &lt;span style=&#34;color:#75715e&#34;&gt;# 결과물을 만들어내는 코드 작성&lt;/span&gt;
    
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shiny app 호출&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 프로젝트 진행 시, 폴더 안에&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 파일명은 app.R 형태로 저장한다. &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7908
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_02/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;의 기본 구조는 &lt;code&gt;UI&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt; 형태로 구성이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UI&lt;/code&gt;: 사용자 인터페이스, 즉 화면단을 만드는 작업을 진행한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Server&lt;/code&gt;: 사용자 인터페이스가 제대로 기능할 수 있도록 지원하며, &lt;code&gt;Server&lt;/code&gt;단에서, 데이터 전처리, 수집, 시각화 작업이 이루어진다. 즉, 이 때에는 R의 문법이 사용되는 것이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shinyApp&lt;/code&gt;: &lt;code&gt;UI&lt;/code&gt;와 &lt;code&gt;Server&lt;/code&gt;객체별로 저장이 되면, &lt;code&gt;shinyApp&lt;/code&gt;을 통해 호출하면서 실행이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 App이 복잡하면 복잡해질 수록 &lt;code&gt;UI&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt;의 파일로 재구현되어 관리가 될 수 있으며, &lt;code&gt;Modularizing&lt;/code&gt;의 개념도 함께 들어간다. 즉, 이 때부터는 웹개발 로직의 형태와 비슷하게 전개되는데, 이제 프로그래밍에 입문하는 사람들을 위해서는 추천하지 않는다. &lt;code&gt;Shiny&lt;/code&gt;를 추천하는 이유는 빠른 프로토타입이 가능해서이기 때문에, 가급적 이 원칙을 지켰으면 좋겠다. 냉정하게 말하면 복잡해질 것 같으면, 여기서부터는 고민해야 한다. BI Tool을 쓸것인가? 아니면 프론트개발자와 협업을 할 것인가?&lt;/p&gt;
&lt;p&gt;만약, 조금 더 복잡한 &lt;code&gt;ShinyApp&lt;/code&gt;을 개발하고 싶다면, 아래 글에서 추가적인 개념을 익혔으면 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modularizing Shiny app code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardata.fr/en/post/2019/02/11/why-using-modules/&#34;&gt;Shiny Modules (part 1) : Why using modules?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다시 추가로 말하자면, 여기서부터는 &lt;code&gt;데이터분석가(Data Analyst)&lt;/code&gt;의 역량보다는 &lt;code&gt;프론트엔드 개발자(Front-End Developer)&lt;/code&gt;의 역량의 성격이 훨씬 더 짙어진다. 이 부분은 꼭 참고하기를 바란다.&lt;/p&gt;
&lt;h3 id=&#34;1-ui-또는-uir&#34;&gt;(1) ui 또는 ui.R&lt;/h3&gt;
&lt;p&gt;사용자에게 보여주는 화면을 만들어주는 역할을 하며, 보통 &lt;code&gt;Input &amp;amp; Output&lt;/code&gt; function으로 통용된다. 대표적인 함수는 아래와 같다.&lt;/p&gt;
&lt;p&gt;대표적인 &lt;code&gt;Input&lt;/code&gt; 관련 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textInput()&lt;/code&gt;: 사용자가 텍스트를 입력할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dateRangeInput()&lt;/code&gt;: 사용자가 날짜 등을 입력할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileInput()&lt;/code&gt;: 사용자가 csv파일 등을 입력할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대표적인 &lt;code&gt;Output&lt;/code&gt; 관련 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textOutput()&lt;/code&gt; : 입력한 텍스트가 출력된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tableOutput()&lt;/code&gt;: 데이터프레임 등이 출력된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imageOutput()&lt;/code&gt;: 이미지 등이 출력된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;조금 더 자세한 내용이 함수가 궁금하다면, 강사의 강의안을 참조하거나 또는 &lt;a href=&#34;https://shiny.rstudio.com/images/shiny-cheatsheet.pdf&#34;&gt;Shiny Cheet Sheet&lt;/a&gt;에서 확인하기를 바란다. 마지막으로 전체 함수가 궁금한 수강생들은 &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/1.0.5/&#34;&gt;Function Reference&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;이 때 중요한 것은 각 함수 안에서 &lt;code&gt;inputId=your_inputId&lt;/code&gt; 또는 &lt;code&gt;outputId=your_outputId&lt;/code&gt;가 중요하다. 각각의 ID명을 매개로 Server단과 연결이 되기 때문이다. 초반에 많은 에러들은 사실 여기에서 발생이 된다.&lt;/p&gt;
&lt;p&gt;아래 샘플 코드를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  Input(inputId = myinput, label = mylabel, ...)
  Output(outputId = myoutput, ...)
)

server &amp;lt;- function(input, output){
  output$myoutput &amp;lt;- render*({
    # code to build the output.
    # If it uses an input value (input$myinput),
    # the output will be rebuilt whenever
    # the input value changes
  })}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ui.R&lt;/code&gt;에 있는 &lt;code&gt;output&lt;/code&gt;의 &lt;code&gt;ID&lt;/code&gt;명과, &lt;code&gt;input&lt;/code&gt;의 &lt;code&gt;ID&lt;/code&gt;명이 &lt;code&gt;server.R&lt;/code&gt;의 그것과 동일해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;2-server-또는-serverr&#34;&gt;(2) server 또는 server.R&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ui&lt;/code&gt;에서 파라미터(&lt;code&gt;ex: outputId&lt;/code&gt;) 형태로 값이 넘어오면 파라미터를 받아서 처리하고 결과를 보여준다. &lt;code&gt;UI&lt;/code&gt;에 있는 &lt;code&gt;output()&lt;/code&gt;함수들의 각각의 구성요소는 &lt;code&gt;server&lt;/code&gt;에서 &lt;code&gt;render*()&lt;/code&gt; 함수와 연결이 된다. 예를 들면 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output$hist &amp;lt;- renderPlot({ 
    hist(rnorm(input$myinput)) 
  })
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;renderPlot()&lt;/code&gt;: 그래프 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderText()&lt;/code&gt;: 텍스트 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderTable()&lt;/code&gt;: 테이블 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단하게 ui와 server 관계를 정리하면 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ui()&lt;/code&gt; 에서는 &lt;code&gt;plotOutput(outputId = &amp;quot;myoutput&amp;quot;)&lt;/code&gt;, &lt;code&gt;server()&lt;/code&gt;에서는 &lt;code&gt;output$myoutput &amp;lt;- renderPlot({...})&lt;/code&gt; 정리될 수 있고, 이 때 두 객체를 연결하는 인자는 &lt;code&gt;ouputId&lt;/code&gt;인 &lt;code&gt;myouput&lt;/code&gt;이다.&lt;/p&gt;
&lt;h2 id=&#34;samples&#34;&gt;Samples&lt;/h2&gt;
&lt;p&gt;매우 간단한 소스코드를 입력하면서 &lt;code&gt;ui&lt;/code&gt;와 &lt;code&gt;server&lt;/code&gt;가 서로 어떻게 연동이 되는지 확인한다. 다만 이 때에는 &lt;code&gt;numericInput&lt;/code&gt;의 &lt;code&gt;label&lt;/code&gt;을 영어가 아닌 한글로 &lt;code&gt;샘플수&lt;/code&gt;라 명명했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 패키지 로드&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# ui 디자인&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myNumber&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;샘플수&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myHist&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# 서버 개발&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# myHist와 myNumber를 꼭 확인한다. &lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;myHist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;myNumber))
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shinyApp에서 ui와 server를 호출한다. &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:6753
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_02/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Shiny Structure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 01 - get started</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_01/</link>
      <pubDate>Sat, 21 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_01/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-소개&#34;&gt;I. Shiny 소개&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;는 &lt;code&gt;R&lt;/code&gt;에서 제공하는 일종의 &lt;code&gt;Web Framework&lt;/code&gt;이다. 기존 웹사이트와 다르게, 주요 목적은 데이터를 활용해서 대시보드를 만드는 것에 초점이 맞춰져 있다.&lt;/p&gt;
&lt;p&gt;가장 큰 장점은 &lt;code&gt;무료&lt;/code&gt;로 &lt;code&gt;빠른 프로토타입&lt;/code&gt;을 만들 수 있고, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;,  &lt;code&gt;Javascript&lt;/code&gt;와 직접적으로 호환이 되기 때문에 무한한 &lt;code&gt;확장성&lt;/code&gt;이 있다. 바로 중급 레벨에서 배우고 싶으시다면 &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;Intermediate Level&lt;/a&gt;을 클릭한다.&lt;/p&gt;
&lt;h2 id=&#34;1-유로-시각화-tool과-비교&#34;&gt;(1) 유로 시각화 Tool과 비교&lt;/h2&gt;
&lt;p&gt;기존에 시각화 Tool과 비교하는 가장 빠른 방법은 show room을 비교하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.powerbi.com/t5/Data-Stories-Gallery/bd-p/DataStoriesGallery&#34;&gt;Power BI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://public.tableau.com/en-us/gallery/?tab=viz-of-the-day&amp;amp;type=viz-of-the-day&#34;&gt;Tableau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/gallery/#user-showcase&#34;&gt;Shiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 차이는 있지만, &lt;code&gt;Shiny&lt;/code&gt;는 무료로 제작할 수가 있다. &lt;code&gt;Shiny&lt;/code&gt;는 꼭 알아두면 좋고, &lt;code&gt;Power BI&lt;/code&gt;와 &lt;code&gt;Tableau&lt;/code&gt;는 회사에서 도입하는 시스템을 따라가면 좋다. 참고로 강사가 사용했던 BI Tool은 &lt;code&gt;Power BI&lt;/code&gt;, &lt;code&gt;Google Data Studio&lt;/code&gt;가 있다. 그래도 &lt;code&gt;Shiny&lt;/code&gt;가 좋은 이유는 &lt;code&gt;HTML &amp;amp; CSS&lt;/code&gt;로 조금 더 미세한 작업을 가미할 수 있다는 점, 그리고 내가 원하는 그래프를 만들 수 있다는 점. 연구자 또는 개발자의 자유도가 높은 것이 &lt;code&gt;Shiny&lt;/code&gt;의 가장 큰 장점이다.&lt;/p&gt;
&lt;h2 id=&#34;2-어떤-역량을-키워야-할까&#34;&gt;(2) 어떤 역량을 키워야 할까?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;를 잘할려면 R은 기본이지만, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;JavaScript&lt;/code&gt;를 더 공부를 많이 해야 한다. 기존에 &lt;code&gt;Front-End&lt;/code&gt; 개발자라면, &lt;code&gt;R&lt;/code&gt;을 배워두면 데이터쪽 관련 일도 겸업할 수 있을 것 같다. 데이터 분석의 마지막은 결국엔 대시보드 개발과 연관이 깊다.&lt;/p&gt;
&lt;h2 id=&#34;3-sample-dashboard&#34;&gt;(3) Sample Dashboard&lt;/h2&gt;
&lt;p&gt;간단하게 &lt;code&gt;Shiny Sample&lt;/code&gt;을 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/source/&#34;&gt;Movie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/corona_19/&#34;&gt;코로나&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-어떤-툴을-사용해야-할까&#34;&gt;(4) 어떤 툴을 사용해야 할까?&lt;/h2&gt;
&lt;p&gt;사실 답하기 어렵다. 회사에 처한 환경과 본인이 속한 팀에 따라 Tool의 사용법과 의도가 달라지기 때문이다.&lt;/p&gt;
&lt;p&gt;그러나, 객관적으로 볼 때, &lt;code&gt;Power BI&lt;/code&gt;와 같은 Tool을 사용할 때는 한번 만들어진 대시보드를 지속적으로 사용하거나, 또한 주 사용자들이 프로그래밍에 익숙하지 않은 분들이 많은데, 회사의 자원이 넉넉한 대기업 또는 유니콘 같은 기업의 경우 비용을 들이더라도 &lt;code&gt;Power BI&lt;/code&gt; 툴을 사용하는 것이 좋다.&lt;/p&gt;
&lt;p&gt;반대로, &lt;code&gt;Shiny&lt;/code&gt;와 같은 오픈소스를 사용하려면 중소기업 또는 스타트업인데 데이터의 접근성이 보다 쉬운 경우 간단한 프로토타입 제작 및 저 비용으로 최고의 성과를 올릴 수 있는 장점이 있다. 여기에서 업무성과가 지속적으로 나오고 &lt;code&gt;데이터 대시보드 개발 및 활용&lt;/code&gt;의  사내 분위기가 꾸준하게 조성이 되면  &lt;code&gt;Shiny Enterprise&lt;/code&gt; 또는 &lt;code&gt;Power BI&lt;/code&gt; 같은 유료 툴로 전환하는 것이다.&lt;/p&gt;
&lt;p&gt;Power BI Vs. R Shiny의 관점보다는 결국 &amp;lsquo;어떻게 대시보드를 활용할 것인가?&amp;lsquo;라는 기본적인 전제가 마련이 되면 무엇을 사용하더라도 조직의 성과에 기여할 것은 자명하다.&lt;/p&gt;
&lt;h2 id=&#34;ii-get-started&#34;&gt;II. Get Started&lt;/h2&gt;
&lt;p&gt;Shiny 프로젝트를 시작하는 것은 간단하다.&lt;/p&gt;
&lt;p&gt;[File] - [New Directory] - [Shiny Web Application] - [Working Directory] 순서대로 작업하면 된다.&lt;/p&gt;
&lt;p&gt;그러면 아래와 같은 폴더 구조(tree)가 되어 있을 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── app.R
└── test.Rproj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;app.R&lt;/code&gt; 파일을 열면 아래와 같은 Sample 소스코드가 있을 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is a Shiny web application. You can run the application by clicking&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the &amp;#39;Run App&amp;#39; button above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins &lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
           &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define server logic required to draw a histogram&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {

    output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;distPlot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
        &lt;span style=&#34;color:#75715e&#34;&gt;# generate bins based on input$bins from ui.R&lt;/span&gt;
        x    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; faithful[, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(x), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x), length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# draw the histogram with the specified number of bins&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(x, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bins, col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkgray&amp;#39;&lt;/span&gt;, border &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;)
    })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the application &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:3205
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;전체 소스코드를 실행하면 아래와 같은 이미지 형태의 그래프가 나오면 이제 여러분들도 Shiny App을 만든 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_01/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Congratulation!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R Markdown Introduction</title>
      <link>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</link>
      <pubDate>Wed, 18 Mar 2020 13:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</guid>
      <description>&lt;h2 id=&#34;r-markdown-소개-및-환경설정&#34;&gt;R Markdown 소개 및 환경설정&lt;/h2&gt;
&lt;p&gt;데이터 분석가의 주요 업무 중의 하나는 향후에 참고자료로 활용하기 위해 작업결과를 문서화 해야 하는데, 상당량의 보고서를 작성해서 분석과정과 출력결과를 기술해야만 합니다.&lt;/p&gt;
&lt;p&gt;보통의 과정은 아래과 같을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1단계: 본인의 작업을 위해서 R 스크립트 작성&lt;/li&gt;
&lt;li&gt;2단계: 다양한 그래프가 첨부된 분석결과를 Word, PPT 분석결과를 기술해서 동료 또는 메신저로 분석결과 전송&lt;/li&gt;
&lt;li&gt;3단계: 분석결과 토의&lt;/li&gt;
&lt;li&gt;4단계: 각각의 그래프 결과 코드를 매칭하기 위한 작업이 토의 중 발생&lt;/li&gt;
&lt;li&gt;5단계: 혼란 및 불필요한 시간 소요 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데, 해당 작업물을 그 때 마다 웹페이지(HTML)을 생성하여 자체 서버내 구축할 수 있다면, 그러면 위 5단계의 과정을 3단계(&lt;strong&gt;소스코드 작성&lt;/strong&gt; -&amp;gt; &lt;strong&gt;웹 게시&lt;/strong&gt; -&amp;gt; &lt;strong&gt;분석결과 토의&lt;/strong&gt;)로 축소할 수가 있을 것이며 특히, 연구자가 분석 당시의 고민과 문제점들을 스크롤링과 함께 같이 고민할 수 있는 시간으로 빠져들 수 있도록 유도할 수 있습니다.&lt;/p&gt;
&lt;p&gt;데이터 분석 보고서는 보고서의 작성이 연구자의 끝이 아니기 때문에 분석의 과정과 결과물을 잘 정리하여 의사결정을 하는데 반드시 도움이 되어야 하는 일종의 제안서와 같습니다.&lt;/p&gt;
&lt;p&gt;본 게시물은 R을 처음 접하는 데이터 분석가를 위해서 작성하였습니다. 사내의 보고서 문화 혁신에 기여하기를 바라는 마음과 함께!!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-r-마크다운-파일-생성&#34;&gt;Step 1. R 마크다운 파일 생성&lt;/h2&gt;
&lt;p&gt;R 마크다운 파일 생성은 아래와 같이 생성할 수 있습니다.
RStudio에서 File -&amp;gt; New File -&amp;gt; R Markdown을 클릭하시면 아래와 같이 대화상자가 열립니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdown.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Title과 Author를 설정 한 후 HTML로 클릭합니다.&lt;/p&gt;
&lt;h2 id=&#34;step-2-r-마크다운-기본-구성요소&#34;&gt;Step 2. R 마크다운 기본 구성요소&lt;/h2&gt;
&lt;p&gt;기본 구조는 아래와 같이 확인 될 것입니다.
&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownbasic.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;구성-1-header&#34;&gt;구성 1. Header&lt;/h3&gt;
&lt;p&gt;초기 설정된 텍스트 덩어리에 R에 대한 지시사항이 담겨있다: 제목, 저자명, 날짜, html 출력물(다른 말로, 웹페이지)을 생성할지가 포함됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 필드는 임의 삭제가 가능하나, 경험적으로는 포함 시키는 것이 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;구성-2-r-코드-덩어리---set-up&#34;&gt;구성 2. R 코드 덩어리 - Set Up&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;위 구성은 R 마크다운 문서의 기본 Set Up 코드이기 때문에 유지하는 것을 원칙으로 합니다. 위 코드 상 옵션에 대한 설명은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup: 소스코드 덩어리에 대한 title이며, 다른 소스코드 덩어리와 중복 작성 시, 에러가 발생합니다.&lt;/li&gt;
&lt;li&gt;include=FALSE: 문서에는 포함시키지 않고, 몰래 실행할 수 있으며, 주로 최초 설정에 이용됩니다.&lt;/li&gt;
&lt;li&gt;knitr::opts_chunk$set에서 디폴트 옵션을 설정할 수 있으며, echo = TRUE는 코드를 보여줍니다. 그 외 옵션은 아래를 확인하여 주시기를 바랍니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eval = F&lt;/strong&gt;: 코드 실행하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo = F&lt;/strong&gt;: 코드를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;include=F&lt;/strong&gt;: 실행 결과를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message=F&lt;/strong&gt;: 실행 때 나오는 메세지를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warning=F&lt;/strong&gt;: 실행 때 나오는 경고를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error=T&lt;/strong&gt;: 에러가 있어도 실행하고 에러코드를 보여준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.height=(number)&lt;/strong&gt;: R에서 작성한 그래프를 그림의 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.width=(number)&lt;/strong&gt;: R에서 작성한 그림의 넓이를 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.align=&#39;center&amp;rsquo;&lt;/strong&gt; : R에서 작성한 그림의 위치를 변경할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외 옵션을 확인하려면 아래와 같이 코드를 입력 후 실행하면 결과값이 나옵니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;구성-3-r-코드-덩어리---작업코드-예제&#34;&gt;구성 3. R 코드 덩어리 - 작업코드 예제&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;code&gt;knitr&lt;/code&gt;로 실행되면, R 코드 덩어리를 실행결과와 함께 나타납니다.&lt;/p&gt;
&lt;h2 id=&#34;step-3-마크다운markdown문법에-대한-이해&#34;&gt;Step 3. 마크다운(Markdown)문법에 대한 이해&lt;/h2&gt;
&lt;p&gt;마크다운은 2004년 12월에 처음 등장한 것으로 보입니다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 마크다운을 활용하여 작성된 문서는 보다 쉽고 빠르게 HTML 등 다른 문서 형태로 변환이 가능합니다. 특별히, R Markdown은 R사용자를 위한 Markdown으로 이해하시면 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;기본문법-1-bold--italic&#34;&gt;기본문법 1. Bold &amp;amp; Italic&lt;/h3&gt;
&lt;p&gt;별표&lt;code&gt;*&lt;/code&gt;를 활용하여 굵게 또는 이탤릭체로 변환할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;굵게&lt;/strong&gt;: &lt;code&gt;**굵게(bold)**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이탤릭&lt;/em&gt;: &lt;code&gt;*이탤릭(italic)*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;기본문법-2-구분점&#34;&gt;기본문법 2. 구분점&lt;/h3&gt;
&lt;p&gt;아래와 같이 하이픈&lt;code&gt;-&lt;/code&gt; 혹은 별표&lt;code&gt;*&lt;/code&gt;를 적용해서 구분점이 붙은 항목을 생성할 수 있습니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;혹은 아래와 같이 작성도 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;숫자 사용을 활용한 구분점도 아래와 같이 적용하면 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;기본문법-3-섹션-제목-만들기&#34;&gt;기본문법 3. 섹션 제목 만들기&lt;/h3&gt;
&lt;p&gt;섹션 제목을 만들려면 &lt;code&gt;#&lt;/code&gt;  기호를 활용하여 각 라인 첫번째 적용하게 되면 다른 크기를 갖는 섹션 제목을 만들 수 있을 뿐만 아니라, 위 섹션이 목차로 재 활용될 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 첫번째 제목 (Title)
## 두번째 제목 (Main Section)
### 세번째 제목 (Sub-Section)
#### 네번째 제목 (Sub-sub section)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;첫번째-제목-title&#34;&gt;첫번째 제목 (Title)&lt;/h1&gt;
&lt;h2 id=&#34;두번째-제목-main-section&#34;&gt;두번째 제목 (Main Section)&lt;/h2&gt;
&lt;h3 id=&#34;세번째-제목-sub-section&#34;&gt;세번째 제목 (Sub-Section)&lt;/h3&gt;
&lt;h4 id=&#34;네번째-제목-sub-sub-section&#34;&gt;네번째 제목 (Sub-sub Section)&lt;/h4&gt;
&lt;h2 id=&#34;step-4-마크다운markdown-다양한-기능-사용&#34;&gt;Step 4. 마크다운(Markdown) 다양한 기능 사용&lt;/h2&gt;
&lt;h3 id=&#34;기능-1-하이퍼링크&#34;&gt;기능 1. 하이퍼링크&lt;/h3&gt;
&lt;p&gt;독립적으로 링크 코드를 입력하거나, 또는 문장 중간에 삽입이 가능합니다. 아래와 같은 방법으로 입력하시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: [text](링크)
예시: [네이버](https://www.naver.com)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;네이버 클릭하시면(&amp;amp;#8594) &lt;a href=&#34;https://www.naver.com&#34;&gt;네이버&lt;/a&gt; 네이버 메인 화면에 연결됩니다.&lt;/p&gt;
&lt;h3 id=&#34;기능-2-이미지-삽입&#34;&gt;기능 2. 이미지 삽입&lt;/h3&gt;
&lt;p&gt;아래와 같은 방법으로 이미지를 삽입할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: ![caption](경로)
예시: ![rmarkdownlogo](./rmarkdownlogo.jpeg)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownlogo.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;다만, image size 작업 조정을 직접 하려면 R 코드 덩어리에 아래와 같은 방법으로 작업할수도 있습니다. (예: out.width=&amp;quot;400px&amp;rdquo;, out.height=&amp;quot;400px&amp;rdquo;)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;다만, 경험적으로 봤을 때는 개별 이미지를 수정하려면 HTML 소스 코드 또는 소스코드를 직접 입력하는 것을 권장합니다.&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;
test.Rmd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
css&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; test.css
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;## Page with an image {#myImagePage}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[Image&lt;span style=&#34;color:#a6e22e&#34;&gt;]&lt;/span&gt;(path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;image)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;기능-3-latex-expression&#34;&gt;기능 3. LaTeX expression&lt;/h3&gt;
&lt;p&gt;수식작성법은 &lt;a href=&#34;https://www.latex-project.org/&#34;&gt;Latex&lt;/a&gt;라는 문법을 참조해서 작성할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$&lt;/p&gt;
&lt;h3 id=&#34;기능-4-인라인inline-r-코드&#34;&gt;기능 4. 인라인(Inline) R 코드&lt;/h3&gt;
&lt;p&gt;인라인 R코드를 활용하는 가장 궁극적인 목적은 보고서의 모든 숫자를 재현가능하게 만들기 위해서입니다. 인라인 코드를 작성할 때 &lt;!-- raw HTML omitted --&gt;`r&lt;!-- raw HTML omitted --&gt;와 &lt;!-- raw HTML omitted --&gt;`&lt;!-- raw HTML omitted --&gt;을 사용합니다. 예를 들어, &lt;!-- raw HTML omitted --&gt;`r 2+2`&lt;!-- raw HTML omitted --&gt; 또는 &lt;!-- raw HTML omitted --&gt;`r round(some_value, 2)`&lt;!-- raw HTML omitted --&gt; . R 코드가 실행되어 코드가 결과 값으로 치환됩니다.&lt;/p&gt;
&lt;h2 id=&#34;step-5-다른-언어와의-호환성-고급&#34;&gt;Step 5. 다른 언어와의 호환성 (고급)&lt;/h2&gt;
&lt;p&gt;R과 함께 파이썬 또는 SQL을 다루는 머신러닝 개발자가 있다고 가정합니다. 그러면 R Markdown 안에서도 python 코드를 실행 후 작업할 수가 있습니다. 다만, 이때에는 코드 덩어리를 파이썬 또는 sql로 명명해야 적용이 가능합니다.&lt;/p&gt;
&lt;p&gt;예를 들면 아래와 같이 작성이 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;option-더-공부하기&#34;&gt;(Option) 더 공부하기&lt;/h2&gt;
&lt;p&gt;위에서 제공한 자료를 가지고도 충분히 보고서를 작성하는데는 부족함이 없습니다. 다만, 보고서를 조금 더 풍성하게 만들고자 한다면 메뉴얼을 참고해서 보다 전문적으로 작성하는 권장합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown 공식 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34;&gt;R 마크다운 공식 메뉴얼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf&#34;&gt;R 마크다운 Cheet Sheet  PDF 파일 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;a href=&#34;mailto:j2hoon85@gmail.com&#34;&gt;j2hoon85@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;R Markdown 기초&amp;rdquo;, &amp;ldquo;Zarathu Official Blog&amp;rdquo;, 2019년 1월 3일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&#34;&gt;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;Markdown&amp;rdquo;, &amp;ldquo;Daring Fireball&amp;rdquo;, 2004년 12월 17일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;https://daringfireball.net/projects/markdown/&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Leaflet for R</title>
      <link>https://chloevan.github.io/r/graph01_leaflet/</link>
      <pubDate>Tue, 17 Mar 2020 20:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/graph01_leaflet/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Leaflet&lt;/code&gt; 패키지는 동적 지도 시각화를 위한 자바스크립트-오픈소스 기반 라이브러리입니다. 일반적인 기업 회사 뿐만 아니라 GIS 전문 회사인 &lt;a href=&#34;http://www.openstreetmap.org/&#34;&gt;OpenStreetMap&lt;/a&gt;, &lt;a href=&#34;http://www.mapbox.com/&#34;&gt;Mapbox&lt;/a&gt;, 그리고 &lt;a href=&#34;http://cartodb.com/&#34;&gt;CartoDB&lt;/a&gt;에서도 이 패키지를 사용하고 있습니다.&lt;/p&gt;
&lt;p&gt;R의 &lt;code&gt;leaflet&lt;/code&gt; 패키지는 일종의 자바스크립트의 &lt;code&gt;Leaflet&lt;/code&gt;을 쉽게 연동(Integrate) 할 수 있도록 도와 주는 패키지입니다.&lt;/p&gt;
&lt;h2 id=&#34;2-features&#34;&gt;2. Features&lt;/h2&gt;
&lt;p&gt;패키지의 주요 특징은 아래와 같습니다. 오역 방지를 위해 원문에 있는 내용을 그대로 사용했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interactive panning/zooming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compose maps using arbitrary combinations of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map tiles&lt;/li&gt;
&lt;li&gt;Markers&lt;/li&gt;
&lt;li&gt;Polygons&lt;/li&gt;
&lt;li&gt;Lines&lt;/li&gt;
&lt;li&gt;Popups&lt;/li&gt;
&lt;li&gt;GeoJSON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create maps right from the R console or RStudio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embed maps in knitr/R Markdown documents and Shiny apps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R 마크다운과 Shiny Apps에 연동이 쉽게 되는 장점이 있습니다.&lt;/li&gt;
&lt;li&gt;이는 보고서 작성 또는 대시보드 작성에 위 패키지를 연동할 수 있는 큰 장점이 있기 때문에 지도 분석과 관련된 업무를 하시는 분에게는 특히 강력히 추천합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easily render spatial objects from the &lt;code&gt;sp&lt;/code&gt; or &lt;code&gt;sf&lt;/code&gt; packages, or &lt;code&gt;data frames&lt;/code&gt; with &lt;code&gt;latitude/longitude&lt;/code&gt; columns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use map bounds and mouse events to drive &lt;code&gt;Shiny&lt;/code&gt; logic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display maps in non spherical mercator projections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Augment map features using chosen plugins from &lt;a href=&#34;http://leafletjs.com/plugins&#34;&gt;leaflet plugins repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-installation&#34;&gt;3. Installation&lt;/h2&gt;
&lt;p&gt;R 에디터 또는 콘솔창에서는 아래와 같이 입력 후 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;leaflet&amp;quot;)
# to install the development version from Github, run
# devtools::install_github(&amp;quot;rstudio/leaflet&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 한번 설치가 된 이후에는 &lt;a href=&#34;http://rmarkdown.rstudio.com/&#34;&gt;R마크다운&lt;/a&gt; 또는 &lt;a href=&#34;http://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt;앱에서 &lt;code&gt;library(leaflet)&lt;/code&gt;을 호출하여 사용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;4-basic-usage&#34;&gt;4. Basic Usage&lt;/h2&gt;
&lt;p&gt;보통 아래와 같은 단계로 사용을 합니다. &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2&lt;/a&gt; 패키지를 사용하시는 분들은 데이터 + 기하함수 + 설정 등 이러한 형태로 코드를 작성한 기억을 떠올리시면 쉽게 이해가 되실 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 &lt;code&gt;leaflet()&lt;/code&gt; 함수에 데이터프레임을 넣은 후 map 객체를 생성합니다.&lt;/li&gt;
&lt;li&gt;그다음 특징에 맞춰서 layer 관련 함수를 추가합니다.
&lt;ul&gt;
&lt;li&gt;addTiles()&lt;/li&gt;
&lt;li&gt;addMarkers()&lt;/li&gt;
&lt;li&gt;addPolygons()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 함수들을 연결할 때에는 Pipe Operator인 R의 강력한 무기인 &lt;code&gt;%&amp;gt;%&lt;/code&gt;을 사용합니다.&lt;/li&gt;
&lt;li&gt;만약에 &lt;code&gt;%&amp;gt;%&lt;/code&gt;인 익숙하지 않다면 &lt;a href=&#34;https://github.com/smbache/magrittr&#34;&gt;magrittr&lt;/a&gt; 에서 구체적인 내용을 살펴봅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단한 그래프를 작성합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(leaflet)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(htmlwidgets)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(htmltools)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(widgetframe)

m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addTiles&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Add default OpenStreetMap map tiles&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;addMarkers&lt;/span&gt;(lng&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;174.768&lt;/span&gt;, lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-36.852&lt;/span&gt;, popup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The birthplace of R&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;saveWidget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;frameableWidget&lt;/span&gt;(m),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leaflet.html&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과물은 다음을 클릭해서 확인합니다. &lt;a href=&#34;https://chloevan.github.io/r/leaflet.html&#34;&gt;https://chloevan.github.io/r/leaflet.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tensorflow For R - Quick Start</title>
      <link>https://chloevan.github.io/r/settings01_installation/</link>
      <pubDate>Mon, 16 Mar 2020 20:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/settings01_installation/</guid>
      <description>&lt;h2 id=&#34;1-개요-overview&#34;&gt;1. 개요 (Overview)&lt;/h2&gt;
&lt;p&gt;tensorflow(텐서플로) R 패키지를 사용하기 전에 시스템에 TensorFlow 버전을 설치해야 한다. 아래에서는 TensorFlow 설치 방법과 설치 사용자 정의에 사용할 수 있는 다양한 옵션에 대해 설명 한다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 주로 R &lt;code&gt;install_tensorflow()&lt;/code&gt; 함수의 사용을 다루며, 이는 TensorFlow를 설치하는 데 필요한 다양한 단계에서 &lt;code&gt;wrapper&lt;/code&gt; 쉽게 사용할 수 있도록 도와 준다.&lt;/p&gt;
&lt;p&gt;Tensorflow(텐서플로)는 아래와 같은 OS 환경에서 구동이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04 or later&lt;/li&gt;
&lt;li&gt;Windows 7 or later&lt;/li&gt;
&lt;li&gt;macOS 10.12.6 (Sierra) or later (no GPU support)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-설치-installation&#34;&gt;2. 설치 (Installation)&lt;/h2&gt;
&lt;p&gt;R 패키지 설치하는 방법과 동일하다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34; data-lang=&#34;{r}&#34;&gt;&amp;gt; install.packages(&amp;quot;tensorflow&amp;quot;)
&amp;gt; library(tensorflow)
&amp;gt; install_tensorflow()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설치를 진행한 이후에는 &lt;code&gt;install_tensorflow()&lt;/code&gt; 함수를 사용해서 설치를 최종적으로 완료한다. 이 때 &lt;code&gt;Python&lt;/code&gt; 관련 모듈도 같이 설치 될 수 있다.
&lt;strong&gt;중요&lt;/strong&gt; 윈도우 사용자는 꼭 &lt;a href=&#34;https://www.anaconda.com/distribution/&#34;&gt;Anaconda&lt;/a&gt;를 설치한다.&lt;/p&gt;
&lt;p&gt;실제로 설치가 잘 되었는지는 다음 코드를 통해서 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34; data-lang=&#34;{r}&#34;&gt;&amp;gt; tf$constant(&amp;quot;Hellow Tensorflow&amp;quot;)
## tf.Tensor(b&#39;Hellow Tensorflow&#39;, shape=(), dtype=string)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 코드가 나온다면 설치는 잘 된 것이다.&lt;/p&gt;
&lt;h2 id=&#34;3-다양한-설치-방법들-installation-methods&#34;&gt;3. 다양한 설치 방법들 (Installation Methods)&lt;/h2&gt;
&lt;p&gt;TensorFlow는 Python 패키지로 배포되는 시스템이기 때문에 Python 환경 내에 설치해야 합니다. 기본적으로 &lt;code&gt;install_tensorflow()&lt;/code&gt; 함수는 격리 된 Python 환경 ( &amp;ldquo;r-reticulate&amp;rdquo;) 내에 TensorFlow 설치를 시도하는 것이다.&lt;/p&gt;
&lt;p&gt;이쯤에서 느꼈겠지만 &amp;lsquo;내가 꼭 딥러닝을 하고 싶어 한다.&amp;rsquo; 그런데, Python을 잘 모른다. 그래도 Python을 배우는 것을 추천한다. Python과 관련된 예제도 에러해결법도 많을 뿐더러 특히 환경상의 문제가 생겼을 때에는 결국엔 Python 환경에서 해결해야 하기 때문에 그렇다. 나는 전통적인 R 유저이지만, 나 역시 딥러닝은 Python을 사용하려고 노력한다.&lt;/p&gt;
&lt;p&gt;어찌 되었든 사용 가능한 방법과 동작은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Method&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;auto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;현재 플랫폼에 적합한 환경을 자동으로 선택한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;virtualenv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Python 가상환경을 &lt;code&gt;~/.virtualenvs/r-reticulate&lt;/code&gt;에 설치한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;conda&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;가상환경을 Anaconda Python &lt;code&gt;r-reticulate&lt;/code&gt;에 설치한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;system&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;가상환경을 Python 환경에 설치한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;막상 정리하고 보니, 다시 딥러닝을 하는데 꼭 R을 써야 하나 하는 생각이 든다. 여기서 주의해야 할 것은 &lt;code&gt;Windows&lt;/code&gt;에서는 &lt;code&gt;conda&lt;/code&gt; 환경만 가능하다.&lt;/p&gt;
&lt;p&gt;R에서 tensorflow는 어려운 편은 아니지만, 결국엔 Python이 사용하는 환경을 쓴다는 점은 여러모로 아쉬운 점이 있기는 하다.&lt;/p&gt;
&lt;h2 id=&#34;참고-reference&#34;&gt;참고 (Reference)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allaire, J. J. (n.d.). TensorFlow for R. Retrieved March 16, 2020, from &lt;a href=&#34;https://tensorflow.rstudio.com/installation/&#34;&gt;https://tensorflow.rstudio.com/installation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;End of Document&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stat01_hypothesis</title>
      <link>https://chloevan.github.io/r/stat01_hypothesis/</link>
      <pubDate>Sun, 15 Mar 2020 21:23:58 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/stat01_hypothesis/</guid>
      <description>&lt;h2 id=&#34;가설-설정&#34;&gt;가설 설정&lt;/h2&gt;
&lt;h2 id=&#34;가설의-유형&#34;&gt;가설의 유형&lt;/h2&gt;
&lt;h3 id=&#34;1-귀무가설&#34;&gt;(1) 귀무가설&lt;/h3&gt;
&lt;p&gt;~&lt;/p&gt;
&lt;h3 id=&#34;2-연구가설&#34;&gt;(2) 연구가설&lt;/h3&gt;
&lt;p&gt;~~&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>