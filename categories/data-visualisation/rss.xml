<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualisation on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/categories/data-visualisation/</link>
    <description>Recent content in Data Visualisation on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 18:15:47 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/categories/data-visualisation/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EDA with Python - Pandas</title>
      <link>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</link>
      <pubDate>Mon, 01 Jun 2020 18:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/02_datatransformation/pandas_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pandas&lt;/code&gt;는 &lt;code&gt;panel data&lt;/code&gt;의 의미를 가지고 있다.&lt;/li&gt;
&lt;li&gt;흔히, 엑셀 데이터로 불리우는 &lt;code&gt;관계형(Relational)&lt;/code&gt; 또는 &lt;code&gt;레이블링된(Labeling)&lt;/code&gt;된 데이터를 보다 쉽게, 직관적으로 작업할 수 있도록 설계되어 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;에서 데이터 분석을 수행하기 위한 매우 기초적이며 높은 수준의 문법을 제공한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pandas&lt;/code&gt;는 크게 &lt;code&gt;Series&lt;/code&gt; &amp;amp; &lt;code&gt;DataFrame&lt;/code&gt;을 다룰 수 있도록 기초 문법을 제공하고 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pandas&lt;/code&gt;가 다루는 여러 종류의 데이터를 확인해보자.
&lt;ul&gt;
&lt;li&gt;SQL 테이블 또는 Excel 스프레드시트에서와 같이 형식의 행과 열이 있는 표 형식 데이터&lt;/li&gt;
&lt;li&gt;순서 및 순서 지정되지 않은(고정 빈도일 필요는 없음) 시계열 데이터.&lt;/li&gt;
&lt;li&gt;행 및 열 레이블이 있는 임의 행렬 데이터(동일하게 입력 또는 이기종)&lt;/li&gt;
&lt;li&gt;기타 형태의 관측/통계 데이터 세트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-모듈-import&#34;&gt;II. 모듈 Import&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;패키지 설치방법은 &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html&#34;&gt;설치 문서&lt;/a&gt;를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
print(pd.__version__)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;1.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-pandas-기본-활용법&#34;&gt;III. Pandas 기본 활용법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pandas&lt;/code&gt;가 제공하는 다양한 기능은 다음과 같지만, 본 튜토리얼에서는 &lt;code&gt;Sample&lt;/code&gt; 위주로 다루도록 한다.
&lt;ul&gt;
&lt;li&gt;부동 소수점 데이터뿐만 아니라 부동 소수점 데이터에서도 결측 데이터(NaN으로 표시됨)를 쉽게 처리함&lt;/li&gt;
&lt;li&gt;크기 변이성: DataFrame 및 고차원 객체에서 열을 삽입 및 삭제 가능&lt;/li&gt;
&lt;li&gt;자동 및 명시적 데이터 정렬: 객체를 라벨 집합에 명시적으로 정렬하거나, 사용자가 라벨을 무시하고 &lt;code&gt;Series&lt;/code&gt;, &lt;code&gt;DataFrame&lt;/code&gt; 등이 자동으로 데이터를 계산에서 정렬 가능&lt;/li&gt;
&lt;li&gt;데이터 집합에서 데이터 집합의 분할 적용 결합 작업을 수행할 수 있는 기능&lt;/li&gt;
&lt;li&gt;다른 &lt;code&gt;Python&lt;/code&gt; 및 &lt;code&gt;NumPy&lt;/code&gt; 데이터 구조에서 색인이 다른 데이터를 &lt;code&gt;DataFrame&lt;/code&gt; 개체로 쉽게 변환&lt;/li&gt;
&lt;li&gt;지능형 라벨 기반 슬라이싱, 고급 인덱싱 및 대용량 데이터 세트 부분 집합 취하기&lt;/li&gt;
&lt;li&gt;직관적인 데이터 세트 병합 및 결합&lt;/li&gt;
&lt;li&gt;유연한 데이터 세트 재구성 및 피벗테이블 구성&lt;/li&gt;
&lt;li&gt;축의 계층적 라벨링(눈금당 여러 개의 라벨을 가질 수 있음)&lt;/li&gt;
&lt;li&gt;플랫 파일(CSV 및 구분), Excel 파일, 데이터베이스 로딩 및 초고속 HDF5 형식의 데이터 저장/로딩에 사용되는 강력한 데이터 IO 도구&lt;/li&gt;
&lt;li&gt;시계열별 기능: 날짜 범위 생성 및 주파수 변환, 이동 창 통계, 날짜 이동 및 지연.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-pandas-sample-tutorial&#34;&gt;IV. Pandas Sample Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단하게 &lt;code&gt;Pandas&lt;/code&gt;를 활용한 &lt;code&gt;Tutorial&lt;/code&gt;을 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-파라미터-세팅&#34;&gt;(1) 파라미터 세팅&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;먼저, 행과 열을 최대 출력하는 개수를 지정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pd.set_option(&#39;display.max_columns&#39;, 500)
pd.set_option(&#39;display.max_rows&#39;, 500)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-데이터-생성&#34;&gt;(2) 데이터 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 생성하는 방법은 크게 2가지로 구분된다. (&lt;code&gt;Series&lt;/code&gt;, &lt;code&gt;DataFrame&lt;/code&gt;)
&lt;img src=&#34;https://chloevan.github.io/img/python_edu/01_basic/series_dataframe.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;Series&lt;/code&gt;를 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;temp_series = pd.Series([1,2,3,5,8,13,21])
print(temp_series)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;0     1
1     2
2     3
3     5
4     8
5    13
6    21
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이제 &lt;code&gt;Series&lt;/code&gt;에 있는 데이터와 함께 &lt;code&gt;DataFrame&lt;/code&gt;을 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;series_df = pd.DataFrame({
    &amp;quot;No&amp;quot;:range(1,5), 
    &amp;quot;날짜&amp;quot;:pd.Timestamp(&#39;20200601&#39;), 
    &amp;quot;출석점수&amp;quot;:pd.Series(5, index=list(range(4)), dtype=&#39;float64&#39;), 
    &amp;quot;등급&amp;quot;:pd.Categorical([&amp;quot;A등급&amp;quot;, &amp;quot;B등급&amp;quot;, &amp;quot;C등급&amp;quot;, &amp;quot;D등급&amp;quot;]), 
    &amp;quot;구분&amp;quot;:&amp;quot;학점&amp;quot;
})

print(series_df)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;   No         날짜  출석점수   등급  구분
0   1 2020-06-01   5.0  A등급  학점
1   2 2020-06-01   5.0  B등급  학점
2   3 2020-06-01   5.0  C등급  학점
3   4 2020-06-01   5.0  D등급  학점
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 딕셔너리에서 데이터프레임으로 변환하는 소스코드다.&lt;/li&gt;
&lt;li&gt;아래 코드에서 보여주고자 하는 것은 딕셔너리의 크기가 동일하지 않아도, 데이터프레임으로 변환되는데 문제가 없다.&lt;/li&gt;
&lt;li&gt;다만, &lt;code&gt;NaN&lt;/code&gt;으로 채울 뿐이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;dict_df = [{&#39;가&#39;: &#39;사과&#39;, &#39;나&#39;: &#39;볼&#39;},{&#39;가&#39;: &#39;비행기&#39;, &#39;나&#39;: &#39;방망이&#39;, &#39;다&#39;: &#39;고양이&#39;}]
dict_df = pd.DataFrame(dict_df)
print(dict_df)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;     가    나    다
0   사과    볼  NaN
1  비행기  방망이  고양이
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 배열에서 데이터프레임으로 변환하는 소스코드다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;sdf = {
    &#39;국가&#39;:[&#39;한국&#39;, &#39;미국&#39;, &#39;일본&#39;],
    &#39;ISO-Code&#39;:[1,2,3],
    &#39;지역&#39;: [4180.69, 4917.94, 454.07,],
    &#39;위치&#39;: [&amp;quot;서울&amp;quot;, &amp;quot;LA&amp;quot;, &amp;quot;동경&amp;quot;]
    }
sdf = pd.DataFrame(sdf)
print(sdf)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;   국가  ISO-Code       지역  위치
0  한국         1  4180.69  서울
1  미국         2  4917.94  LA
2  일본         3   454.07  동경
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-파일-입출력&#34;&gt;(3) 파일 입출력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;외부 데이터의 파일 입출력에 대한 코드를 입력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;url = &#39;http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data&#39;
df = pd.read_csv(url)
print(df.head(2))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;   39          State-gov   77516   Bachelors   13        Never-married  \
0  50   Self-emp-not-inc   83311   Bachelors   13   Married-civ-spouse   
1  38            Private  215646     HS-grad    9             Divorced   

         Adm-clerical   Not-in-family   White   Male   2174   0   40  \
0     Exec-managerial         Husband   White   Male      0   0   13   
1   Handlers-cleaners   Not-in-family   White   Male      0   0   40   

    United-States   &amp;lt;=50K  
0   United-States   &amp;lt;=50K  
1   United-States   &amp;lt;=50K  
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;컬럼명이 지정되지 않아 관측값이 컬럼명 위치에 있는 것을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;이 때에는 컬럼명을 먼저 저장한 뒤, 아래와 같은 코드로 실행하면 정상적으로 데이터프레임이 완성된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;columns = [&#39;age&#39;, &#39;workclass&#39;, &#39;fnlwgt&#39;, &#39;education&#39;, &#39;education_num&#39;, 
           &#39;marital_status&#39;, &#39;occupation&#39;, &#39;relationship&#39;, &#39;ethnicity&#39;, 
           &#39;gender&#39;,&#39;capital_gain&#39;,&#39;capital_loss&#39;,&#39;hours_per_week&#39;,&#39;country_of_origin&#39;,&#39;income&#39;]

df2 = pd.read_csv(url, names=columns)
print(df2.head(2))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;   age          workclass  fnlwgt   education  education_num  \
0   39          State-gov   77516   Bachelors             13   
1   50   Self-emp-not-inc   83311   Bachelors             13   

        marital_status        occupation    relationship ethnicity gender  \
0        Never-married      Adm-clerical   Not-in-family     White   Male   
1   Married-civ-spouse   Exec-managerial         Husband     White   Male   

   capital_gain  capital_loss  hours_per_week country_of_origin  income  
0          2174             0              40     United-States   &amp;lt;=50K  
1             0             0              13     United-States   &amp;lt;=50K  
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;컬럼명에 대한 정보는 &lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/adult&#34;&gt;Adult Data Set&lt;/a&gt; 에서 참고한다.&lt;/li&gt;
&lt;li&gt;판다스를 배울 때 조금더 자세히 배우겠지만, &lt;code&gt;info()&lt;/code&gt; 함수를 사용하면 데이터의 일반적인 정보를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;print(df2.info())
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 32561 entries, 0 to 32560
Data columns (total 15 columns):
 #   Column             Non-Null Count  Dtype 
---  ------             --------------  ----- 
 0   age                32561 non-null  int64 
 1   workclass          32561 non-null  object
 2   fnlwgt             32561 non-null  int64 
 3   education          32561 non-null  object
 4   education_num      32561 non-null  int64 
 5   marital_status     32561 non-null  object
 6   occupation         32561 non-null  object
 7   relationship       32561 non-null  object
 8   ethnicity          32561 non-null  object
 9   gender             32561 non-null  object
 10  capital_gain       32561 non-null  int64 
 11  capital_loss       32561 non-null  int64 
 12  hours_per_week     32561 non-null  int64 
 13  country_of_origin  32561 non-null  object
 14  income             32561 non-null  object
dtypes: int64(6), object(9)
memory usage: 3.7+ MB
None
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단하게 &lt;code&gt;Pandas&lt;/code&gt;를 활용한 데이터 생성 및 파일 입출력에 대해서 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;만약, 빠르게 판다스를 활용하여 데이터 전처리를 연습 하고 싶다면, 공식홈페이지에 있는 &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html&#34;&gt;10 minutes to pandas&lt;/a&gt;에서 학습하는 것을 권장한다.&lt;/li&gt;
&lt;li&gt;강사는 &lt;code&gt;Kaggle&lt;/code&gt; 데이터를 활용하여 &lt;code&gt;Pandas&lt;/code&gt; 함수를 응용할 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Suresh Kumar, and Usman Ahmed. “Hands-On Exploratory Data Analysis with Python.” Packt Publishing, Mar. 2020, &lt;a href=&#34;http://www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&#34;&gt;www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EDA with Personal Email - Data Import</title>
      <link>https://chloevan.github.io/python/python_edu/05_miniproject/02_eda_with_personal_email_dataimport/</link>
      <pubDate>Mon, 01 Jun 2020 14:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/05_miniproject/02_eda_with_personal_email_dataimport/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/python_ds_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-loading-the-dataset&#34;&gt;II. Loading the dataset&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개인 이메일에 대한 데이터 수집 신청은 다음과 같다.
&lt;ul&gt;
&lt;li&gt;참조: &lt;a href=&#34;https://chloevan.github.io/python/python_edu/04_miniproject/01_eda_with_personal_email_overview/&#34;&gt;EDA with Personal Email - Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EDA with Python - NumPy Broadcasting</title>
      <link>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_2_eda_with_numpy_broadcasting/</link>
      <pubDate>Mon, 01 Jun 2020 13:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_2_eda_with_numpy_broadcasting/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python/basic_syntax/numpy.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumPy&lt;/code&gt;는 C언어로 구성되었으며, 고성능의 수치계산을 위해 나온 패키지이며, &lt;code&gt;Numerical Python&lt;/code&gt;의 약자이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;을 활용한 데이터 분석을 수행할 때, 그리고 데이터 시각화나 전처리를 수행할 때, &lt;code&gt;NumPy&lt;/code&gt;는 매우 자주 사용되기 때문에 한번쯤은 꼭 다듬고 가는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;이전 포스트에서는 &lt;a href=&#34;https://chloevan.github.io/python/basic/numpy_array_creation/&#34;&gt;Python - NumPy 소개 및 다양한 객체 생성&lt;/a&gt;에 대해 다루었으니, 본 포스트 읽기에 앞서서 기본적인 개념에 대해 확인하기를 바란다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-모듈-import&#34;&gt;II. 모듈 Import&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;패키지 설치방법은 &lt;a href=&#34;https://pypi.org/project/numpy/&#34;&gt;설치 문서&lt;/a&gt;를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version__)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.18.4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-numpy-기본-활용법&#34;&gt;III. NumPy 기본 활용법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NumPy 객체 생성을 한 뒤에, 파일 저장, 서로 다른 배열끼리의 사칙연산 등을 수행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-numpy-객체-파일-저장-및-불러오기&#34;&gt;(1) NumPy 객체 파일 저장 및 불러오기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;savetxt&lt;/code&gt;, &lt;code&gt;loadtxt&lt;/code&gt;, 그리고 &lt;code&gt;genfromtxt&lt;/code&gt; 함수를 활용하여 객체를 불러오는 예제를 실습한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 객체 생성 후 저장하기&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x)
np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savetxt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.out&amp;#39;&lt;/span&gt;, x, delimiter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17.
 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35.
 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49.]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;data.out  sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 폴더에 &lt;code&gt;data.out&lt;/code&gt; 파일이 생성된 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# `data.out` 불러오기&lt;/span&gt;
z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loadtxt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.out&amp;#39;&lt;/span&gt;, unpack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17.
 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35.
 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49.]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;정상적으로 &lt;code&gt;data.out&lt;/code&gt;을 불러와서 &lt;code&gt;z&lt;/code&gt;객체에 저장된 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# genfromtxt 활용&lt;/span&gt;
my_array2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;genfromtxt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.out&amp;#39;&lt;/span&gt;, 
                          skip_header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
                          filling_values&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my_array2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.
 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36.
 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49.]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;z&lt;/code&gt;객체와 마찬가지로 &lt;code&gt;my_array2&lt;/code&gt;도 객체가 정상적으로 생성된 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;loadtxt&lt;/code&gt;와 &lt;code&gt;genfromtxt&lt;/code&gt;의 차이점이 있기는 하다. 결론부터 말하면, &lt;code&gt;genfromtxt&lt;/code&gt;가 다양한 옵션을 제공한다. 간단한 예를 들면, &lt;code&gt;genfromtxt&lt;/code&gt;의 경우 열들의 자료형을 자동으로 결정해주어 사용자들이 좀 더 편안하게 사용할 수 있도록 도와준다 (Clinton, 2016, p. 281-2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-2차원-배열-inspection&#34;&gt;(2) 2차원 배열 Inspection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndim&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;flags&lt;/code&gt;, &lt;code&gt;itemsize&lt;/code&gt;, &lt;code&gt;nbytes&lt;/code&gt;를 활용하여 배열의 정보를 획득한다.&lt;/li&gt;
&lt;li&gt;특히, 딥러닝 모형 정의 및 학습할 때, NumPy 배열 에러 등이 종종 발생하기 때문에 기본 개념은 학습하는 것을 추천한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;my2D_Array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[ 1  2  3  4]
 [ 2  4  6  8]
 [ 3  6  9 12]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ndim&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndim)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# size (각 item의 개수를 의미)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 2차원 배열의 memory layout 확인 &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flags)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False
  UPDATEIFCOPY : False
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1차원의 길이 in bytes (예. 숫자는 2bytes)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itemsize)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 전체 bytes&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my2D_Array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nbytes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;96
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iv-broadcasting브로드-캐스팅&#34;&gt;IV. Broadcasting(=브로드 캐스팅)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python/basic_syntax/broadcasting.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개념 설명은 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Broadcasting is a mechanism that permits NumPy to operate with arrays of different shapes when performing arithmetic operations:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;간단하게 해석하면 브로드캐스팅(Broadcasting)은 모양이 다른 배열들 간의 사칙연산도 가능하게끔 도와주는 일종의 &lt;code&gt;mechanism&lt;/code&gt;이다. 그런데, 여기에는 기본적인 &lt;code&gt;Rule&lt;/code&gt;이 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-rule-1-eqaul-dimensions-between-a-and-b&#34;&gt;(1) Rule 1. Eqaul Dimensions between A and B&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 모양이 같은 &lt;code&gt;A&lt;/code&gt;와 &lt;code&gt;B&lt;/code&gt; NumPy 객체를 생성한다.&lt;/li&gt;
&lt;li&gt;A + B를 연산하여 출력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# A 객체&lt;/span&gt;
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(A)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
(5, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# B 객체&lt;/span&gt;
B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random((&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(B)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(B&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[0.13526155 0.07276429 0.25635867]
 [0.74909147 0.09515243 0.20379472]
 [0.33115034 0.13771662 0.61417221]
 [0.79164803 0.72754531 0.29071265]
 [0.36780642 0.50456743 0.19266307]]
(5, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(A&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1.13526155 1.07276429 1.25635867]
 [1.74909147 1.09515243 1.20379472]
 [1.33115034 1.13771662 1.61417221]
 [1.79164803 1.72754531 1.29071265]
 [1.36780642 1.50456743 1.19266307]]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;정상적으로 덧셈이 연산된 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-rule-2-compatible-dimensions-when-one-of-them-is-1&#34;&gt;(2) Rule 2. Compatible Dimensions when one of them is 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 X와 Y 객체를 생성하고 &lt;code&gt;shape&lt;/code&gt;를 통해 차원이 어떻게 다른지 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
(3, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[0 1 2 3]
(4,)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 뺄셈 연산 수행 (x-y)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[ 1.  0. -1. -2.]
 [ 1.  0. -1. -2.]
 [ 1.  0. -1. -2.]]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 중요한 것은 숫자 &lt;code&gt;4&lt;/code&gt;이다. 즉, 1차원 길이가 다르면 연산은 에러가 발생한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;의 숫자 &lt;code&gt;4&lt;/code&gt; 대신 &lt;code&gt;5&lt;/code&gt;를 대입해서 적용해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-33-d91ef8252b95&amp;gt; in &amp;lt;module&amp;gt;()
      1 x = np.ones((3,4))
      2 y = np.arange(5)
----&amp;gt; 3 print(x-y)


ValueError: operands could not be broadcast together with shapes (3,4) (5,) 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 에러 문구(&lt;code&gt;operands could not be broadcast together with shapes (3,4) (5,)&lt;/code&gt;)에서 확인 할 수 있는 것처럼 1차원 길이가 다르면 에러가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-rule-3-compatitble-in-all-of-the-dimensions&#34;&gt;(3) Rule 3. Compatitble in all of the dimensions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 서로 다른 모양의 객체를 확인한다.&lt;/li&gt;
&lt;li&gt;그리고 덧셈을 수행해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
(6, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[[0.68586586 0.9179277  0.88033036 0.6306833  0.17327179]]

 [[0.21184583 0.28629664 0.00532677 0.49662726 0.73354008]]

 [[0.82677113 0.49873148 0.56901096 0.82320785 0.04587492]]]
(3, 1, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[[1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]
  [1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]
  [1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]
  [1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]
  [1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]
  [1.68586586 1.9179277  1.88033036 1.6306833  1.17327179]]

 [[1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]
  [1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]
  [1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]
  [1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]
  [1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]
  [1.21184583 1.28629664 1.00532677 1.49662726 1.73354008]]

 [[1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]
  [1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]
  [1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]
  [1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]
  [1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]
  [1.82677113 1.49873148 1.56901096 1.82320785 1.04587492]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;만약에 여기에서 &lt;code&gt;y&lt;/code&gt; 값을 &lt;code&gt;(3,2,5)&lt;/code&gt; 또는 &lt;code&gt;(3,1,6)&lt;/code&gt;으로 바꾸면 어떻게 될까?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[[0.95042186 0.52979398 0.30549682 0.93579665 0.03784094]
  [0.27023327 0.19952522 0.68376492 0.11982131 0.45394735]]

 [[0.69797278 0.85359121 0.01493669 0.06111047 0.25285451]
  [0.57293653 0.28453573 0.18296577 0.12696192 0.28530794]]

 [[0.75410798 0.88487199 0.78635143 0.05059668 0.48753369]
  [0.65395856 0.74907103 0.47013049 0.14938089 0.36961655]]]
(3, 2, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-43-39cb3db33052&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 print(x+y)


ValueError: operands could not be broadcast together with shapes (6,5) (3,2,5) 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;에러가 나는 것을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;왜 에러가 날까? &lt;code&gt;x&lt;/code&gt;의 2차원 배열의 숫자가 앞에 6으로 되어 있기 때문이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;값은 그대로 놔둔채, x의 값 &lt;code&gt;6&lt;/code&gt; 대신 &lt;code&gt;2&lt;/code&gt;로 바꿔주고 덧셈을 하면 성공적으로 연산이 수행됨을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
(2, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[[1.95042186 1.52979398 1.30549682 1.93579665 1.03784094]
  [1.27023327 1.19952522 1.68376492 1.11982131 1.45394735]]

 [[1.69797278 1.85359121 1.01493669 1.06111047 1.25285451]
  [1.57293653 1.28453573 1.18296577 1.12696192 1.28530794]]

 [[1.75410798 1.88487199 1.78635143 1.05059668 1.48753369]
  [1.65395856 1.74907103 1.47013049 1.14938089 1.36961655]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;머신러닝 &amp;amp; 딥러닝을 수행할 때, &lt;code&gt;NumPy&lt;/code&gt;을 활용한 객체 생성은 매우 빈번하다.&lt;/li&gt;
&lt;li&gt;대부분은 서로 다른 차원으로 인해 연산 오류가 자주 발생하는데, 이 때 &lt;code&gt;Broadcasting&lt;/code&gt;의 개념을 알고 있으면 연산 오류를 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Brownley, Clinton W. Foundations for Analytics with Python. O&amp;rsquo;Reilly Media, Inc., 2016.&lt;/p&gt;
&lt;p&gt;Mukhiya, Suresh Kumar, and Usman Ahmed. “Hands-On Exploratory Data Analysis with Python.” Packt Publishing, Mar. 2020, &lt;a href=&#34;http://www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&#34;&gt;www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EDA with Python - NumPy basic</title>
      <link>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_1_eda_with_numpy_basic/</link>
      <pubDate>Sun, 31 May 2020 13:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/01_basic/chapter_1_1_eda_with_numpy_basic/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python/basic_syntax/numpy.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 처음 입문하는 사람들을 위해서 작성하였다. &lt;code&gt;탐색작 자료분석(EDA: Exploratory Data Analysis)&lt;/code&gt;을 위해 가장 기초적인 뼈대가 되는 &lt;code&gt;NumPy&lt;/code&gt;에 대해서 학습하도록 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-array-만들기&#34;&gt;II. Array 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1차원, 2차원, 3차원의 Array를 만들고 학습니다.&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;numpy&lt;/code&gt; 라이브러리를 불러옵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# import numpy&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version__)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.18.4
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 구글 코랩에서 제공하는 &lt;code&gt;numpy 버전&lt;/code&gt;은 1.18.4로 확인되고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-1차원-array-만들기&#34;&gt;(1) 1차원 Array 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1차원 Array를 만들어 봅시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;my_1D_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my_1D_array)
type(my_1D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[1 3 5 7]





numpy.ndarray
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2차원-array-만들기&#34;&gt;(2) 2차원 Array 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 2차원 Array를 만듭니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;my_2D_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my_2D_array)
type(my_2D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[ 1  2  3  4]
 [ 2  4  9 16]
 [ 4  8 18 32]]





numpy.ndarray
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-3차원-array-만들기&#34;&gt;(3) 3차원 Array 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 3차원 Array를 만듭니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;my_3D_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],[ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]], [[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],[ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]]])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(my_3D_array)
type(my_3D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[[ 1  2  3  4]
  [ 5  6  7  8]]

 [[ 1  2  3  4]
  [ 9 10 11 12]]]





numpy.ndarray
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-array-information&#34;&gt;III. Array Information&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;실무에서는 데이터를 어떤 형태로 수집되는지 바로 판단하기가 어렵습니다.&lt;/li&gt;
&lt;li&gt;따라서, 수집받은 데이터를 다양한 방식으로 출력하여 정보를 알아가는 것이 좋습니다.&lt;/li&gt;
&lt;li&gt;대표적으로, ndim, shape, dtype을 통해서 확인합니다.
&lt;ul&gt;
&lt;li&gt;ndim은 배열의 차원수를 의미합니다.&lt;/li&gt;
&lt;li&gt;shape는 tuple의 index개수와 각 index가 보유하는 elements의 개수를 반환합니다.&lt;/li&gt;
&lt;li&gt;dtype는 각 게체의 데이터 타입을 표시합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-함수-작성&#34;&gt;(1) 함수 작성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;저장된 1차원, 2차원, 3차원의 Array를 활용합니다.&lt;/li&gt;
&lt;li&gt;먼저, 빠르게 확인하기 위해 함수를 작성합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_array_info&lt;/span&gt;(arr_obj): 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(arr_obj, (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current dimension is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndim)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current shape is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current dtype is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current value is :&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, arr_obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-1차원-array의-정보-확인&#34;&gt;(1) 1차원 Array의 정보 확인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 정보를 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_array_info(my_1D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 1
The current shape is : (4,)
The current dtype is : int64
The current value is :
 [1 3 5 7]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;1차원 shape의 경우에는 (4,)만 표시가 되었는데, 이는 요소의 개수만 출력됨을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-2차원-array의-정보-확인&#34;&gt;(2) 2차원 Array의 정보 확인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2차원 배열의 정보를 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_array_info(my_2D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 2
The current shape is : (3, 4)
The current dtype is : int64
The current value is :
 [[ 1  2  3  4]
 [ 2  4  9 16]
 [ 4  8 18 32]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-3차원-array의-정보-확인&#34;&gt;(3) 3차원 Array의 정보 확인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;3차원 배열의 정보를 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_array_info(my_3D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 3
The current shape is : (2, 2, 4)
The current dtype is : int64
The current value is :
 [[[ 1  2  3  4]
  [ 5  6  7  8]]

 [[ 1  2  3  4]
  [ 9 10 11 12]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iv-creating-an-array&#34;&gt;IV. Creating An Array&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이제 다양한 방식으로 NumPy를 작성해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Array of ones&lt;/span&gt;
ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
check_array_info(ones)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 2
The current shape is : (3, 4)
The current dtype is : float64
The current value is :
 [[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Array of zeros&lt;/span&gt;
zeros &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int16)
check_array_info(zeros)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 3
The current shape is : (1, 2, 3)
The current dtype is : int16
The current value is :
 [[[0 0 0]
  [0 0 0]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Array with random values&lt;/span&gt;
np_random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
check_array_info(np_random)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 2
The current shape is : (2, 2)
The current dtype is : float64
The current value is :
 [[0.47775118 0.60277821]
 [0.01818544 0.23499141]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Empty Array&lt;/span&gt;
empty_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
check_array_info(empty_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 2
The current shape is : (3, 2)
The current dtype is : float64
The current value is :
 [[2.31101775e-316 0.00000000e+000]
 [0.00000000e+000 0.00000000e+000]
 [0.00000000e+000 0.00000000e+000]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Full Array&lt;/span&gt;
full_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
check_array_info(full_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 2
The current shape is : (2, 2)
The current dtype is : int64
The current value is :
 [[7 7]
 [7 7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Array of evenly_spaced values&lt;/span&gt;
even_spaced_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
check_array_info(even_spaced_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 1
The current shape is : (3,)
The current dtype is : int64
The current value is :
 [10 15 20]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;even_spaced_array2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
check_array_info(even_spaced_array2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current dimension is : 1
The current shape is : (9,)
The current dtype is : float64
The current value is :
 [0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-array의-메모리-체크&#34;&gt;V. Array의 메모리 체크&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;머신러닝과 딥러닝을 수행하려면 반드시 메모리 체크가 필수다.&lt;/li&gt;
&lt;li&gt;이 부분과 관련된 함수를 작성하여 기존에 저장된 1차원, 2차원, 3차원 배열의 객체를 출력하여 본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-함수-작성-1&#34;&gt;(1) 함수 작성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check_memory_info&lt;/code&gt;라는 함수를 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_memory_info&lt;/span&gt;(arr_obj): 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(arr_obj, (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray)): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current size is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current flags is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flags)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current itemzise is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itemsize)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current total consumed bytes is :&amp;#34;&lt;/span&gt;, arr_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nbytes)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;는 &lt;code&gt;element&lt;/code&gt;의 전체 개수를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt;는 &lt;code&gt;memory layout&lt;/code&gt;의 정보를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;itemsize&lt;/code&gt;는 bytes 당 한 배열의 길이를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nbytes&lt;/code&gt;는 객체가 소비하는 전체 bytes를 출력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-1차원-array의-메모리-정보-확인&#34;&gt;(1) 1차원 Array의 메모리 정보 확인&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_memory_info(my_1D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current size is : 4
The current flags is :   C_CONTIGUOUS : True
  F_CONTIGUOUS : True
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False
  UPDATEIFCOPY : False

The current itemzise is : 8
The current total consumed bytes is : 32
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-2차원-array의-메모리-정보-확인&#34;&gt;(1) 2차원 Array의 메모리 정보 확인&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_memory_info(my_2D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current size is : 12
The current flags is :   C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False
  UPDATEIFCOPY : False

The current itemzise is : 8
The current total consumed bytes is : 96
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-1차원-array의-메모리-정보-확인&#34;&gt;(3) 1차원 Array의 메모리 정보 확인&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;check_memory_info(my_3D_array)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;The current size is : 16
The current flags is :   C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  WRITEBACKIFCOPY : False
  UPDATEIFCOPY : False

The current itemzise is : 8
The current total consumed bytes is : 128
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vi-결론&#34;&gt;VI. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumPy&lt;/code&gt;는 파이썬에서 다루는 데이터과학에서 다루는 매우 중요한 토대가 되는 라이브러이이다.&lt;/li&gt;
&lt;li&gt;간단하게 &lt;code&gt;NumPy&lt;/code&gt;를 활용한 배열에 대해 학습하였다.&lt;/li&gt;
&lt;li&gt;또한, &lt;code&gt;Array&lt;/code&gt;를 다양하게 만들어보고, &lt;code&gt;Array&lt;/code&gt;가 가지고 있는 다양한 정보를 확인할 수 있는 여러 함수에 대해 익히는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;그러나, 여기까지는 사실상 기초이고, 이제 배열의 연산에 대해 익히는 시간을 가져야 한다.&lt;/li&gt;
&lt;li&gt;다음 시간에 &lt;code&gt;Broadcasting&lt;/code&gt;이라는 기법을 학습할 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Suresh Kumar, and Usman Ahmed. “Hands-On Exploratory Data Analysis with Python.” Packt Publishing, Mar. 2020, &lt;a href=&#34;http://www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&#34;&gt;www.packtpub.com/data/hands-on-exploratory-data-analysis-with-python&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Colab Intro</title>
      <link>https://chloevan.github.io/python/python_edu/00_settings/chapter_0_1_google_colab/</link>
      <pubDate>Sat, 30 May 2020 21:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/00_settings/chapter_0_1_google_colab/</guid>
      <description>&lt;h2 id=&#34;i-들어가며&#34;&gt;I. 들어가며&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;빅데이터 시대에 맞춰서 다양한 툴이 나오는 가운데, Google Colab은 가히 혁명적이라 할 수 있다.&lt;/li&gt;
&lt;li&gt;과거 높은 사양의 컴퓨터에서만 수행할 수 있었던 머신러닝과 딥러닝을 구글 코랩의 환경에서 무료로 배울 수 있는 기회를 구글이 제공하기 시작했다.&lt;/li&gt;
&lt;li&gt;간단하게 아래 소스코드를 실행하여 CPU와 GPU의 연산속도를 비교 해보자.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/notebooks/gpu.ipynb&#34;&gt;GPU를 사용한 TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-data-transformation-예제&#34;&gt;II. Data Transformation 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이제 간단하게 데이터 가공의 예를 실습해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-딕셔너리에서-시리즈로-변환하기&#34;&gt;(1) 딕셔너리에서 시리즈로 변환하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다음의 소스코드를 실행하여 딕셔너리에서 시리즈로 변환하는 것을 실습해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# pandas 불러오기
import pandas as pd

# key:value 형태로 딕셔너리를 만들고 temp_dic으로 저장
temp_dic = {&#39;evan&#39;: 30, &#39;chloe&#39;: 27}
print(temp_dic)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{&#39;evan&#39;: 30, &#39;chloe&#39;: 27}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 시리즈로 변환하고 출력값 확인
data = pd.Series(temp_dic)
print(data)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;evan     30
chloe    27
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 출력값에서 인덱스는 &lt;code&gt;evan&lt;/code&gt;과 &lt;code&gt;chloe&lt;/code&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-리스트에서-시리즈로-변환하기&#34;&gt;(2) 리스트에서 시리즈로 변환하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 리스트에서 시리즈로 변환한다. 이 때 출력값의 인덱스가 어떻게 나타나는지 확인해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
temp_list = [&#39;2020-05-29&#39;, 1.11, &#39;가나다&#39;, &#39;ABC&#39;, 100, True]
data = pd.Series(temp_list)
print(data)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;0    2020-05-29
1          1.11
2           가나다
3           ABC
4           100
5          True
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 인덱스의 값이 자동으로 0부터 시작하는 것을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-data-visualisation-예제&#34;&gt;III. Data Visualisation 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 간단하게 시각화를 작성해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27)
womenMeans = (25, 32, 34, 20, 25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)
ind = np.arange(N)    # the x locations for the groups
width = 0.35       # the width of the bars: can also be len(x) sequence

p1 = plt.bar(ind, menMeans, width, yerr=menStd)
p2 = plt.bar(ind, womenMeans, width,
             bottom=menMeans, yerr=womenStd)

plt.ylabel(&#39;Scores&#39;)
plt.title(&#39;Scores by group and gender&#39;)
plt.xticks(ind, (&#39;G1&#39;, &#39;G2&#39;, &#39;G3&#39;, &#39;G4&#39;, &#39;G5&#39;))
plt.yticks(np.arange(0, 81, 10))
plt.legend((p1[0], p2[0]), (&#39;Men&#39;, &#39;Women&#39;))

plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;img/python_edu/00_settings/Chapter_0_1_Google_Colab_files/Chapter_0_1_Google_Colab_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note: 한글 시각화는 별도로 세팅을 하지 않으면 구현이 어렵다.
&lt;ul&gt;
&lt;li&gt;추후에, 다시 한번 영상으로 제작하여 배포할 예정이지만, 첫 강의를 들으시는 분들은 아래 문서를 확인하여 주시기를 바란다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/settings/kakao_arena_3_eda/&#34;&gt;Kakao Arena 3 EDA on Google Colab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-머신러닝-예제&#34;&gt;IV. 머신러닝 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 구글 코랩에서 진행하는 &lt;code&gt;KNN&lt;/code&gt;을 활용하여 비지도학습의 분류 모형을 구현한다.&lt;/li&gt;
&lt;li&gt;먼저 관련 모듈부터 설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import numpy as np 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 데이터를 가져온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;iris_dataset = load_iris()
print(&amp;quot;종속 변수명: {}&amp;quot;.format(iris_dataset[&#39;target_names&#39;]))
print(&amp;quot;독립 변수명: {}&amp;quot;.format(iris_dataset[&#39;feature_names&#39;]))
print(&amp;quot;Type of data: {}&amp;quot;.format(type(iris_dataset[&#39;data&#39;])))
print(&amp;quot;Shape of data: {}&amp;quot;.format(iris_dataset[&#39;data&#39;].shape))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;종속 변수명: [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;]
독립 변수명: [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;]
Type of data: &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;
Shape of data: (150, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Train, Test 데이터로 분류한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;X_train, X_test, y_train, y_test = train_test_split(iris_dataset[&#39;data&#39;], iris_dataset[&#39;target&#39;], random_state=0)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 모형을 학습시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;KNeighborsClassifier(algorithm=&#39;auto&#39;, leaf_size=30, metric=&#39;minkowski&#39;,
                     metric_params=None, n_jobs=None, n_neighbors=1, p=2,
                     weights=&#39;uniform&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;학습된 모형을 테스트 하기 위해 가상의 데이터를 만든다.
&lt;ul&gt;
&lt;li&gt;sepal length의 길이: 4 cm&lt;/li&gt;
&lt;li&gt;sepal width의 길이: 2.1 cm&lt;/li&gt;
&lt;li&gt;petal length의 길이: 1.2 cm&lt;/li&gt;
&lt;li&gt;petal width의 길이: 0.7 cm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;X_new = np.array([[4, 2.1, 1.2, 0.7]])
print(&amp;quot;X_new.shape: {}&amp;quot;.format(X_new.shape))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;X_new.shape: (1, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;가상의 데이터를 예측함수에 추가하여 실제 어떤 종으로 분류되는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;prediction = knn.predict(X_new)
print(&amp;quot;Prediction: {}&amp;quot;.format(prediction))
print(&amp;quot;Predicted target name: {}&amp;quot;.format(iris_dataset[&#39;target_names&#39;][prediction]))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Prediction: [0]
Predicted target name: [&#39;setosa&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setosa&lt;/code&gt;로 분류가 된 것을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;이번에는 모형평가를 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;y_pred = knn.predict(X_test)
print(&amp;quot;Test set predictions:\n {}&amp;quot;.format(y_pred))
print(&amp;quot;Test set score (np.mean): {:.2f}&amp;quot;.format(np.mean(y_pred == y_test)))
print(&amp;quot;Test set score (knn.score): {:.2f}&amp;quot;.format(knn.score(X_test, y_test)))
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Test set predictions:
 [2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0
 2]
Test set score (np.mean): 0.97
Test set score (knn.score): 0.97
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;지금까지 진행하면서, 여러분들이 가장 놀라워야 하는 것은 데이터 분석 시, 필요로 하는 가장 대표적인 라이브러이인 &lt;code&gt;pandas, numpy, matplot, scikit-learn&lt;/code&gt;과 같은 모듈을 설치하지 않았다.&lt;/li&gt;
&lt;li&gt;즉, 데이터 분석을 하려면, 대부분의 교재에서 아나콘다를 설치해야 한다는 그러한 과정도 필요없다.&lt;/li&gt;
&lt;li&gt;지금 바로 망설일 필요 없이 구글 코랩을 클릭하자. &lt;strong&gt;(무료다!)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;이제 본격적으로 파이썬의 기초부터 머신러닝, 그리고 더 나아가 캐글 입문까지 진행하는 코스를 밟아본다.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>EDA with Personal Email - Overview</title>
      <link>https://chloevan.github.io/python/python_edu/05_miniproject/01_eda_with_personal_email_overview/</link>
      <pubDate>Sat, 30 May 2020 11:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/05_miniproject/01_eda_with_personal_email_overview/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/python_ds_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-overview&#34;&gt;II. Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터 집합에서 유용한 통찰력을 탐구하려면 많은 생각과 높은 수준의 경험과 연습이 필요하다.&lt;/li&gt;
&lt;li&gt;여러 유형의 데이터셋을 처리할수록 채굴할 수 있는 통찰력의 유형을 이해하는 데 더 많은 경험을 얻을 수 있다.&lt;/li&gt;
&lt;li&gt;이 장에서는 자체 이메일 데이터셋 중 하나를 사용하여 탐색적 데이터 분석(EDA)을 수행하려고 한다.&lt;/li&gt;
&lt;li&gt;모든 이메일을 데이터 집합으로 내보내는 방법, 팬더 데이터 프레임 내에서 가져오는 방법, 시각화하는 방법, 얻을 수 있는 다양한 유형의 통찰력에 대해 배우게 된다.&lt;/li&gt;
&lt;li&gt;특히, 개인별 G-Mail 데이터를 수집하는 방법에 대해서 배워서 적용하는 것을 연습한다.
&lt;ul&gt;
&lt;li&gt;데이터 수집&lt;/li&gt;
&lt;li&gt;데이터 가공&lt;/li&gt;
&lt;li&gt;데이터 분석&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-technical-requirements&#34;&gt;III. Technical Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;본 데이터셋은 개인 Gmail 계정에서 가져온 이메일 데이터를 활용한다.&lt;/li&gt;
&lt;li&gt;개인 정보 보호 문제로 인해 데이터셋은 공유가 되지 않기에 데이터를 다룰 때 조심하시기를 바라며, 또한 관련 데이터 중 민감한 데이터를 직접 처리하는 것을 추천한다.&lt;/li&gt;
&lt;li&gt;이 장에서는 &lt;code&gt;Gmail&lt;/code&gt;에서 직접 이메일을 다운로드하여 초기 데이터 분석을 수행하는 방법을 안내한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-데이터-수집-절차&#34;&gt;(1) 데이터 수집 절차&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;먼저 개인의 &lt;code&gt;G-Mail&lt;/code&gt;계정에 접속한다.&lt;/li&gt;
&lt;li&gt;그리고, 다음 링크를 클릭한다. &lt;a href=&#34;https://takeout.google.com/settings/takeout&#34;&gt;https://takeout.google.com/settings/takeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Deselect all&lt;/code&gt;을 우선 클릭하여 모든 체크박스를 해제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/05_miniProject/02_dataimport/figure_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다만, 하단에서 &lt;code&gt;Mail&lt;/code&gt;만 클릭한다. 그리고 스크롤바를 더 내려서 &lt;code&gt;Next Step&lt;/code&gt;을 클릭한다.
&lt;ul&gt;
&lt;li&gt;이 때 구글 드라이브로 데이터를 받는 것으로 진행한다&lt;/li&gt;
&lt;li&gt;나머지는 모두 &lt;code&gt;default&lt;/code&gt;값으로 남겨둔다. 일회성 아카이브, .zip 및 최대 허용 크기를 선택한다. 이 다음에 아카이브 생성을 누른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/05_miniProject/02_dataimport/figure_02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2020년 5월 기준) 이메일로 즉시, 아래와 같은 문구를 받게 될 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re getting this email because there’s been a request to create an archive of your Google data.
If you didn’t make this request, someone may be trying to access your Google account. Check recent activity in your account and take steps to secure it.
Requests can be scheduled in advance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;요청 사항에 따라서 시간이 걸린다고 아래와 같이 명시하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Google is creating a copy of files from Mail
This process can &lt;code&gt;take a long time (possibly hours or days)&lt;/code&gt; to complete. You&amp;rsquo;ll receive an email when your export is done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 생각보다 오래 걸리지는 않는다. 다운로드가 완료가 되면 구글드라이브에서 확인할 수 있다. &lt;code&gt;zip&lt;/code&gt;파일을 해제 한 후 &lt;code&gt;.mbox&lt;/code&gt; 확장자로 구글드라이브에 저장시킨다. (보통 용량이 크기 때문에 &lt;code&gt;zip&lt;/code&gt;파일과 &lt;code&gt;mbox&lt;/code&gt;를 같이 저장할 필요는 없다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Transformation - Merging Data</title>
      <link>https://chloevan.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</link>
      <pubDate>Fri, 29 May 2020 14:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/python_edu/02_datatransformation/01_data_transformation_merging_data/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/02_datatransformation/pandas_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터는 코로나 데이터를 활용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-data-transform-overview&#34;&gt;I. Data Transform Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터 변환은 데이터를 하나의 형식이나 구조에서 다른 형식이나 구조로 변환하는 데 사용되는 기법이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Data deduplication&lt;/code&gt; 데이터 중복 제거에는 중복된 데이터 식별 및 제거가 포함된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Key restructuring&lt;/code&gt; 의미가 내장된 모든 키를 일반 키로 변환하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data Cleansing&lt;/code&gt;은 소스 데이터의 정확성을 높이기 위해 의미나 정보를 추출하지 않고 소스 언어에서 단어를 추출하고 구식, 부정확, 불완전한 정보를 삭제하는 것을 포함함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data aggregation&lt;/code&gt;는 서로 다른 유형의 보고 시스템에서 중요한 정보를 검색, 추출, 요약 및 보존하는 것을 포함함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data integration&lt;/code&gt;은 다른 데이터 유형을 변환하여 공통 구조나 스키마로 통합하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data filtering&lt;/code&gt;은 데이터 필터링은 특정 사용자와 관련된 정보를 식별하는 것을 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data joining&lt;/code&gt;은 두 개 이상의 테이블 간의 관계를 설정하는 것이 포함된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터를 변환하는 주된 이유는 변환된 데이터가 다른 데이터와 호환될 수 있도록 더 나은 대표성을 갖기 위함이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것 외에도, 시스템에서의 상호운용성은 공통 데이터 구조와 포맷을 따름으로써 달성 될 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-merging-database-style-dataframes&#34;&gt;II. Merging database style dataframes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 두개의 데이터를 &lt;code&gt;merge&lt;/code&gt;할 때, &lt;code&gt;concat&lt;/code&gt;이라는 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;사용법은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;dataframe = pd.concat([dataFrame1, dataFrame2], ignore_index=True)

dataframe
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;앞의 코드의 출력은 두 표 모두를 결합한 단일 데이터프레임이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python/02_datatransformation/figure_01.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ignore_index&lt;/code&gt; 인수는 인덱스의 순서와 연관이 있다. 만약 &lt;code&gt;ignore_index=False&lt;/code&gt;로 지정한다면, 기존 인덱스의 순서는 그대로 유지된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-axis0&#34;&gt;(1) axis=0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;두개의 서로 다른 테이블을 위아래로 합친다는 뜻이다. 간단하게 코드를 통해 예를 확인하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# package import&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

&lt;span style=&#34;color:#75715e&#34;&gt;# 데이터 생성&lt;/span&gt;
df1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]], 
                   columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;letter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;])

df2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]],
                   columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;letter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number
0      a       1
1      b       2
  letter  number
0      c       3
1      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1, df2], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number
0      a       1
1      b       2
0      c       3
1      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-axis1&#34;&gt;(2) axis=1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;두개의 서로 다른 테이블을 왼쪽에서 오른쪽 순으로 합친다는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1, df2], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  letter  number letter  number
0      a       1      c       3
1      b       2      d       4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-real-problems-and-solutions&#34;&gt;III. Real Problems and Solutions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Chapter II.&lt;/code&gt;의 예제들은 기본적으로 쉬운 예제에 속한다. 그런다면 실전은 어떨까?&lt;/li&gt;
&lt;li&gt;다음 예제 데이터프레임을 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df1SE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreSE&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1SE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE
0           9       22
1          11       66
2          13       31
3          15       51
4          17       71
5          19       91
6          21       56
7          23       32
8          25       52
9          27       73
10         29       92
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df2SE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreSE&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]})
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2SE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE
0           2       98
1           4       93
2           6       44
3           8       77
4          10       69
5          12       56
6          14       31
7          16       53
8          18       78
9          20       93
10         22       56
11         24       77
12         26       33
13         28       56
14         30       27
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df1ML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreML&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df1ML)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreML
0           1       39
1           3       49
2           5       55
3           7       77
4           9       52
5          11       86
6          13       41
7          15       77
8          17       73
9          19       51
10         21       86
11         23       82
12         25       92
13         27       23
14         29       49
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df2ML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StudentID&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;], 
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ScoreML&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;]})

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df2ML)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   StudentID  ScoreML
0          2       93
1          4       44
2          6       78
3          8       97
4         10       87
5         12       89
6         14       39
7         16       43
8         18       88
9         20       78
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;실전에서는 이렇게 데이터의 행의 개수가 다른 것이 태반이다.&lt;/li&gt;
&lt;li&gt;또한, 모든 학생이 &lt;code&gt;ML&lt;/code&gt;수업, &lt;code&gt;SE&lt;/code&gt;수업을 수강한 것이 아니다.&lt;/li&gt;
&lt;li&gt;위와 같은 상황에서 하나의 데이터셋으로 만드는 과정을 기술하려고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-concatening-along-with-an-axis&#34;&gt;(1) Concatening along with an axis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 옵션으로 지금까지 진행한 방법으로 &lt;code&gt;axis&lt;/code&gt;를 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dfSE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1SE, df2SE], ignore_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
dfML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df1ML, df2ML], ignore_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([dfML, dfSE], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreML  StudentID  ScoreSE
16        4.0     44.0         12       56
17        6.0     78.0         14       31
18        8.0     97.0         16       53
19       10.0     87.0         18       78
20       12.0     89.0         20       93
21       14.0     39.0         22       56
22       16.0     43.0         24       77
23       18.0     88.0         26       33
24       20.0     78.0         28       56
25        NaN      NaN         30       27
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;먼저, &lt;code&gt;SE&lt;/code&gt;데이터끼리 합치고, 그 다음에는 &lt;code&gt;ML&lt;/code&gt;데이터끼리 조합을 했다.&lt;/li&gt;
&lt;li&gt;그 후에 &lt;code&gt;axis=1&lt;/code&gt; 인수를 추가하여 &lt;code&gt;side by side&lt;/code&gt; 데이터를 조합 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-using-dfmerge-with-an-inner-join&#34;&gt;(2) Using df.merge with an inner join&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 &lt;code&gt;merge()&lt;/code&gt;를 활용하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;merge_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfSE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(dfML, how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(merge_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    StudentID  ScoreSE  ScoreML
0           9       22       52
1          11       66       86
2          13       31       41
3          15       51       77
4          17       71       73
5          19       91       51
6          21       56       86
7          23       32       82
8          25       52       92
9          27       73       23
10         29       92       49
11          2       98       93
12          4       93       44
13          6       44       78
14          8       77       97
15         10       69       87
16         12       56       89
17         14       31       39
18         16       53       43
19         18       78       88
20         20       93       78
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 알 수 있는 것은 &lt;code&gt;SE&lt;/code&gt; 코스와 &lt;code&gt;ML&lt;/code&gt;코스를 두개 모두 수강한 학생 기록을 알 수 있다. (총 21명)&lt;/li&gt;
&lt;li&gt;그 외에도 &lt;code&gt;join&lt;/code&gt;의 여러가지 유형이 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner join&lt;/code&gt; - 내부 조인은 둘 이상의 데이터 프레임에서 교차점을 취한다. 구조화 질의 언어(SQL)의 INER JOIN에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outer join&lt;/code&gt; - 외부 조인은 둘 이상의 데이터 프레임에서 결합을 가져온다. SQL의 FULL OUTER JOIN에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left join&lt;/code&gt; - 왼쪽 조인은 왼쪽 데이터 프레임의 키만 사용한다. SQL의 왼쪽 외부 조인에 해당한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right join&lt;/code&gt; - 오른쪽 조인(join)은 오른쪽 데이터 프레임의 키만 사용하며, SQL의 Right OUTER JOIN과 유사하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-merging-on-index&#34;&gt;(3) Merging on index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 프레임의 병합키는 데이터 프레임의 인덱스에 위치한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_index=True&lt;/code&gt; 또는 &lt;code&gt;right_index=True&lt;/code&gt;를 지정하면 각 데이터 프레임의 &lt;code&gt;index&lt;/code&gt;를 병합 키로 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;left1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)})
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(left1)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value
0  apple      0
1   ball      1
2  apple      2
3  apple      3
4   ball      4
5    cat      5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;right1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group_val&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;33.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]}, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(right1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;       group_val
apple       33.4
ball         5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 2개의 데이터에서 &lt;code&gt;right1&lt;/code&gt; 데이터셋의 인덱스는 &lt;code&gt;apple &amp;amp; ball&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;이 때, &lt;code&gt;right1&lt;/code&gt;의 데이터를 병합키로 활용하려면 &lt;code&gt;right_index=True&lt;/code&gt;를 해주면 된다.&lt;/li&gt;
&lt;li&gt;반면에, &lt;code&gt;left1&lt;/code&gt;의 데이터에서 병합키는 &lt;code&gt;key&lt;/code&gt;값이다. 이 때에는 &lt;code&gt;left_on=&#39;key&#39;&lt;/code&gt;라고 지정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(left1, right1, left_on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, right_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value  group_val
0  apple      0       33.4
2  apple      2       33.4
3  apple      3       33.4
1   ball      1        5.0
4   ball      4        5.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;이 때, 만약에 위에서 배운 &lt;code&gt;join&lt;/code&gt; 유형을 지정하게 되면 지정값에 따라 데이터는 다르게 병합된다.&lt;/li&gt;
&lt;li&gt;간단한 예로 &lt;code&gt;outer join&lt;/code&gt;을 시도하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(left1, right1, left_on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;, right_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     key  value  group_val
0  apple      0       33.4
2  apple      2       33.4
3  apple      3       33.4
1   ball      1        5.0
4   ball      4        5.0
5    cat      5        NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;처음에 시도했을 때 나타나지 않았던 &lt;code&gt;cat&lt;/code&gt;값이 등장한 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;Piepenbreier, N. (2020, April 16). Automate Your (Boring!) Excel Reporting with Python!. Retrieved from &lt;a href=&#34;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&#34;&gt;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib - 09 lollipop</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_09_lollipop_chart/</link>
      <pubDate>Tue, 26 May 2020 11:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_09_lollipop_chart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-lollipop-chart&#34;&gt;II. Lollipop Chart&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Lollipop&lt;/code&gt; 차트는 데이터의 순위를 표시하는 데 사용될 수 있다. 이것은 보통 &lt;code&gt;정렬된 막대 그래프&lt;/code&gt;와 유사하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-데이터-수집&#34;&gt;(1) 데이터 수집&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cardata.csv&lt;/code&gt; 파일을 가져온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/books/eda_with_python/cardata.csv&amp;#39;&lt;/span&gt;
carDF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(carDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  manufacturer model  displ  year  cyl       trans drv  cty  hwy fl    class
0         audi    a4    1.8  1999    4    auto(l5)   f   18   29  p  compact
1         audi    a4    1.8  1999    4  manual(m5)   f   21   29  p  compact
2         audi    a4    2.0  2008    4  manual(m6)   f   20   31  p  compact
3         audi    a4    2.0  2008    4    auto(av)   f   21   30  p  compact
4         audi    a4    2.8  1999    6    auto(l5)   f   16   26  p  compact
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-groupby&#34;&gt;(2) groupby&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;manufacturer&lt;/code&gt;를 가지고 &lt;code&gt;groupby&lt;/code&gt;를 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;processedDF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; carDF[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cty&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;manufacturer&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;manufacturer&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                    cty
manufacturer           
audi          17.611111
chevrolet     15.000000
dodge         13.135135
ford          14.000000
honda         24.444444
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-sorting-and-reset_index&#34;&gt;(3) sorting and reset_index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제, &lt;code&gt;cty&lt;/code&gt;를 통해 정렬 후, &lt;code&gt;index&lt;/code&gt;를 재정렬하는 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sort the values by cty and reset index&lt;/span&gt;
processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cty&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  manufacturer        cty
0      lincoln  11.333333
1   land rover  11.500000
2        dodge  13.135135
3      mercury  13.250000
4         jeep  13.500000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-그래프-작성&#34;&gt;(4) 그래프 작성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 그래프를 작성해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), dpi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vlines(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
          ymin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, 
          ymax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cty, 
          color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;firebrick&amp;#39;&lt;/span&gt;, 
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;, 
          linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
           y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cty, 
           s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, 
           color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;firebrick&amp;#39;&lt;/span&gt;, 
           alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;## Title 작성&lt;/span&gt;
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lollipop chart for highway mileage using car dataset&amp;#39;&lt;/span&gt;, 
             fontdict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;})
&lt;span style=&#34;color:#75715e&#34;&gt;## Labels, xticks, and ylims&lt;/span&gt;
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Miles Per Gallon&amp;#39;&lt;/span&gt;)
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticks(processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_xticklabels(processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manufacturer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper(), 
                   rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, 
                   fontdict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;horizontalalignment&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;})
ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ylim(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 그래프에 평균 값 표시하기&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; processedDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index, 
            row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cty&lt;span style=&#34;color:#f92672&#34;&gt;+.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, 
            s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;round(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cty, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), 
            horizontalalignment&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;, 
            verticalalignment&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;, 
            fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 8. Display the plot on the screen&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_09_lollipop_chart/output_12_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_09_lollipop_chart.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib - 08 Histogram</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_08_histogram/</link>
      <pubDate>Tue, 19 May 2020 15:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_08_histogram/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-histogram&#34;&gt;II. Histogram&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Histogram&lt;/code&gt;은 &lt;code&gt;continuous&lt;/code&gt; 변수의 분포를 확인하고자 할 때 사용됩니다. 이 그래프는 통계 분석에 매우 유명한 그래프이기 때문에 꼭 실습하는 것을 권합니다.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-생성&#34;&gt;(1) 데이터 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;직업경력 연수에 관한 데이터를 생성하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# dataset &lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

yearsOfExperience &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-히스토그램---count-기준&#34;&gt;(2) 히스토그램 - count 기준&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 히스토그램을 만드는데, 아래와 같이 작성하도록 해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nbins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
n, bins, patches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(yearsOfExperience, bins&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nbins)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Years of Job&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frequency&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Distribution of of Jobs&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yearsOfExperience&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(), linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_08_histogram/output_7_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axvline()&lt;/code&gt;은 그래프의 수직선을 그려주는 함수입니다.
&lt;ul&gt;
&lt;li&gt;각각의 인수에 대한 설명은 &lt;a href=&#34;https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.axvline.html&#34;&gt;공식홈페이지&lt;/a&gt;에서 확인하시기를 바랍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;반대로, &lt;code&gt;axhline()&lt;/code&gt;은 그래프의 그려주는 함수입니다.&lt;/li&gt;
&lt;li&gt;평균적으로 약 10년간의 근속연수를 확인 활 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-히스토그램---비율-기준&#34;&gt;(3) 히스토그램 - 비율 기준&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;빈도 기준으로 그래프를 작성하게 되면 하나의 단점은 전체 데이터에서의 비율을 확인하는데 조금 어려움이 있다.&lt;/li&gt;
&lt;li&gt;따라서, 이번에는 비율을 기준으로 그래프를 작성하고, 추가적으로 밀도 그래프를 추가하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
nbins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
n, bins, patches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(yearsOfExperience, bins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nbins, density &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Years of Job&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frequency&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Distribution of of Jobs&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yearsOfExperience&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(), linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.lines.Line2D at 0x7f63238d4588&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_08_histogram/output_10_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;평균과 표준편차를 구하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;mu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yearsOfExperience&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
sigma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yearsOfExperience&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;std()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the result of mu is&amp;#34;&lt;/span&gt;, mu)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the result of mu is&amp;#34;&lt;/span&gt;, sigma)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;the result of mu is 10.45
the result of mu is 5.8997881317891405
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;정규분포를 추가하기 위해 아래와 같은 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sigma)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sigma &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (bins&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mu)) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[0.01408678 0.01874815 0.02424531 0.03046634 0.03719938 0.04413408
 0.05087863 0.05699276 0.06203359 0.06560806 0.06742335 0.06732657
 0.06532593 0.06158964 0.05642255 0.05022509 0.04344219 0.03651116
 0.0298169  0.02366041 0.01824337]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
nbins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
n, bins, patches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(yearsOfExperience, bins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nbins, density &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Years of Job&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frequency&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Distribution of of Jobs&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axvline(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yearsOfExperience&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(), linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(bins, y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_08_histogram/output_15_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 위 시각화에서 보는 것처럼, 전체 데이터가 정규분포를 따르지 않는 것으로 확인이 된다.&lt;/li&gt;
&lt;li&gt;이런 경우에는 여러 통계적인 분석 기법이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_08_histogram.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ch04 - Modeling Visualisation</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch04_modeling_visualisation/</link>
      <pubDate>Fri, 15 May 2020 11:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch04_modeling_visualisation/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words
— English Language Adage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The simple graph has brought more information to the data analyst’s mind than any other device.
— John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;보통 시각화라고 하면 탐색적 자료 분석에 시각화를 많이 의미할 수도 있다. 그런데, 모델링 결과 또는 통계적인 결과를 시각화로 보여줄 수 있는 능력을 갖추는 것은 데이터분석가로써 한번 더 도약할 수 있다.&lt;/p&gt;
&lt;p&gt;오늘 포스트는 이러한 주제에 맞춰서 다루도록 한다. 주요 이론적인 내용은 &lt;code&gt;Hadley Wickham&lt;/code&gt;의 &lt;code&gt;R for Data Science&lt;/code&gt;를 참고했다.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-모델의-정의&#34;&gt;II. 모델의 정의&lt;/h2&gt;
&lt;p&gt;통계에서 모델은 무엇일까? 또는 통계에서 모델의 역할은 무엇일까? 학자마다, 또는 주어진 환경에 따라 다르게 정의될 수도 있지만,&lt;/p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;모델은 데이터의 특유의 알고리즘을 통해 일반적인 패턴을 가장 잘 요약해주는 일종의 &lt;/code&gt;summary&lt;code&gt;와 같은 기능&lt;/code&gt;이다라고 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;보통 모델이 &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;not true&lt;/code&gt; 이렇게 인식될 수도 있다. 그러나, 모델은 &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;not true&lt;/code&gt;로 인식되기 보다는 &lt;code&gt;useful&lt;/code&gt; or &lt;code&gt;not useful&lt;/code&gt;로 판단하는 것이 좋다. 즉, 쓸만한 모형을 찾는 과정이 &lt;code&gt;modeling&lt;/code&gt;이라고 할 수 있겠다.&lt;/p&gt;
&lt;h2 id=&#34;iii-모델링-시각화&#34;&gt;III. 모델링 시각화&lt;/h2&gt;
&lt;p&gt;모형 학습을 위해서 필요한 필수 패키지를 설치한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(modelr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(moderndive)
&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;(na.action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; na.warn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-sample-데이터-추출&#34;&gt;(1) Sample 데이터 추출&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;evals&lt;/code&gt; 데이터에서 20개 정도의 데이터만 추출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 재현성&lt;/span&gt;
sample_20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; evals &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sample_n&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(bty_avg, score)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-250개의-모형&#34;&gt;(2) 250개의 모형&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;evals&lt;/code&gt; 데이터에 있는 2개의 변수를 활용해서 산점도를 그려본다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x축은 &lt;code&gt;bty_avg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;y축은 &lt;code&gt;score&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 보면, 가운데 기준으로 위쪽으로 데이터가 모여 있는 것을 볼 수 있다.&lt;/li&gt;
&lt;li&gt;이 때, 양변수가 만나는 점을 설명할 수 있는 모형을 만들어보자.&lt;/li&gt;
&lt;li&gt;보통 이러한 관계를 선형 관계라고 표현한다.
$$ y = a_0 + a_x \times x $$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 데이터에 접하는 모형 250개를 만들어 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;models &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tibble&lt;/span&gt;(
  a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;),
  a2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1, slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2), data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그림에서 보는 것처럼 굉장히 다양한 모형을 만들면서 최적의 모형을 찾는 과정이 데이터 분석의 프로세스라고 보면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-최적의-모형-찾기&#34;&gt;(3) 최적의 모형 찾기&lt;/h3&gt;
&lt;p&gt;최적의 모형은 어떻게 찾을 수 있을까?&lt;/p&gt;
&lt;p&gt;최적의 모형을 찾으려면 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내 &lt;code&gt;geom_smooth()&lt;/code&gt;를 사용할 수 있다. 그러나, 문제는 &lt;code&gt;geom_smooth&lt;/code&gt;를 사용하면 시각적으로는 결과적으로는 도움이 되지만, 실제 중간과정은 생략되었기 때문에 설명 부분에서는 조금 아쉬움이 있다.&lt;/p&gt;
&lt;p&gt;이 부분이 오늘 과정의 핵심이며, 1차원 함수의 기울기와 상수를 찾는 것을 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_smooth&lt;/span&gt;(method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lm&amp;#34;&lt;/span&gt;, se&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-computing-distance&#34;&gt;(4) Computing Distance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최적의 모형을 찾은 다음에 각각의 모형으로 각 점들이 얼마나 떨어졌는지 확인하는 함수를 작성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3가지 함수가 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model_1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;measure_distance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eval_dist&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;model_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(a, data) {
  a[1] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bty_avg &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[2]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;위 함수는 기울기와 상수를 정의하는 단순 회귀 모형 함수를 만든 것이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[1]&lt;/code&gt;은 상수를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[2]&lt;/code&gt;은 기울기를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data$bty_avg&lt;/code&gt;는 입력값을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;measure_distance &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(mod, data) {
  diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;score &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model_1&lt;/span&gt;(mod, data)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(diff^2))
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;measure_distance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), sample_20)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7.23253
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최적의 모형을 찾을 때 &lt;code&gt;RMSE&lt;/code&gt;이라는 평균 제곱근 오차라는 통계적인 평가지표를 활용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 함수는 기울기(=3)와 상수(=2)를 적용해서 데이터 &lt;code&gt;sample_20&lt;/code&gt;에 대한 RMSE 값을 측정한 결과는 &lt;code&gt;7.23253&lt;/code&gt; 이 나왔다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-all-model-dist&#34;&gt;(5) All model dist&lt;/h3&gt;
&lt;p&gt;이제 전체 데이터와 모형간의 &lt;code&gt;거리&lt;/code&gt;를 계산한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;all_model_dist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(a1, a2) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;measure_distance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(a1, a2), sample_20)
}

models2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; models &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; purrr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map2_dbl&lt;/span&gt;(a1, a2, all_model_dist))

models2 &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##      a1     a2  dist
##   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.640  0.699 1.42 
## 2 1.27  -0.461 4.85 
## 3 3.34   0.260 0.666
## 4 2.34   0.732 1.53 
## 5 3.70   0.317 1.00
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;6-best-5-model&#34;&gt;(6) Best 5 model&lt;/h3&gt;
&lt;p&gt;위 데이터를 근거로 가장 좋은 모델 5개를 찾는 그래프를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bty_avg, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grey30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1, slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dist), 
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(models2, &lt;span style=&#34;color:#a6e22e&#34;&gt;rank&lt;/span&gt;(dist) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-9-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 주어진 데이터에서 가장 좋은 모형 5개를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-최적의-모형-찾기&#34;&gt;(7) 최적의 모형 찾기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 &lt;code&gt;optim()&lt;/code&gt; 함수를 활용해서 최적의 기울기와 상수를 찾아보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;best &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;optim&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), measure_distance, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_20)

best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 3.91539624 0.07585949
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기울기와 상수를 적용하여 다시 &lt;code&gt;ggplot2&lt;/code&gt; 그래프를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(sample_20, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(bty_avg, score)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grey30&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_abline&lt;/span&gt;(intercept &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par[1], slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; best&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par[2])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch04_modeling_visualisation_files/figure-html/unnamed-chunk-11-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제로 &lt;code&gt;lm&lt;/code&gt; 함수를 활용해여 기울기와 상수를 구해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;lm_mod &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt;(score &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; bty_avg, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample_20)

&lt;span style=&#34;color:#a6e22e&#34;&gt;coef&lt;/span&gt;(lm_mod)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## (Intercept)     bty_avg 
##  3.91595907  0.07572129
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;실제로 &lt;code&gt;best&lt;/code&gt;에서 추출한 것과, &lt;code&gt;lm&lt;/code&gt; 함수를 사용한 값과 동일한 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번 포스트의 목적은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용하여 최적의 모형을 찾는 과정을 살펴 봤다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시각화는 이렇게 모형을 찾는 과정도 넣을 수 있는데, 이러한 시각화를 활용하면 보다 효율적으로 선형회귀 모형에 대해 설명을 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Grolemund, G., &amp;amp; Wickham, H. (n.d.). R for Data Science. Retrieved from &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;https://r4ds.had.co.nz/&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 07 Polar Chart</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_07_polar_chart/</link>
      <pubDate>Sat, 09 May 2020 15:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_07_polar_chart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-polar-chart&#34;&gt;II. Polar Chart&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Polar Chart&lt;/code&gt;는 보통 &lt;code&gt;Spider Web Plot&lt;/code&gt;이라고 부르기도 한다. 이번에는 간단하게 데이터를 만들어서 그래프를 작성하도록 해보자.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-생성&#34;&gt;(1) 데이터 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;주요 과목별 중간고사 점수와 기말고사 점수 데이터를 만들었다고 가정해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

&lt;span style=&#34;color:#75715e&#34;&gt;# 주요 과목&lt;/span&gt;
subjects &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Korean Language&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Math&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Science&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;History&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Programming&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# grades&lt;/span&gt;
mid_grades &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;]
final_grades &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# theta&lt;/span&gt;
theta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi, len(mid_grades))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(theta)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[0.         1.04719755 2.0943951  3.14159265 4.1887902  5.23598776
 6.28318531]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 첫번째 값과 마지막 값이 동일한 것을 확인할 수 있다. 이유는 원 그래프를 그릴 때, 선이 이어지도록 해줘야 하기 때문에 &lt;code&gt;polar graph&lt;/code&gt;를 작성할 때는 데이터 셋에 주의해야 한다.&lt;/li&gt;
&lt;li&gt;우선 &lt;code&gt;np.linspace&lt;/code&gt; 값은 축을 작성할 때, 간격 만들기에 사용되는 함수이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theta&lt;/code&gt; 값의 역할은 x축의 역할을 한다. 즉, &lt;code&gt;plt.plot(x, y)&lt;/code&gt; 형태로 작성할 때, &lt;code&gt;x&lt;/code&gt;값 대신 대응하여 &lt;code&gt;theta&lt;/code&gt;값을 입력해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-spider-plot-초기화&#34;&gt;(2) Spider Plot 초기화&lt;/h3&gt;
&lt;p&gt;첫번째로 해야할 작업은 &lt;code&gt;Spider Plot&lt;/code&gt;을 생성하는 것이다. 우선 코드를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(polar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.PolarAxesSubplot at 0x7f58477a7cf8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_07_polar_chart/output_8_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spider Plot&lt;/code&gt; 그래프를 그리기 위해서는 &lt;code&gt;plt.subplot()&lt;/code&gt;안에 인수 &lt;code&gt;polar=True&lt;/code&gt;값을 입력해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-격자-생성&#34;&gt;(3) 격자 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(polar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

(lines, labels) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thetagrids(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, int(&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(subjects))), (subjects))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_07_polar_chart/output_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력값을 변수 두개에 저장하는 코드를 진행한다. (&lt;code&gt;lines&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.thetagrids.html&#34;&gt;plt.thetagrids&lt;/a&gt;는 &lt;code&gt;polar&lt;/code&gt; 그래프 작성에 필요한 &lt;code&gt;theta gridlines&lt;/code&gt;을 획득하기 위한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(lines, labels) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thetagrids(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, int(&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(subjects))), (subjects))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;그래프 특성상, 격자(&lt;code&gt;line&lt;/code&gt;)와 함께 &lt;code&gt;lables&lt;/code&gt;가 동시에 필요하기 때문에 &lt;code&gt;입력 값을 변수 두 개에 저장하는&lt;/code&gt; 형태로 작성하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-방사형-그래프-완성&#34;&gt;(4) 방사형 그래프 완성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 코드부터 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(polar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

(lines, labels) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thetagrids(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;, int(&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(subjects))), (subjects))

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(theta, mid_grades)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fill(theta, mid_grades, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(theta, final_grades)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mid-Term Grades&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Final-Term Grades&amp;#39;&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mid Vs. Final grades by Subject&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_07_polar_chart/output_14_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot.fill&lt;/code&gt;을 작성한 이유는, &lt;code&gt;mid_grades&lt;/code&gt;의 영역을 표시하기 위함이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;b&#39;&lt;/code&gt;는 파란색을 뜻하는 &lt;code&gt;blue&lt;/code&gt;를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt;는 투명도를 의미하며 0~1 사이의 값이 온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_07_polar_chart.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automate Excel Reporting With Pandas</title>
      <link>https://chloevan.github.io/python/rpa/automate_excel_reporting_with_pandas/</link>
      <pubDate>Fri, 08 May 2020 01:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/rpa/automate_excel_reporting_with_pandas/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터는 코로나 데이터를 활용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;일부의 사람들이 &lt;code&gt;R&lt;/code&gt;과 &lt;code&gt;Python&lt;/code&gt;을 사용하지만, 대부분의 사람들은 엑셀을 사용한다. 피벗테이블은 모든 직장인이 알아야 하는 필수 용어로, 전체 데이터를 빠르게 요약해주는 일종의 &lt;code&gt;skill&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;오늘 배울 포스트는 피벗 테이블 작성과 파이썬에서 만들어진 그래프를 엑셀 파일에 포함하여 내보내는 예제를 준비하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본 장에서는 피벗테이블에 대해서는 자세히 다루지는 않는다. 이전 포스트를 참고하기를 바란다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/python/pandas/pandas_pivot_table/&#34;&gt;pandas pivot table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-피벗-테이블-예제&#34;&gt;II. 피벗 테이블 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;국가별로 피벗테이블을 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-라이브러리-불러오기&#34;&gt;(1) 라이브러리 불러오기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;엑셀 자동화를 위한 라이브러리를 불러옵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openpyxl &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_workbook
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openpyxl.styles &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Font
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openpyxl.chart &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BarChart, Reference
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pandas&lt;/code&gt; 모듈은 데이터 가공 및 엑셀 파일을 만드는 것과 관련이 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Openpyxl&lt;/code&gt; 모듈은 &lt;code&gt;chart&lt;/code&gt;를 엑셀 파일에 추가할 때 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-데이터-가져오기&#34;&gt;(2) 데이터 가져오기&lt;/h3&gt;
&lt;p&gt;데이터는 코로나 데이터를 활용한다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 데이터는 아래와 같은 변수로 구성이 되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dateRep, day, month, year: 기록된 날짜를 의미한다.&lt;/li&gt;
&lt;li&gt;cases: 한국에서는 &lt;code&gt;확진자수&lt;/code&gt;로 정의되었다.&lt;/li&gt;
&lt;li&gt;deaths: 사망자수이다.&lt;/li&gt;
&lt;li&gt;countriesAndTerritories, geoId, countryterritoryCode: 국가명과 연관이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/covid_19/covid_19.csv&amp;#39;&lt;/span&gt;
covid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(covid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | dateRep    |   day |   month |   year |   cases |   deaths | countriesAndTerritories   | geoId   | countryterritoryCode   |   popData2018 |
|---:|:-----------|------:|--------:|-------:|--------:|---------:|:--------------------------|:--------|:-----------------------|--------------:|
|  0 | 2020/04/05 |     5 |       4 |   2020 |      35 |        1 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  1 | 2020/04/04 |     4 |       4 |   2020 |       0 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  2 | 2020/04/03 |     3 |       4 |   2020 |      43 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  3 | 2020/04/02 |     2 |       4 |   2020 |      26 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  4 | 2020/04/01 |     1 |       4 |   2020 |      25 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;covid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 8905 entries, 0 to 8904
Data columns (total 10 columns):
 #   Column                   Non-Null Count  Dtype  
---  ------                   --------------  -----  
 0   dateRep                  8905 non-null   object 
 1   day                      8905 non-null   int64  
 2   month                    8905 non-null   int64  
 3   year                     8905 non-null   int64  
 4   cases                    8905 non-null   int64  
 5   deaths                   8905 non-null   int64  
 6   countriesAndTerritories  8905 non-null   object 
 7   geoId                    8883 non-null   object 
 8   countryterritoryCode     8824 non-null   object 
 9   popData2018              8873 non-null   float64
dtypes: float64(1), int64(5), object(4)
memory usage: 695.8+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-피벗테이블-만들기&#34;&gt;(3) 피벗테이블 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;판다스에는 &lt;code&gt;.pivot_table()&lt;/code&gt; 함수가 존재한다.&lt;/li&gt;
&lt;li&gt;각 국가별로 확진자수를 확인해보는 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_by_country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot_table(covid, index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countriesAndTerritories&amp;#39;&lt;/span&gt;, values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;, aggfunc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_by_country)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                         cases
countriesAndTerritories       
Afghanistan                270
Albania                    333
Algeria                   1300
Andorra                    466
Angola                      10
...                        ...
Uzbekistan                 266
Venezuela                  144
Vietnam                    240
Zambia                      39
Zimbabwe                     9

[204 rows x 1 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;먼저, 각각의 인수를 확인하자.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pivot_table()&lt;/code&gt; 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;covid&lt;/code&gt;는 데이터를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;는 기준점이 되는 변수를 의미하며, 보통 문자열 변수를 작성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values&lt;/code&gt;는 계산하려는 변수를 의미하며, 보통 숫자열 변수를 작성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aggfunc&lt;/code&gt;는 기초통계함수가 온다. 여기에서는 &lt;code&gt;sum&lt;/code&gt;이 사용되었다. 참고로 &lt;code&gt;default&lt;/code&gt;는 평균을 의미하는 &lt;code&gt;mean&lt;/code&gt;이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-피벗테이블-정렬&#34;&gt;(4) 피벗테이블 정렬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 정렬이 되어 있지 않으니 깔끔하게 정리된 것 같지가 않다. &lt;code&gt;cases&lt;/code&gt;를 기준으로 정렬을 해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_by_country2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cases_by_country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cases&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_by_country2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;               countriesAndTerritories   cases
0             United_States_of_America  312237
1                                Spain  124736
2                                Italy  124632
3                              Germany   91714
4                                China   82575
..                                 ...     ...
199                            Burundi       3
200  Bonaire, Saint Eustatius and Saba       2
201                   Papua_New_Guinea       1
202        Falkland_Islands_(Malvinas)       1
203                        Timor_Leste       1

[204 rows x 2 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;정렬을 위해서 &lt;code&gt;sort_values()&lt;/code&gt;함수를 활용했다.&lt;/li&gt;
&lt;li&gt;내림차순으로 할지, 오름차순으로 할지 결정해야 하는데 기본적으로 오름차순으로 세팅이 되어 있기 때문에 내림차순으로 바꾸려면 &lt;code&gt;ascending=False&lt;/code&gt;로 한다.&lt;/li&gt;
&lt;li&gt;행의 순서를 바꿔줘야 하기 때문에 &lt;code&gt;reset_index()&lt;/code&gt;로 지정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-엑셀-파일-만들기&#34;&gt;III. 엑셀 파일 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;피벗 테이블이 완성이 되었다면 이제, 엑셀 파일을 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/content/pandas_excel.xlsx&amp;#39;&lt;/span&gt;)
cases_by_country2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_excel(file_path, sheet_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases_by_country2&amp;#39;&lt;/span&gt;, startrow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;pandas_excel.xlsx  sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;실제 생성되었는지 확인해보자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_path&lt;/code&gt;는 파일명과 함께 &lt;code&gt;file_path&lt;/code&gt;가 저장되는 곳을 말한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sheet_name&lt;/code&gt;는 시트명을 의미하고, &lt;code&gt;startrow=3&lt;/code&gt;을 지정한 이유는 &lt;code&gt;headers&lt;/code&gt;를 추후에 지정하기 위해서다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-엑셀-파일-불러오기-및-제목-입력&#34;&gt;(1) 엑셀 파일 불러오기 및 제목 입력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;만들어진 엑셀파일을 &lt;code&gt;wb&lt;/code&gt; 함수를 사용해서 불러온다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sheet1[&#39;A1&#39;]&lt;/code&gt;은 엑셀 열의 이름을 의미한다.
&lt;ul&gt;
&lt;li&gt;각 열마다 텍스트를&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 엑셀 파일 불러오기&lt;/span&gt;
wb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_workbook(file_path)
sheet1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wb[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases_by_country2&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# 셀 텍스트 입력 및 스타일 적용&lt;/span&gt;
sheet1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A1&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Top 5 Cases by Country&amp;#39;&lt;/span&gt;
sheet1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A2&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data is from EU Opne Data Portal&amp;#39;&lt;/span&gt;
sheet1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NO&amp;#39;&lt;/span&gt;

sheet1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A1&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;
sheet1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A2&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Headline 2&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-피벗테이블-insert&#34;&gt;(2) 피벗테이블 Insert&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;작성된 피벗테이블을 &lt;code&gt;for-loop&lt;/code&gt;를 활용하여 입력한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.style=&#39;Comma&#39;&lt;/code&gt;은 &lt;code&gt;Cell&lt;/code&gt; 값의 텍스트에 스타일을 주겠다는 뜻이며, 숫자이기 때문에 &lt;code&gt;1,000&lt;/code&gt; 형태로 출력된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;):
    sheet1[f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C{i}&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Comma&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-그래프-작성&#34;&gt;(3) 그래프 작성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이제 본격적으로 그래프를 작성해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 그래프 작성하기&lt;/span&gt;
bar_chart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BarChart()

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reference(sheet1, min_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, max_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, min_row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, max_row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
categories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reference(sheet1, min_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, min_row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, max_row&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
bar_chart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_data(data, titles_from_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
bar_chart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_categories(categories)
sheet1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_chart(bar_chart, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F4&amp;#34;&lt;/span&gt;)

bar_chart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Top 5 Cases by Country&amp;#39;&lt;/span&gt;
bar_chart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
wb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_path)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;우선 &lt;code&gt;BarChart()&lt;/code&gt;를 객체로 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 즉, value값과, &lt;code&gt;category&lt;/code&gt;값에 해당하는 테이블을 찾는다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;col&lt;/code&gt;은 테이블의 변수를 의미하고, &lt;code&gt;row&lt;/code&gt;는 행을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/image/pandas/pandas_excel/RPA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;p&gt;Pandas와 엑셀을 활용한 RPA 보고서의 첫발을 내딛었다. 영어로 된 것을 번역하지만, 설명이 조금 아쉬워서, 결국엔 패키지 공식 홈페이지를 가야 이해가 빨리 되었다.&lt;/p&gt;
&lt;p&gt;다양한 Tutorial이 있으니, 꼭 &lt;a href=&#34;https://openpyxl.readthedocs.io/en/stable/charts/bar.html#vertical-horizontal-and-stacked-bar-charts&#34;&gt;openpyxl&lt;/a&gt;에서 확인 후 함수를 사용하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Piepenbreier, N. (2020, April 16). Automate Your (Boring!) Excel Reporting with Python!. Retrieved from &lt;a href=&#34;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&#34;&gt;https://towardsdatascience.com/automate-excel-reporting-with-python-233dd61fb0f2&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;데이터 소스는 &lt;code&gt;EU Opne Data Portal&lt;/code&gt;에 &lt;a href=&#34;https://data.europa.eu/euodp/en/data/dataset/covid-19-coronavirus-data/resource/55e8f966-d5c8-438e-85bc-c7a5a26f4863&#34;&gt;COVID-19 Coronavirus data&lt;/a&gt;에서 가져왔고 그중 일부를 csv로 변환하여 &lt;code&gt;github&lt;/code&gt;에 보관했다. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>pandas pivot table</title>
      <link>https://chloevan.github.io/python/pandas/pandas_pivot_table/</link>
      <pubDate>Tue, 05 May 2020 14:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/pandas_pivot_table/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/python_edu/02_datatransformation/pandas_logo.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 &lt;code&gt;Reference&lt;/code&gt;는 꼭 확인하셔서 교재 구매 또는 관련 &lt;code&gt;Reference&lt;/code&gt;를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터는 코로나 데이터를 활용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-overview&#34;&gt;I. Overview&lt;/h2&gt;
&lt;p&gt;일부의 사람들이 &lt;code&gt;R&lt;/code&gt;과 &lt;code&gt;Python&lt;/code&gt;을 사용하지만, 대부분의 사람들은 엑셀을 사용한다. 피벗테이블은 모든 직장인이 알아야 하는 필수 용어로, 전체 데이터를 빠르게 요약해주는 일종의 &lt;code&gt;skill&lt;/code&gt;이다.&lt;/p&gt;
&lt;h2 id=&#34;ii-피벗-테이블-만들기-예제&#34;&gt;II. 피벗 테이블 만들기 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이제 본격적으로 피벗 테이블을 만들어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-데이터-가져오기&#34;&gt;(1) 데이터 가져오기&lt;/h3&gt;
&lt;p&gt;데이터는 코로나 데이터를 활용한다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 데이터는 아래와 같은 변수로 구성이 되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dateRep, day, month, year: 기록된 날짜를 의미한다.&lt;/li&gt;
&lt;li&gt;cases: 한국에서는 &lt;code&gt;확진자수&lt;/code&gt;로 정의되었다.&lt;/li&gt;
&lt;li&gt;deaths: 사망자수이다.&lt;/li&gt;
&lt;li&gt;countriesAndTerritories, geoId, countryterritoryCode: 국가명과 연관이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/covid_19/covid_19.csv&amp;#39;&lt;/span&gt;
covid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(covid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | dateRep    |   day |   month |   year |   cases |   deaths | countriesAndTerritories   | geoId   | countryterritoryCode   |   popData2018 |
|---:|:-----------|------:|--------:|-------:|--------:|---------:|:--------------------------|:--------|:-----------------------|--------------:|
|  0 | 2020/04/05 |     5 |       4 |   2020 |      35 |        1 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  1 | 2020/04/04 |     4 |       4 |   2020 |       0 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  2 | 2020/04/03 |     3 |       4 |   2020 |      43 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  3 | 2020/04/02 |     2 |       4 |   2020 |      26 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  4 | 2020/04/01 |     1 |       4 |   2020 |      25 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;covid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 8905 entries, 0 to 8904
Data columns (total 10 columns):
 #   Column                   Non-Null Count  Dtype  
---  ------                   --------------  -----  
 0   dateRep                  8905 non-null   object 
 1   day                      8905 non-null   int64  
 2   month                    8905 non-null   int64  
 3   year                     8905 non-null   int64  
 4   cases                    8905 non-null   int64  
 5   deaths                   8905 non-null   int64  
 6   countriesAndTerritories  8905 non-null   object 
 7   geoId                    8883 non-null   object 
 8   countryterritoryCode     8824 non-null   object 
 9   popData2018              8873 non-null   float64
dtypes: float64(1), int64(5), object(4)
memory usage: 695.8+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-피벗테이블-만들기&#34;&gt;(2) 피벗테이블 만들기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;판다스에는 &lt;code&gt;.pivot_table()&lt;/code&gt; 함수가 존재한다.&lt;/li&gt;
&lt;li&gt;각 국가별로 확진자수를 확인해보는 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_by_country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot_table(covid, index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;, values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;, aggfunc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_by_country)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;                      cases
countryterritoryCode       
ABW                      64
AFG                     270
AGO                      10
ALB                     333
AND                     466
...                     ...
VNM                     240
XKX                     126
ZAF                    1585
ZMB                      39
ZWE                       9

[199 rows x 1 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;먼저, 각각의 인수를 확인하자.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pivot_table()&lt;/code&gt; 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;covid&lt;/code&gt;는 데이터를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;는 기준점이 되는 변수를 의미하며, 보통 문자열 변수를 작성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values&lt;/code&gt;는 계산하려는 변수를 의미하며, 보통 숫자열 변수를 작성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aggfunc&lt;/code&gt;는 기초통계함수가 온다. 여기에서는 &lt;code&gt;sum&lt;/code&gt;이 사용되었다. 참고로 &lt;code&gt;default&lt;/code&gt;는 평균을 의미하는 &lt;code&gt;mean&lt;/code&gt;이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-피벗테이블-정렬&#34;&gt;(3) 피벗테이블 정렬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 정렬이 되어 있지 않으니 깔끔하게 정리된 것 같지가 않다. &lt;code&gt;cases&lt;/code&gt;를 기준으로 정렬을 해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_by_country2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cases_by_country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cases&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_by_country2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    countryterritoryCode   cases
0                    USA  312237
1                    ESP  124736
2                    ITA  124632
3                    DEU   91714
4                    CHN   82575
..                   ...     ...
194                  GMB       4
195                  VGB       3
196                  BDI       3
197                  TLS       1
198                  PNG       1

[199 rows x 2 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;정렬을 위해서 &lt;code&gt;sort_values()&lt;/code&gt;함수를 활용했다.&lt;/li&gt;
&lt;li&gt;내림차순으로 할지, 오름차순으로 할지 결정해야 하는데 기본적으로 오름차순으로 세팅이 되어 있기 때문에 내림차순으로 바꾸려면 &lt;code&gt;ascending=False&lt;/code&gt;로 한다.&lt;/li&gt;
&lt;li&gt;행의 순서를 바꿔줘야 하기 때문에 &lt;code&gt;reset_index()&lt;/code&gt;로 지정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-multi-colums&#34;&gt;(4) Multi Colums&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 &lt;code&gt;cases&lt;/code&gt;와 &lt;code&gt;deaths&lt;/code&gt;를 한꺼번에 구하도록 해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_deaths_by_country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot_table(covid, index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;, values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;], aggfunc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;)
cases_deaths_by_country2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cases_deaths_by_country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deaths&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cases&amp;#34;&lt;/span&gt;], ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_deaths_by_country2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    countryterritoryCode   cases  deaths
0                    ITA  124632   15362
1                    ESP  124736   11744
2                    USA  312237    8501
3                    FRA   68605    7560
4                    GBR   41903    4313
..                   ...     ...     ...
194                  SLE       4       0
195                  BDI       3       0
196                  VGB       3       0
197                  PNG       1       0
198                  TLS       1       0

[199 rows x 3 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;무언가 복잡해 보이지만, 크게 달라지는 것은 없다.&lt;/li&gt;
&lt;li&gt;다만, 두개 이상의 &lt;code&gt;column&lt;/code&gt;을 입력하려면 함수 안에서 대괄호 &lt;code&gt;[column_1, column_2]&lt;/code&gt; 형태로 입력해주기만 하면 위와 같은 결과물이 나온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-multi-index-and-multi-colums&#34;&gt;(5) Multi Index and Multi Colums&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cases&lt;/code&gt;와 &lt;code&gt;deaths&lt;/code&gt;를 확인하기 위함이니, &lt;code&gt;values&lt;/code&gt;에 입력을 했다. 그러면 &lt;code&gt;확진자수-사망자수 ~ 국가별-월별&lt;/code&gt;을 하려면 어떻게 작성해야 할까? &lt;code&gt;values&lt;/code&gt;에 적용했던 것처럼 &lt;code&gt;index&lt;/code&gt;에 적용 하기만 하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cases_deaths_by_country_month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot_table(covid, index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;], values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;], aggfunc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;)
cases_deaths_by_country_month2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cases_deaths_by_country_month&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;countryterritoryCode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deaths&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cases&amp;#34;&lt;/span&gt;], ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cases_deaths_by_country_month2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    countryterritoryCode  month  cases  deaths
0                    ABW      3     50       0
1                    ABW      4     14       0
2                    AFG      1      0       0
3                    AFG      2      1       0
4                    AFG      3    140       4
..                   ...    ...    ...     ...
587                  ZAF      4    259       6
588                  ZMB      3     35       0
589                  ZMB      4      4       1
590                  ZWE      3      7       1
591                  ZWE      4      2       0

[592 rows x 4 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;각 인수의 의미는 동일하다. 다만, 정렬 순서만 조금 바뀌었는데, &lt;code&gt;8905&lt;/code&gt;개의 데이터가 깔끔하게 요약된 것을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;countryterritoryCode&lt;/code&gt;에서 원하는 데이터를 필터를 해서 국가별로 비교할 수도 있고, 그래프를 작성할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-결론&#34;&gt;III. 결론&lt;/h2&gt;
&lt;p&gt;피벗 테이블은 위대하다. 데이터를 다루는 모든 Tool에 기본적으로 &lt;code&gt;pivot&lt;/code&gt; 테이블 기능이 들어가 있다. 피벗 테이블을 활용하면 깔끔한 보고서를 만드는데 매우 훌륭한 기초자료가 될 수 있다.&lt;/p&gt;
&lt;p&gt;위 데이터는 참고로 4/6일까지의 데이터이기 때문에 한달이 지난 시점 어떻게 바뀌었는지 비교 분석하는 것은 독자의 몫으로 남겨둔다.&lt;/p&gt;
&lt;p&gt;그러나, 아직까지는 파이썬 내에서만 확인이 가능하며, 이를 엑셀로 내보내는 작업이 남는다. 엑셀로 내보내는 것은 결과물이며, 이를 바탕으로 의사결정을 수립하는데 있어서 매우 훌륭한 기초자료가 될 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;다음 포스트에서는 피벗테이블과 그래프를 작성하여 엑셀로 내보내는 것까지의 과정을 담아보도록 한다.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s your turn. Learn by doing.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Piepenbreier, N. (2020, April 16). A Step-by-Step Guide to Pandas Pivot Tables. Retrieved from &lt;a href=&#34;https://towardsdatascience.com/a-step-by-step-guide-to-pandas-pivot-tables-e0641d0c6c70&#34;&gt;https://towardsdatascience.com/a-step-by-step-guide-to-pandas-pivot-tables-e0641d0c6c70&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;데이터 소스는 &lt;code&gt;EU Opne Data Portal&lt;/code&gt;에 &lt;a href=&#34;https://data.europa.eu/euodp/en/data/dataset/covid-19-coronavirus-data/resource/55e8f966-d5c8-438e-85bc-c7a5a26f4863&#34;&gt;COVID-19 Coronavirus data&lt;/a&gt;에서 가져왔고 그중 일부를 csv로 변환하여 &lt;code&gt;github&lt;/code&gt;에 보관했다. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ch03 - gghistostats</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch03_gghistostats/</link>
      <pubDate>Mon, 04 May 2020 11:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch03_gghistostats/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;[^2]에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggstatsplot)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번에는 보고서에 작성할 시각화 보고서를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ggplot2-with-histogram&#34;&gt;III. ggplot2 with Histogram&lt;/h2&gt;
&lt;p&gt;지난 포스트 &lt;a href=&#34;https://chloevan.github.io/r/datavisualisation/ch02_histogram/&#34;&gt;ch02 - Histogram&lt;/a&gt;에서 히스토그램에 관한 그래프를 그려봤다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예시) 이 때, 1월과 7월을 비교하는 그래프를 그려본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; mean_sales

jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))
mean_jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; mean_sales &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(jan_jul, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_jan_jul, 
             &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grp.mean, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month), 
             linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그렇지만, 통계 결과 보고서로 제출하기에는 무언가 아쉽다. ggplot2 패키지 extension 중에서 &lt;code&gt;ggstatsplot&lt;/code&gt; 패키지가 있다. 꾸준하게 버전이 업데이트 중인 것으로 봐서 통계 보고서 작성 시, 참조하면 좋을 것 같다.&lt;/p&gt;
&lt;h2 id=&#34;iv-gghistostats&#34;&gt;IV. gghistostats&lt;/h2&gt;
&lt;p&gt;우선 &lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/gghistostats.html&#34;&gt;tutorial&lt;/a&gt;를 참조해서 시각화를 작성해보자.&lt;/p&gt;
&lt;h3 id=&#34;1-sample-tutorial&#34;&gt;(1) Sample Tutorial&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(psych)
dplyr&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; psych&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sat.act)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 700
## Columns: 6
## $ gender    &amp;lt;int&amp;gt; 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2,…
## $ education &amp;lt;int&amp;gt; 3, 3, 3, 4, 2, 5, 5, 3, 4, 5, 3, 4, 4, 4, 3, 4, 3, 4, 4, 4,…
## $ age       &amp;lt;int&amp;gt; 19, 23, 20, 27, 33, 26, 30, 19, 23, 40, 23, 34, 32, 41, 20,…
## $ ACT       &amp;lt;int&amp;gt; 24, 35, 21, 26, 31, 28, 36, 22, 22, 35, 32, 29, 21, 35, 27,…
## $ SATV      &amp;lt;int&amp;gt; 500, 600, 480, 550, 600, 640, 610, 520, 400, 730, 760, 710,…
## $ SATQ      &amp;lt;int&amp;gt; 500, 500, 470, 520, 550, 640, 500, 560, 600, 800, 710, 600,…
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때, &lt;code&gt;ACT&lt;/code&gt; 변수를 가지고 히스토그램으로 시각화 예제가 나온다. 그대로 복사하기 보다는 하나씩 scripting 해서 각각의 인수(Argument)가 무엇을 의미하는지 음미하면서 실습을 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ggstatsplot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gghistostats&lt;/span&gt;(
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; psych&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sat.act, &lt;span style=&#34;color:#75715e&#34;&gt;# data from which variable is to be taken&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ACT, &lt;span style=&#34;color:#75715e&#34;&gt;# numeric variable&lt;/span&gt;
  results.subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t run statistical tests&lt;/span&gt;
  messages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off messages&lt;/span&gt;
  xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ACT Score&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# x-axis label&lt;/span&gt;
  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Distribution of ACT Scores&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# title for the plot&lt;/span&gt;
  subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N = 700&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# subtitle for the plot&lt;/span&gt;
  caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data courtesy of: SAPA project (https://sapa-project.org)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# caption for the plot&lt;/span&gt;
  centrality.k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# show 1 decimal places for centrality label&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 보고서를 출력할 수가 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-1월과-7월-데이터-비교-그래프&#34;&gt;(2) 1월과 7월 데이터 비교 그래프&lt;/h3&gt;
&lt;p&gt;그렇다면 한번 적용해보자. 그런데, 우리는 1월과 7월 데이터만 필요하다. 이 때에는 &lt;code&gt;grouping.var&lt;/code&gt; 인수와 &lt;code&gt;plotgrid.args&lt;/code&gt;를 추가하기만 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ggstatsplot&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grouped_gghistostats&lt;/span&gt;(
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jan_jul, &lt;span style=&#34;color:#75715e&#34;&gt;# jan_jul 변경&lt;/span&gt;
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales, &lt;span style=&#34;color:#75715e&#34;&gt;# sales &lt;/span&gt;
  xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sales&amp;#34;&lt;/span&gt;,
  grouping.var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month, &lt;span style=&#34;color:#75715e&#34;&gt;# grouping variable 1 = Jan, 7 = Jul&lt;/span&gt;
  title.prefix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Month&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# prefix for the fixed title&lt;/span&gt;
  k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# number of decimal places in results&lt;/span&gt;
  type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# robust test: one-sample percentile bootstrap&lt;/span&gt;
  test.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# test value against which sample mean is to be compared&lt;/span&gt;
  test.value.line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# show a vertical line at `test.value`&lt;/span&gt;
  bar.measure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;density&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# density&lt;/span&gt;
  centrality.parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;median&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# plotting centrality parameter&lt;/span&gt;
  centrality.line.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#D55E00&amp;#34;&lt;/span&gt;),
  centrality.label.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#D55E00&amp;#34;&lt;/span&gt;),
  test.value.line.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#009E73&amp;#34;&lt;/span&gt;),
  test.value.label.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#009E73&amp;#34;&lt;/span&gt;),
  messages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off messages&lt;/span&gt;
  ggtheme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ggthemes&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme_stata&lt;/span&gt;(), &lt;span style=&#34;color:#75715e&#34;&gt;# changing default theme&lt;/span&gt;
  ggstatsplot.layer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# turn off ggstatsplot theme layer&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# arguments relevant for ggstatsplot::combine_plots&lt;/span&gt;
  title.text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Distribution of Sales across Month(Jan&amp;#34;&lt;/span&gt;,
  caption.text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data is from ggplot2 package&amp;#34;&lt;/span&gt;,
  plotgrid.args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(
    nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;July&amp;#34;&lt;/span&gt;)
  )
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch03_gghistostats_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프처럼, 그룹별로도 시각화를 작성할 수 있다. 그러나, 조금 더 디자인을 하기 원한다면, &lt;code&gt;purrr&lt;/code&gt; 패키지와 같이 코드를 작성하는 것을 권하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/purrr_examples.html?q=purr&#34;&gt;using ggstatsplot with the purrr package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v-향후-방향&#34;&gt;V. 향후 방향&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;올해 논문도 써야 하는데, 위 패키지를 근거로 하나둘씩 한글화를 만들어 봐야겠다는 생각이 든다.&lt;/li&gt;
&lt;li&gt;중간중간 시간이 날 때마다 &lt;code&gt;논문을 위한 시각화&lt;/code&gt; 함수를 만들어 봐야겠다.&lt;/li&gt;
&lt;li&gt;또한, 위 코드에서 보는 것처럼, 한글 설명이 없어서, 위 패키지를 작성하면서 한글화 작업도 조금씩 병행해보려고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ch02 - Histogram</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch02_histogram/</link>
      <pubDate>Sun, 03 May 2020 20:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch02_histogram/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;[^2]에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;를 실행하면 &lt;code&gt;Registered ~&lt;/code&gt;라는 문구가 나왔다면 컴퓨터내 시스템에서 &lt;code&gt;RStudio&lt;/code&gt; 환경으로 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 정상적으로 불러왔다는 뜻이다. 이제 패키지 내 다양한 함수를 사용할 수 있는 사전준비가 완료된 것으로 이해해도 좋다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-ggplot2-with-histogram&#34;&gt;III. ggplot2 with Histogram&lt;/h2&gt;
&lt;p&gt;히스토그램은 언제 그려야 할까?&lt;/p&gt;
&lt;p&gt;산점도 그래프가 두개의 연속형 변수를 통해서 변수간의 관계를 파악하는 그래프라고 한다면, 히스토그램은 연속형 변수 1개를 활용하여 각 변수마다 고유의 분포를 보여주고 싶을 때 작성한다. &lt;code&gt;txhousing&lt;/code&gt; 데이터에서 sales 변수를 가지고 데이터를 작성하도록 해보자.&lt;/p&gt;
&lt;p&gt;우선 아래코드를 실행 후 결과를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프를 보면, 데이터가 오른쪽으로 꼬리모양 형태를 띠며 분포하고 있는 것을 그리고 있다. 특히, sales 값 중 &amp;gt; 7500 이상 되는 값도 눈에 띄는데, 이것을 통계적인 용어로 이상치(outlier)라고 부른다.&lt;/p&gt;
&lt;p&gt;그런데, 이상치는 평균을 한쪽으로 치우치게 만들 뿐 아니라 표준편차를 부풀릴 뿐만 아니라 표준편차를 근간으로 하는 모든 통계적인 모델링에 악영향을 미친다.&lt;/p&gt;
&lt;h3 id=&#34;1-add-color-and-fill&#34;&gt;(1) Add Color and fill&lt;/h3&gt;
&lt;p&gt;히스토그램의 대략적인 기능을 이해했다면, 이제 본격적으로 시각화에 집중해본다. 색상을 입혀보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-3-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-x축에-평균선을-그려보자&#34;&gt;(2) X축에 평균선을 그려보자.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;평균선을 그리려면, &lt;code&gt;geom_vline()&lt;/code&gt; 함수를 추가해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)), 
             color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashed&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;line types의 종류에는,&lt;code&gt;“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”&lt;/code&gt;가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-change-plot-colors-by-groups&#34;&gt;(3) Change Plot Colors by groups&lt;/h3&gt;
&lt;p&gt;우선 &lt;code&gt;dplyr&lt;/code&gt; 패키지를 활용하여 월별 평균을 구해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 2
##    month grp.mean
##    &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
##  1     1     357.
##  2     2     431.
##  3     3     563.
##  4     4     578.
##  5     5     650.
##  6     6     685.
##  7     7     666.
##  8     8     648.
##  9     9     530.
## 10    10     516.
## 11    11     462.
## 12    12     504.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 &lt;code&gt;data.table&lt;/code&gt;을 활용하여 평균을 구해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(data.table)
txhousing2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.table&lt;/span&gt;(txhousing)
txhousing2[, .(Mean&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)), by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##     month     Mean
##  1:     1 356.9289
##  2:     2 430.8285
##  3:     3 563.1863
##  4:     4 577.5174
##  5:     5 649.7366
##  6:     6 685.1188
##  7:     7 665.8299
##  8:     8 647.8975
##  9:     9 529.6961
## 10:    10 516.3344
## 11:    11 462.0295
## 12:    12 504.4146
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;위 방법 중 마음에 드는 것을 선택해 &lt;code&gt;mean_sales&lt;/code&gt;라고 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(month) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(grp.mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sales, na.rm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; mean_sales
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(mean_sales)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   month grp.mean
##   &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
## 1     1     357.
## 2     2     431.
## 3     3     563.
## 4     4     578.
## 5     5     650.
## 6     6     685.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때, 1월과 7월을 비교하는 그래프를 그려본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; txhousing &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))
mean_jan_jul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; mean_sales &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(month))

&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(jan_jul, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sales, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_histogram&lt;/span&gt;(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_vline&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_jan_jul, 
             &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(xintercept&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grp.mean, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;month), 
             linetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_log10&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch02_histogram_files/figure-html/unnamed-chunk-8-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저, &lt;code&gt;geom_vline(new_data, ~)&lt;/code&gt;함수 안에 새로운 데이터를 추가해서 작성하는 것도 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_x_log10()&lt;/code&gt;을 추가하였는데, 로그변환을 통해서 정규변환 형태로 만든 이후에 그래프를 비교하면 보다 시각적으로 비교하는 데 용이하다.&lt;/li&gt;
&lt;li&gt;위와 같이 1월과 7월별로 히스토그램으로도 충분히 그래프를 비교할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-assignment&#34;&gt;IV. Assignment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s your turn.&lt;/li&gt;
&lt;li&gt;전체 평균 데이터셋을 구해서 &lt;code&gt;geom_vline()&lt;/code&gt;함수를 추가해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 06 Table Chart</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_06_table_chart/</link>
      <pubDate>Thu, 30 Apr 2020 19:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_06_table_chart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-table-chart&#34;&gt;II. Table Chart&lt;/h2&gt;
&lt;p&gt;Table Chart는 막대 그래프와 테이블을 섞어서 쓰는 형태가 되겠다. 우선 가상의 Sample 데이터를 만들어보자.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-생성&#34;&gt;(1) 데이터 생성&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

&lt;span style=&#34;color:#75715e&#34;&gt;# Years under consideration&lt;/span&gt;
years &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2010&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2011&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2012&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2013&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# Available Watt&lt;/span&gt;
columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4.5W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6.0W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7.0W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8.5W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9.5W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.5W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;15W&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# UnitsSold&lt;/span&gt;
unitsSold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
              [&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;], 
              [&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;],
              [&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;], 
              [&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;], 
              [&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;]
            ]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(years)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(columns)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(unitsSold)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;2010&#39;, &#39;2011&#39;, &#39;2012&#39;, &#39;2013&#39;, &#39;2014&#39;]
[&#39;4.5W&#39;, &#39;6.0W&#39;, &#39;7.0W&#39;, &#39;8.5W&#39;, &#39;9.5W&#39;, &#39;13.5W&#39;, &#39;15W&#39;]
[[65, 141, 88, 111, 104, 71, 99], [85, 142, 89, 112, 103, 73, 98], [75, 143, 90, 113, 89, 75, 93], [65, 144, 91, 114, 90, 77, 92], [55, 145, 92, 115, 88, 79, 93]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 시각화를 하기 위해 y축을 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-색상조합&#34;&gt;(2) 색상조합&lt;/h3&gt;
&lt;p&gt;전체적인 테이블 차트를 작성하기 전, 먼저 bar 차트를 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrRd(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;, len(years)))
index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(len(columns)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;
bar_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;
y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(len(columns))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(colors)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(index)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y_offset)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[1.         0.96862745 0.9254902  1.        ]
 [0.9945867  0.87996924 0.7216609  1.        ]
 [0.99215686 0.75371011 0.53883891 1.        ]
 [0.97783929 0.52095348 0.33542484 1.        ]
 [0.87930796 0.26811226 0.18336025 1.        ]]

[0.3 1.3 2.3 3.3 4.3 5.3 6.3]

[0. 0. 0. 0. 0. 0. 0.]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;colors는 연도를 의미하고, 연도별로 다르게 색상을 줘서 차별점을 둔다는 뜻이다.
&lt;ul&gt;
&lt;li&gt;우선, &lt;code&gt;cm&lt;/code&gt;은 &lt;code&gt;matplotlib.pyplot&lt;/code&gt; 색상을 의미하고, &lt;code&gt;OrRd&lt;/code&gt;는 일종의 색상의 종류이다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;np.linspace는 일종의 gradation을 주는 것으로 생각하면 된다. &lt;code&gt;len(years)&lt;/code&gt;만큼의 gradation을 주겠다고 선언하는 것과 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index는 columns는 의미하며, X축으로 활용될 것이다.&lt;/li&gt;
&lt;li&gt;bar_width는 X축에서 각 값끼리의 간격을 의미한다.&lt;/li&gt;
&lt;li&gt;y_offset은 &lt;code&gt;unitsSold&lt;/code&gt; 값을 담아서 실제 bar chart의 y축 및 table 셀의 값에 해당된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_06_table_chart/output_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;일종의 그래프를 선언한다는 뜻이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cell_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
n_rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(unitsSold)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_rows): 
  plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(index, unitsSold[row], bar_width, bottom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y_offset, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;colors[row])
  y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; unitsSold[row]
  cell_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1.1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; y_offset])
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cell_text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[&#39;65.0&#39;, &#39;141.0&#39;, &#39;88.0&#39;, &#39;111.0&#39;, &#39;104.0&#39;, &#39;71.0&#39;, &#39;99.0&#39;]]
[[&#39;65.0&#39;, &#39;141.0&#39;, &#39;88.0&#39;, &#39;111.0&#39;, &#39;104.0&#39;, &#39;71.0&#39;, &#39;99.0&#39;], [&#39;150.0&#39;, &#39;283.0&#39;, &#39;177.0&#39;, &#39;223.0&#39;, &#39;207.0&#39;, &#39;144.0&#39;, &#39;197.0&#39;]]
[[&#39;65.0&#39;, &#39;141.0&#39;, &#39;88.0&#39;, &#39;111.0&#39;, &#39;104.0&#39;, &#39;71.0&#39;, &#39;99.0&#39;], [&#39;150.0&#39;, &#39;283.0&#39;, &#39;177.0&#39;, &#39;223.0&#39;, &#39;207.0&#39;, &#39;144.0&#39;, &#39;197.0&#39;], [&#39;225.0&#39;, &#39;426.0&#39;, &#39;267.0&#39;, &#39;336.0&#39;, &#39;296.0&#39;, &#39;219.0&#39;, &#39;290.0&#39;]]
[[&#39;65.0&#39;, &#39;141.0&#39;, &#39;88.0&#39;, &#39;111.0&#39;, &#39;104.0&#39;, &#39;71.0&#39;, &#39;99.0&#39;], [&#39;150.0&#39;, &#39;283.0&#39;, &#39;177.0&#39;, &#39;223.0&#39;, &#39;207.0&#39;, &#39;144.0&#39;, &#39;197.0&#39;], [&#39;225.0&#39;, &#39;426.0&#39;, &#39;267.0&#39;, &#39;336.0&#39;, &#39;296.0&#39;, &#39;219.0&#39;, &#39;290.0&#39;], [&#39;290.0&#39;, &#39;570.0&#39;, &#39;358.0&#39;, &#39;450.0&#39;, &#39;386.0&#39;, &#39;296.0&#39;, &#39;382.0&#39;]]
[[&#39;65.0&#39;, &#39;141.0&#39;, &#39;88.0&#39;, &#39;111.0&#39;, &#39;104.0&#39;, &#39;71.0&#39;, &#39;99.0&#39;], [&#39;150.0&#39;, &#39;283.0&#39;, &#39;177.0&#39;, &#39;223.0&#39;, &#39;207.0&#39;, &#39;144.0&#39;, &#39;197.0&#39;], [&#39;225.0&#39;, &#39;426.0&#39;, &#39;267.0&#39;, &#39;336.0&#39;, &#39;296.0&#39;, &#39;219.0&#39;, &#39;290.0&#39;], [&#39;290.0&#39;, &#39;570.0&#39;, &#39;358.0&#39;, &#39;450.0&#39;, &#39;386.0&#39;, &#39;296.0&#39;, &#39;382.0&#39;], [&#39;345.0&#39;, &#39;715.0&#39;, &#39;450.0&#39;, &#39;565.0&#39;, &#39;474.0&#39;, &#39;375.0&#39;, &#39;475.0&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_06_table_chart/output_12_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X축과 y축에 따라 대응하도록 하는데, lopp를 활용하여 그래프를 작성하겠다는 뜻이고, 이는 &lt;code&gt;matplotlib.pyplot&lt;/code&gt;에서는 자주 쓰이는 문법이다.&lt;/li&gt;
&lt;li&gt;y_offset은 각 리스트에 저장될 &lt;code&gt;unitsSold&lt;/code&gt;이고, loop가 돌 때마다 점점 확장하는 것을 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrRd(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;, len(years)))
index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(len(columns)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;
bar_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;

y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(len(columns))
fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()

cell_text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
n_rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(unitsSold)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_rows): 
  plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(index, unitsSold[row], bar_width, bottom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y_offset, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;colors[row])
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plot)
  y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; unitsSold[row]
  cell_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1.1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; y_offset])
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rect &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plot:
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_height()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(height)
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_x() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_width()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            y_offset[i], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 
            &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; int(y_offset[i]), 
            ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;, 
            va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;BarContainer object of 7 artists&amp;gt;
65.0
141.0
88.0
111.0
104.0
71.0
99.0
&amp;lt;BarContainer object of 7 artists&amp;gt;
85.0
142.0
89.0
112.0
103.0
73.0
98.0
&amp;lt;BarContainer object of 7 artists&amp;gt;
75.0
143.0
90.0
113.0
89.0
75.0
93.0
&amp;lt;BarContainer object of 7 artists&amp;gt;
65.0
144.0
91.0
114.0
90.0
77.0
92.0
&amp;lt;BarContainer object of 7 artists&amp;gt;
55.0
145.0
92.0
115.0
88.0
79.0
93.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_06_table_chart/output_14_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각각의 &lt;code&gt;plot container&lt;/code&gt;들이 담고있는 값들은 &lt;code&gt;rect.get_height()&lt;/code&gt;을 통해서 리스트 형태로 출력할 수 있다.&lt;/li&gt;
&lt;li&gt;이를 받아서, text로 시각화하는 과정이 &lt;code&gt;for rect in plot:&lt;/code&gt; 이하 구문이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;를 통해서, loop를 통해 &lt;code&gt;0~6&lt;/code&gt;까지 하나씩 이동하면서 그래프와 함께 텍스트가 출력된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrRd(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;, len(years)))
index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(len(columns)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;
bar_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;

y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(len(columns))
fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()

cell_text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
n_rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(unitsSold)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_rows): 
  plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(index, unitsSold[row], bar_width, bottom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y_offset, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;colors[row])
  y_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; unitsSold[row]
  cell_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1.1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; y_offset])
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rect &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plot:
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_height()
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_x() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_width()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            y_offset[i], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 
            &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; int(y_offset[i]), 
            ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;, 
            va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
  
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table(cellText&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cell_text, rowLabels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;years, 
          rowColours&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;colors, colLabels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;columns, loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Units Sold&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks([])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Number of LED Bulb Sold/Year&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_06_table_chart/output_16_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 해서 그래프가 완성이 되었다. 해석은 비교적 용이하다. 짙은 빨간색은 2014년 그래프를 가리키고, 4.5W를 기준으로 상하로 그래프가 작성된 것을 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이제 plt.table 이하 구문을 적용하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_06_table_chart&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html&#34;&gt;Choosing Colormaps in Matplotlib&lt;/a&gt;에 가면 다양한 색상을 확인할 수 있다. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 05 pie plot</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_05_pie_chart/</link>
      <pubDate>Mon, 27 Apr 2020 16:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_05_pie_chart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-pie-plot&#34;&gt;II. Pie Plot&lt;/h2&gt;
&lt;p&gt;Pie Chart는 빈도수와 연관이 있는데, 사실 이 그래프는 약간의 호불호가 존재한다. Ian Spence는 &lt;a href=&#34;https://www.researchgate.net/profile/Ian_Spence2/publication/228401311_No_Humble_Pie_The_Origins_and_Usage_of_a_Statistical_Chart/links/0fcfd50c206a89af2e000000/No-Humble-Pie-The-Origins-and-Usage-of-a-Statistical-Chart.pdf?origin=publication_detail&#34;&gt;No Humble Pie:
The Origins and Usage of a Statistical Chart&lt;/a&gt; 라는 페이퍼를 작성했는데, 요지는 이 그래프가 대부분의 전문가들에게 어필하는데 실패했다는 것이다.&lt;/p&gt;
&lt;p&gt;구체적인 이유는 위 논문에서 영어공부도 할겸 찾아보시기를 바란다.&lt;/p&gt;
&lt;p&gt;그럼에도 불구하고, 여전히 사람들은 &lt;code&gt;Pie Chart&lt;/code&gt;가 원에서 비율을 직관적으로 확인할 수 있다는 것에 만족해 하는 것 같다. 특히, 상사나 클라이언트의 연령대가 높으면 높을수록 이러한 그래프를 좋아할 가능성은 경험적으로 조금 높았다.&lt;/p&gt;
&lt;p&gt;빠르게 그래프를 작성하기 위해 데이터부터 가져온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/hmcuesta/PDA_Book/master/Chapter3/pokemonByType.csv&amp;#39;&lt;/span&gt;
pokemonByType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url, index_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), tablefmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;| type     |   amount |
|:---------|---------:|
| Bug      |       45 |
| Dark     |       16 |
| Dragon   |       12 |
| Electric |        7 |
| Fighting |        3 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;샘플 데이터는 매우 중요하다. 처음에는 그 중요성을 잘 몰랐으나, 샘플 데이터의 뜻은 기본적으로 앞단에서 데이터를 전처리하여, 샘플 데이터화 처럼 만들어 달라는 뜻이기도 하다.&lt;/p&gt;
&lt;p&gt;샘플 데이터를 다시 확인해보면, 첫번째 열은 문자로 구성이 되어 있고, 두번째 열은 숫자로 구성이 되어 있는 것을 확인하고 있다.&lt;/p&gt;
&lt;p&gt;즉, 데이터의 빈도수를 말하는 것이다. 이걸 그래프로 그리면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pie(pokemonByType[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amount&amp;#39;&lt;/span&gt;], labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
        shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, startangle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, autopct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1.1f%%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_05_pie_chart/output_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 완성이 되었다. 위 그래프는 사실 기본 그래프이고, 조금 더 응용해서 작업할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;(pct, allvals):
    absolute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pct&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(allvals))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{:.1f}%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;({:d} cnt)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(pct, absolute)


plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pie(pokemonByType[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amount&amp;#39;&lt;/span&gt;], labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
        shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, startangle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, autopct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pct: func(pct, pokemonByType), 
        textprops&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dict(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;))

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index,
          title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PokemonByType Count&amp;#34;&lt;/span&gt;,
          loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center left&amp;#34;&lt;/span&gt;,
          bbox_to_anchor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_05_pie_chart/output_8_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_05_pie_chart.ipynb.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 04 area and stacked plot</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_04_area_stacked_plot/</link>
      <pubDate>Sat, 25 Apr 2020 01:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_04_area_stacked_plot/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-area-and-stacked-plot&#34;&gt;II. Area and Stacked Plot&lt;/h2&gt;
&lt;p&gt;위 그래프를 사용할 때에는 다양한 변수의 소위 누적 효과(&lt;code&gt;cumulative effect&lt;/code&gt;)를 보여줄 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;code&gt;Line Graph&lt;/code&gt;를 작성한 후 각각의 변수에 따라 어떤 차이가 있는지 확인한다. 그래프를 작성해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 데이터 값 생성&lt;/span&gt;
houseLoanMortage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, 
                    &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, 
                    &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;]
utilitiesBills &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, 
                  &lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4219&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2218&lt;/span&gt;, 
                  &lt;span style=&#34;color:#ae81ff&#34;&gt;3218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4233&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# 시각화를 위한 모듈 불러오기&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns

&lt;span style=&#34;color:#75715e&#34;&gt;# 각 변수의 길이에 맞도록 지정 (월이라고 가정해보자)&lt;/span&gt;
months &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;# plot 기본 세팅, 색상 지정&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot([], [], color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sandybrown&amp;#39;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;houseLoanMortage&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot([], [], color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bisque&amp;#39;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utilitiesBills&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# stack 그래프 추가&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stackplot(months, houseLoanMortage, utilitiesBills, 
              colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sandybrown&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bisque&amp;#39;&lt;/span&gt;])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend()

&lt;span style=&#34;color:#75715e&#34;&gt;# 라벨 추가&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Household Expenses&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Months of the year&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cost&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_04_area_stacked_plot/output_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;소스 코드상으로 어려운 것은 아마 없을 것이다. 다만 해석에 조금 유의할 필요는 있다. 위 그래프는 월별 전체 누적 그래프인데, &lt;code&gt;houseLoanMortage&lt;/code&gt;와 &lt;code&gt;utilitiesBills&lt;/code&gt; 사이에 어떤 항목이 지출이 큰 부분인지를 확인할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;이러한 그래프는 특히 시계열과 그래프를 작성하는 데, 비교군이 존재할 때 매우 유용한 그래프라고 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iii-코로나-시각화-area-plot-예제&#34;&gt;III. 코로나 시각화 Area Plot 예제&lt;/h2&gt;
&lt;p&gt;이번에는 이슈가 되고 있는 코로나 데이터를 통해 그래프를 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/covid_19/covid_19.csv&amp;#39;&lt;/span&gt;
covid_19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(covid_19&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | dateRep    |   day |   month |   year |   cases |   deaths | countriesAndTerritories   | geoId   | countryterritoryCode   |   popData2018 |
|---:|:-----------|------:|--------:|-------:|--------:|---------:|:--------------------------|:--------|:-----------------------|--------------:|
|  0 | 2020/04/05 |     5 |       4 |   2020 |      35 |        1 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  1 | 2020/04/04 |     4 |       4 |   2020 |       0 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  2 | 2020/04/03 |     3 |       4 |   2020 |      43 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  3 | 2020/04/02 |     2 |       4 |   2020 |      26 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
|  4 | 2020/04/01 |     1 |       4 |   2020 |      25 |        0 | Afghanistan               | AF      | AFG                    |   3.71724e+07 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 데이터에서 이제, 대표적인 국가만 출력하는 것으로 한다. 그럴려면 국가를 알아야 하기 때문에, 국가만 출력하도록 해보자. &lt;code&gt;unique()&lt;/code&gt; 함수를 사용해서 구해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countriesAndTerritories&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;array([&#39;Afghanistan&#39;, &#39;Albania&#39;, &#39;Andorra&#39;, &#39;Algeria&#39;, &#39;Angola&#39;,
       &#39;Anguilla&#39;, &#39;Antigua_and_Barbuda&#39;, &#39;Argentina&#39;, &#39;Armenia&#39;, &#39;Aruba&#39;,
       &#39;Australia&#39;, &#39;Austria&#39;, &#39;Azerbaijan&#39;, &#39;Bahamas&#39;, &#39;Bahrain&#39;,
       &#39;Bangladesh&#39;, &#39;Barbados&#39;, &#39;Belarus&#39;, &#39;Belgium&#39;, &#39;Belize&#39;, &#39;Benin&#39;,
       &#39;Bermuda&#39;, &#39;Bhutan&#39;, &#39;Bolivia&#39;,
       &#39;Bonaire, Saint Eustatius and Saba&#39;, &#39;Bosnia_and_Herzegovina&#39;,
       &#39;Botswana&#39;, &#39;Brazil&#39;, &#39;British_Virgin_Islands&#39;,
       &#39;Brunei_Darussalam&#39;, &#39;Bulgaria&#39;, &#39;Burkina_Faso&#39;, &#39;Burundi&#39;,
       &#39;Cambodia&#39;, &#39;Cameroon&#39;, &#39;Canada&#39;, &#39;Cape_Verde&#39;,
       &#39;Cases_on_an_international_conveyance_Japan&#39;, &#39;Cayman_Islands&#39;,
       &#39;Central_African_Republic&#39;, &#39;Chad&#39;, &#39;Chile&#39;, &#39;China&#39;, &#39;Colombia&#39;,
       &#39;Congo&#39;, &#39;Costa_Rica&#39;, &#39;Cote_dIvoire&#39;, &#39;Croatia&#39;, &#39;Cuba&#39;,
       &#39;CuraÃ§ao&#39;, &#39;Cyprus&#39;, &#39;Czech_Republic&#39;,
       &#39;Democratic_Republic_of_the_Congo&#39;, &#39;Denmark&#39;, &#39;Djibouti&#39;,
       &#39;Dominica&#39;, &#39;Dominican_Republic&#39;, &#39;Ecuador&#39;, &#39;Egypt&#39;,
       &#39;El_Salvador&#39;, &#39;Equatorial_Guinea&#39;, &#39;Eritrea&#39;, &#39;Estonia&#39;,
       &#39;Eswatini&#39;, &#39;Ethiopia&#39;, &#39;Falkland_Islands_(Malvinas)&#39;,
       &#39;Faroe_Islands&#39;, &#39;Fiji&#39;, &#39;Finland&#39;, &#39;France&#39;, &#39;French_Polynesia&#39;,
       &#39;Gabon&#39;, &#39;Gambia&#39;, &#39;Georgia&#39;, &#39;Germany&#39;, &#39;Ghana&#39;, &#39;Gibraltar&#39;,
       &#39;Greece&#39;, &#39;Greenland&#39;, &#39;Grenada&#39;, &#39;Guam&#39;, &#39;Guatemala&#39;, &#39;Guernsey&#39;,
       &#39;Guinea&#39;, &#39;Guinea_Bissau&#39;, &#39;Guyana&#39;, &#39;Haiti&#39;, &#39;Holy_See&#39;,
       &#39;Honduras&#39;, &#39;Hungary&#39;, &#39;Iceland&#39;, &#39;India&#39;, &#39;Indonesia&#39;, &#39;Iran&#39;,
       &#39;Iraq&#39;, &#39;Ireland&#39;, &#39;Isle_of_Man&#39;, &#39;Israel&#39;, &#39;Italy&#39;, &#39;Jamaica&#39;,
       &#39;Japan&#39;, &#39;Jersey&#39;, &#39;Jordan&#39;, &#39;Kazakhstan&#39;, &#39;Kenya&#39;, &#39;Kosovo&#39;,
       &#39;Kuwait&#39;, &#39;Kyrgyzstan&#39;, &#39;Laos&#39;, &#39;Latvia&#39;, &#39;Lebanon&#39;, &#39;Liberia&#39;,
       &#39;Libya&#39;, &#39;Liechtenstein&#39;, &#39;Lithuania&#39;, &#39;Luxembourg&#39;, &#39;Madagascar&#39;,
       &#39;Malawi&#39;, &#39;Malaysia&#39;, &#39;Maldives&#39;, &#39;Mali&#39;, &#39;Malta&#39;, &#39;Mauritania&#39;,
       &#39;Mauritius&#39;, &#39;Mexico&#39;, &#39;Moldova&#39;, &#39;Monaco&#39;, &#39;Mongolia&#39;,
       &#39;Montenegro&#39;, &#39;Montserrat&#39;, &#39;Morocco&#39;, &#39;Mozambique&#39;, &#39;Myanmar&#39;,
       &#39;Namibia&#39;, &#39;Nepal&#39;, &#39;Netherlands&#39;, &#39;New_Caledonia&#39;, &#39;New_Zealand&#39;,
       &#39;Nicaragua&#39;, &#39;Niger&#39;, &#39;Nigeria&#39;, &#39;North_Macedonia&#39;,
       &#39;Northern_Mariana_Islands&#39;, &#39;Norway&#39;, &#39;Oman&#39;, &#39;Pakistan&#39;,
       &#39;Palestine&#39;, &#39;Panama&#39;, &#39;Papua_New_Guinea&#39;, &#39;Paraguay&#39;, &#39;Peru&#39;,
       &#39;Philippines&#39;, &#39;Poland&#39;, &#39;Portugal&#39;, &#39;Puerto_Rico&#39;, &#39;Qatar&#39;,
       &#39;Romania&#39;, &#39;Russia&#39;, &#39;Rwanda&#39;, &#39;Saint_Barthelemy&#39;,
       &#39;Saint_Kitts_and_Nevis&#39;, &#39;Saint_Lucia&#39;,
       &#39;Saint_Vincent_and_the_Grenadines&#39;, &#39;San_Marino&#39;, &#39;Saudi_Arabia&#39;,
       &#39;Senegal&#39;, &#39;Serbia&#39;, &#39;Seychelles&#39;, &#39;Sierra_Leone&#39;, &#39;Singapore&#39;,
       &#39;Sint_Maarten&#39;, &#39;Slovakia&#39;, &#39;Slovenia&#39;, &#39;Somalia&#39;, &#39;South_Africa&#39;,
       &#39;South_Korea&#39;, &#39;Spain&#39;, &#39;Sri_Lanka&#39;, &#39;Sudan&#39;, &#39;Suriname&#39;, &#39;Sweden&#39;,
       &#39;Switzerland&#39;, &#39;Syria&#39;, &#39;Taiwan&#39;, &#39;Thailand&#39;, &#39;Timor_Leste&#39;,
       &#39;Togo&#39;, &#39;Trinidad_and_Tobago&#39;, &#39;Tunisia&#39;, &#39;Turkey&#39;,
       &#39;Turks_and_Caicos_islands&#39;, &#39;Uganda&#39;, &#39;Ukraine&#39;,
       &#39;United_Arab_Emirates&#39;, &#39;United_Kingdom&#39;,
       &#39;United_Republic_of_Tanzania&#39;, &#39;United_States_of_America&#39;,
       &#39;United_States_Virgin_Islands&#39;, &#39;Uruguay&#39;, &#39;Uzbekistan&#39;,
       &#39;Venezuela&#39;, &#39;Vietnam&#39;, &#39;Zambia&#39;, &#39;Zimbabwe&#39;], dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기에서 &lt;code&gt;South_Korea&lt;/code&gt;, &lt;code&gt;China&lt;/code&gt;, &lt;code&gt;Italy&lt;/code&gt;, &lt;code&gt;United_States_of_America&lt;/code&gt; 이렇게 4개 국가만 날짜별로 어떻게 달라지는지 확인해본다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;code&gt;isin()&lt;/code&gt;을 활용해서 데이터 전처리를 해서 새로운 데이터를 만든다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countriesAndTerritories&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;South_Korea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;China&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Italy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;United_States_of_America&amp;#39;&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | dateRep    |   day |   month |   year |   cases |   deaths | countriesAndTerritories   | geoId   | countryterritoryCode   |   popData2018 |
|---:|:-----------|------:|--------:|-------:|--------:|---------:|:--------------------------|:--------|:-----------------------|--------------:|
|  0 | 2020/04/05 |     5 |       4 |   2020 |      48 |        3 | China                     | CN      | CHN                    |   1.39273e+09 |
|  1 | 2020/04/04 |     4 |       4 |   2020 |      62 |        4 | China                     | CN      | CHN                    |   1.39273e+09 |
|  2 | 2020/04/03 |     3 |       4 |   2020 |      70 |       10 | China                     | CN      | CHN                    |   1.39273e+09 |
|  3 | 2020/04/02 |     2 |       4 |   2020 |     100 |        6 | China                     | CN      | CHN                    |   1.39273e+09 |
|  4 | 2020/04/01 |     1 |       4 |   2020 |      54 |        1 | China                     | CN      | CHN                    |   1.39273e+09 |
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# stack 그래프를 작성하기 위해 데이터를 피벗을 해줘야 한다.  &lt;/span&gt;
plotDF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateRep&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countriesAndTerritories&amp;#39;&lt;/span&gt;])[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unstack(fill_value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(plotDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;| dateRep    |   China |   Italy |   South_Korea |   United_States_of_America |
|:-----------|--------:|--------:|--------------:|---------------------------:|
| 2019/12/31 |      27 |       0 |             0 |                          0 |
| 2020/01/01 |       0 |       0 |             0 |                          0 |
| 2020/01/02 |       0 |       0 |             0 |                          0 |
| 2020/01/03 |      17 |       0 |             0 |                          0 |
| 2020/01/04 |       0 |       0 |             0 |                          0 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 피벗이 완성이 된 이후에 그래프를 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stackplot(plotDF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index,
              [plotDF[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;China&amp;#39;&lt;/span&gt;], plotDF[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Italy&amp;#39;&lt;/span&gt;],
               plotDF[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;South_Korea&amp;#39;&lt;/span&gt;], plotDF[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;United_States_of_America&amp;#39;&lt;/span&gt;]],
              labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;China&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Italy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;South_Korea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;United_States_of_America&amp;#39;&lt;/span&gt;],
              alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;large&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_04_area_stacked_plot/output_14_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iv-실습파일&#34;&gt;IV. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_04_area_stacked_plot.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 03 Scatter Plot</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_03_scatterplot/</link>
      <pubDate>Wed, 22 Apr 2020 22:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_03_scatterplot/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib-기본-그래프&#34;&gt;I. Matplotlib 기본 그래프&lt;/h2&gt;
&lt;p&gt;Matplotlib는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-matplotlib-설치&#34;&gt;II. matplotlib 설치&lt;/h2&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-산점도scatter-plot&#34;&gt;III. 산점도(Scatter Plot)&lt;/h2&gt;
&lt;p&gt;산점도는 서로 다른 두 변수 사이의 관계를 나타날 때 사용한다. 이 때 두 변수는 &lt;code&gt;continous&lt;/code&gt;, 수량형 변수여야 하고, 서로 독립적이어야 한다. 두 연속 변수의 관계를 보여준다는 점에서 선 그래프와 비슷하다. 선 그래프를 그릴 때 &lt;code&gt;plot()&lt;/code&gt; 함수에 &lt;code&gt;o&lt;/code&gt; 옵션을 사용하면 선 없이 점으로만 표현되는데, 산점도라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;또한 산점도 그래프를 작성하면 상관관계도 그릴 수 있다. 상관관계에 대한 내용은 여기에서는 자세하게 서술하지는 않는다.&lt;/p&gt;
&lt;h2 id=&#34;iv-그래프-작성&#34;&gt;IV. 그래프 작성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Goa1 1. 수면시간과 나이에 관한 데이터를 활용하여 실제 나이에 따라 수면시간이 달라지는지 확인해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goal 2. 고등교육 연수에 따른 성인의 평균 임금과 관련된 그래프를 작성해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-데이터-수집&#34;&gt;(1) 데이터 수집&lt;/h3&gt;
&lt;p&gt;먼저 데이터를 가져옵니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/python_visualisation/master/data/sleep_vs_age.csv&amp;#39;&lt;/span&gt;
headers_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min_recommended&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_recommended&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;may_be_appropriate_min&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;may_be_appropriate_max&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min_not_recommended&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_not_recommended&amp;#39;&lt;/span&gt;]

sleep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[:, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#75715e&#34;&gt;# 첫번째 열 제거&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(sleep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    |   age |   min_recommended |   max_recommended |   may_be_appropriate_min |   may_be_appropriate_max |   min_not_recommended |   max_not_recommended |
|---:|------:|------------------:|------------------:|-------------------------:|-------------------------:|----------------------:|----------------------:|
|  0 |     0 |                14 |                17 |                       11 |                       13 |                    11 |                    19 |
|  1 |     1 |                14 |                17 |                       11 |                       13 |                    11 |                    19 |
|  2 |     2 |                14 |                17 |                       11 |                       13 |                    11 |                    19 |
|  3 |     3 |                14 |                17 |                       11 |                       13 |                    11 |                    19 |
|  4 |     4 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
|  5 |     5 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
|  6 |     6 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
|  7 |     7 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
|  8 |     8 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
|  9 |     9 |                12 |                15 |                       10 |                       11 |                    10 |                    18 |
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-matplotlib-방식&#34;&gt;(2) matplotlib 방식&lt;/h3&gt;
&lt;p&gt;수집된 데이터를 토대로 산점도를 작성해본다. 이 때에는 &lt;code&gt;seaborn&lt;/code&gt; 라이브러리를 활용하여 &lt;code&gt;iris&lt;/code&gt; 데이터를 가져온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set()

&lt;span style=&#34;color:#75715e&#34;&gt;# 일반적인 산점도&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;,
            y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min_recommended&amp;#39;&lt;/span&gt;])

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;,
            y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_recommended&amp;#39;&lt;/span&gt;])

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Age of person in Years&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total hours of sleep required&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_03_scatterplot/output_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;그래프를 작성하는 것은 어렵지 않다. 다만 해석이 조금 난해할 뿐이다. 문제는 산점도로 그리니, 무언가 딱딱 끊기는 느낌이다. 이번에는 선 그래프로 전환해보자. 사실 전체적인 코드는 비슷하고, &lt;code&gt;g--&lt;/code&gt;, &lt;code&gt;r--&lt;/code&gt; 명령어만 추가했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set()

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;,
         sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min_recommended&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g--&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;,
         sleep[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_recommended&amp;#39;&lt;/span&gt;], 
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r--&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Age of person in Years&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total hours of sleep required&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_03_scatterplot/output_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 두 그래프 모두 시간이 지남에 따라 필요한 수면시간이 감소하다가 약 18세 되는 시점부터는 일정한 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;iris&lt;/code&gt;데이터를 활용하는데, &lt;code&gt;matplotlib&lt;/code&gt; 스타일로 그래프를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcParams[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;figure.figsize&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcParams[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;figure.dpi&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set()

iris &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iris&amp;#39;&lt;/span&gt;)
iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;species&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;species&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setosa&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;versicolor&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;virginica&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;})

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sepal_length&amp;#39;&lt;/span&gt;], 
            y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sepal_width&amp;#39;&lt;/span&gt;], c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;species)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sepal Length&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petal Length&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;No handles with labels found to put in legend.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_03_scatterplot/output_8_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;그런데, 여기에 한가지 문제점이 있다. 범례(&lt;code&gt;legend&lt;/code&gt;)가 없어서 어떤 종인지 색상의 구별이 잘 가지 않는다. 이럴 때 어떻게 해야할까?&lt;/p&gt;
&lt;p&gt;이 때에는 사실 &lt;code&gt;matplotlib&lt;/code&gt;만 활용하면 조금 코드가 복잡해진다. 아래 코드를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Scatter plot with a different color by groups&lt;/span&gt;
groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iris&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;species&amp;#39;&lt;/span&gt;)

fig, ax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, group &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; groups:
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(group&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sepal_length, 
            group&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sepal_width, 
            marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;, 
            linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name)

ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upper left&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# legend position&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Scatter Plot of iris by matplotlib&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petal Length&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petal Width&amp;#39;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_03_scatterplot/output_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;즉 For-loop를 활용해서 각각의 &lt;code&gt;label&lt;/code&gt;을 해줘야 하는 매우 큰 번거로움이 있다. 이 때에는 &lt;code&gt;seaborn&lt;/code&gt; 패키지를 활용하면 매우 쉽게 그래프를 작성할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-seaborn-방식&#34;&gt;(3) seaborn 방식&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;iris &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iris&amp;#39;&lt;/span&gt;)
iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;species&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;species&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setosa&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;versicolor&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;virginica&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;})
sns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatterplot(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sepal_length&amp;#39;&lt;/span&gt;], 
                y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sepal_width&amp;#39;&lt;/span&gt;], hue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;species, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;iris)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fc3cd092048&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_03_scatterplot/output_12_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 코드가 매우 간결해진 것을 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-실습파일&#34;&gt;V. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_02_barchart.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 02 bar chart</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_02_barchart/</link>
      <pubDate>Sun, 19 Apr 2020 16:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_02_barchart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib-기본-그래프&#34;&gt;I. Matplotlib 기본 그래프&lt;/h2&gt;
&lt;p&gt;Matplotlib는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-matplotlib-설치&#34;&gt;II. matplotlib 설치&lt;/h2&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-막대-그래프bar-chart&#34;&gt;III. 막대 그래프(Bar Chart)&lt;/h2&gt;
&lt;p&gt;시계열 데이터와 같이 연속적인 값의 변화와 패턴을 파악하는데 적합하다. 그래프를 그리기 위해 2020년 전세계를 강타했던 코로나 데이터셋을 위주로 그래프를 그려보도록 한다.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-수집&#34;&gt;(1) 데이터 수집&lt;/h3&gt;
&lt;p&gt;엑셀파일 데이터를 불러와서 실제 잘 들어왔는지 확인해봅니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 모듈 불러오기&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; calendar
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#75715e&#34;&gt;# Excel 데이터 데이터프레임으로 변환&lt;/span&gt;
covid_19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/content/20200406-COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(covid_19&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     dateRep  day  month  ...  geoId  countryterritoryCode  popData2018
0 2020-04-05    5      4  ...     AF                   AFG   37172386.0
1 2020-04-04    4      4  ...     AF                   AFG   37172386.0
2 2020-04-03    3      4  ...     AF                   AFG   37172386.0
3 2020-04-02    2      4  ...     AF                   AFG   37172386.0
4 2020-04-01    1      4  ...     AF                   AFG   37172386.0

[5 rows x 10 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-데이터-필터링&#34;&gt;(2) 데이터 필터링&lt;/h3&gt;
&lt;p&gt;우선 &lt;code&gt;KOR&lt;/code&gt; 기준으로 데이터를 &lt;code&gt;Filter&lt;/code&gt;링을 해줍니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# KOR 데이터만 추출, val. countryterritoryCode&lt;/span&gt;
covid_kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KOR&amp;#39;&lt;/span&gt;]
covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateRep&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#75715e&#34;&gt;# 월 생성&lt;/span&gt;
months &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_kor[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()

&lt;span style=&#34;color:#75715e&#34;&gt;# cases 생성&lt;/span&gt;
case_quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum()[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-그래프-레이아웃-구성&#34;&gt;(3) 그래프 레이아웃 구성&lt;/h3&gt;
&lt;p&gt;그래프의 크기 등을 구성합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;figure, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_02_barchart/output_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-x축-설정&#34;&gt;(4) x축 설정&lt;/h3&gt;
&lt;p&gt;X축에는 12월~4월까지 구성이 될 것입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(months, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;([&amp;lt;matplotlib.axis.XTick at 0x7f574b40fd68&amp;gt;,
  &amp;lt;matplotlib.axis.XTick at 0x7f574b40fd30&amp;gt;,
  &amp;lt;matplotlib.axis.XTick at 0x7f574b40f978&amp;gt;,
  &amp;lt;matplotlib.axis.XTick at 0x7f574b42e160&amp;gt;,
  &amp;lt;matplotlib.axis.XTick at 0x7f574b42e5c0&amp;gt;],
 &amp;lt;a list of 5 Text major ticklabel objects&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_02_barchart/output_8_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-막대-그래프-출력-세로&#34;&gt;(5) 막대 그래프 출력 (세로)&lt;/h3&gt;
&lt;p&gt;이제 막대 그래프를 그려본다. 이 때, 단순히 그래프가 작성하는 것이 아니라 &lt;code&gt;text&lt;/code&gt;도 같이 입력하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;figure, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(months, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)

plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; axis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(months, case_quantity)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rectangle &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plot:
  height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rectangle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_height()
  axis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(rectangle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_x() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rectangle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_width()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.002&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; height, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;int(height), ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;, va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_02_barchart/output_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;여기에서 &lt;code&gt;for-loop&lt;/code&gt;를 작성하는 이유는 각 그래프마다 데이터의 값이 달라지기 때문이며, 데이터의 값을 기준으로 높이를 설정하는 것이기 때문에 그렇습니다.&lt;/p&gt;
&lt;h3 id=&#34;6-막대-그래프-출력-가로&#34;&gt;(6) 막대 그래프 출력 (가로)&lt;/h3&gt;
&lt;p&gt;이번에는 동일한 코드이지만, 막대 그래프를 가로로 표시될 수 있도록 소스코드를 구현합니다.&lt;/p&gt;
&lt;p&gt;이 때 주의해야 하는 것은 &lt;code&gt;plt.yticks&lt;/code&gt;로 수정해야 한다는 점입니다. 또한, &lt;code&gt;height&lt;/code&gt;에 해당하는 부분은 모두 &lt;code&gt;width&lt;/code&gt;로 바꿔준 후, 적정한 값을 입력하여 출력합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;figure, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(months, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)

plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; axis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;barh(months, case_quantity)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rectangle &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plot:
  width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rectangle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_width()
  axis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(width &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, rectangle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_y() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;int(width), ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;, va&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_02_barchart/output_12_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;vi-실습파일&#34;&gt;VI. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_02_barchart.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R 시각화 튜토리얼 Intro</title>
      <link>https://chloevan.github.io/r/datavisualisation/ch01_intro/</link>
      <pubDate>Sun, 19 Apr 2020 10:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/datavisualisation/ch01_intro/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A picture is worth a thousand words — English Language Adage
The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한장의 그림이 수천단어보다 가치가 있다는 영어속담과, 명료한 시각화가 데이터분석가에게 다른 어떤 도구보다 더 많은 정보를 제공한다는 유명한 데이터 과학자의 조언. 핵심은 시각화이다.&lt;/p&gt;
&lt;p&gt;본 장에서는 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 활용한 시각화를 먼저 보여줄 것이다. 먼저 간단하게 &lt;code&gt;ggplot2&lt;/code&gt; 패키지에 소개하자면 &lt;code&gt;Grammar of Graphics&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;의 철학을 담아서 &lt;code&gt;R&lt;/code&gt; 생태계에서 유명한 학자 중, &lt;code&gt;Hadley Wickham&lt;/code&gt;에 의해 주도적으로 개발되었다. 그래프에도 문법이 있다는 패키지의 철학 아래, &lt;code&gt;R&lt;/code&gt;의 시각화는 괄목할만한 발전을 이루었고 이는 &lt;code&gt;R&lt;/code&gt;의 대중화에도 큰 영향을 끼쳤다.&lt;/p&gt;
&lt;p&gt;이제 본격적으로 &lt;code&gt;R&lt;/code&gt; 시각화를 작성해보자.&lt;/p&gt;
&lt;h2 id=&#34;i-사전준비&#34;&gt;I. 사전준비&lt;/h2&gt;
&lt;p&gt;본 장에서는 시각화를 위해서 &lt;code&gt;ggplot2&lt;/code&gt;를 주요 패키지로 사용한다. &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 설치했다고 가정한다. 만약 처음 패키지를 설치하는 사람이라면 &lt;a href=&#34;https://wikidocs.net/58057&#34;&gt;R 패키지 설치&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;에서 다시 한번 R 패키지 주요 생태계에 대해 이해하도록 한다.&lt;/p&gt;
&lt;p&gt;Studio를 열고 아래 코드를 실행하자:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;를 실행하면 &lt;code&gt;Registered ~&lt;/code&gt;라는 문구가 나왔다면 컴퓨터내 시스템에서 &lt;code&gt;RStudio&lt;/code&gt; 환경으로 &lt;code&gt;ggplot2&lt;/code&gt; 패키지를 정상적으로 불러왔다는 뜻이다. 이제 패키지 내 다양한 함수를 사용할 수 있는 사전준비가 완료된 것으로 이해해도 좋다.&lt;/p&gt;
&lt;h2 id=&#34;ii-데이터셋---텍사스-부동산-판매데이터&#34;&gt;II. 데이터셋 - 텍사스 부동산 판매데이터&lt;/h2&gt;
&lt;p&gt;대한민국에서 가장 중요한 문제중의 하나인 부동산과 관련하여 시각화를 진행하려 한다. 지금은 &lt;code&gt;ggplot2&lt;/code&gt; 패키지 내에 존재하는 텍사스 부동산 판매데이터를 통해 시각화를 진행하지만, 향후에는 국내 부동산 데이터를 직접 가져와서 시각화를 진행하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;txhousing&lt;/code&gt; 데이터는 총 &lt;code&gt;8602&lt;/code&gt;개의 관측치와 &lt;code&gt;9&lt;/code&gt;개의 변수로 구성이 되어 있다. &lt;code&gt;txhousing&lt;/code&gt; 데이터의 출처 및 각 변수(&lt;code&gt;Column&lt;/code&gt;)에 대해 조금 더 자세히 알고 싶다면 &lt;code&gt;R&lt;/code&gt; 소스코드 에디터에서 help(&lt;code&gt;txhousing&lt;/code&gt;)을 실행하여 도움말을 참고하기를 바란다.&lt;/p&gt;
&lt;h3 id=&#34;1-ggplot2-시각화-예시&#34;&gt;(1) ggplot2 시각화 예시&lt;/h3&gt;
&lt;p&gt;먼저 산점도를 시각화를 통해서 &lt;code&gt;ggplot2&lt;/code&gt;의 문법에 대해 이해하도록 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listings, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Warning: Removed 1426 rows containing missing values (geom_point).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch01_intro/graph_01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프는 &lt;code&gt;listings&lt;/code&gt; 변수와 &lt;code&gt;sales&lt;/code&gt;변수 사이에 양의 상관관계가 있는 것으로 확인 되었다. 다시 말하면 &lt;code&gt;listings&lt;/code&gt; 갯수가 증가하면 증가할수록 &lt;code&gt;sales&lt;/code&gt; 갯수도 증가하는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code&gt;ggplot2&lt;/code&gt; 그래프의 구조는 어떻게 될까? 기본적으로 &lt;code&gt;ggplot2&lt;/code&gt; 그래프는 레이어의 층을 겹겹이 쌓는다고 생각하면 보다 쉽다. 아래 그림을 우선 보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/datavisualisation/ch01_intro/Figure_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; 패키지 개발자인 해들리 위컴은 &lt;code&gt;The Layered Grammar of Graphics&lt;/code&gt;라는 논문을 통해서 위와 같은 그래프의 문법을 제안했다. 순서대로 설명하면, (1) 그래프를 그릴 데이터, (2) X축과 Y축에 놓을 변수, (3) 그래프의 종류, 그리고 (4) 옵션.&lt;/p&gt;
&lt;p&gt;코드와 함께 설명하면 다음과 같다. 다시 한번 코드를 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txhousing, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listings, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sales)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ggplot(): 그래프를 그릴 함수를 호출한다.&lt;/li&gt;
&lt;li&gt;data = txhousing: txhousing 데이터를 사용한다.&lt;/li&gt;
&lt;li&gt;aes(x = listings, y = sales): x축에는 listings라는 변수를, y축에는 sales라는 변수를 설정한다.&lt;/li&gt;
&lt;li&gt;geom_point(): 산점도라는 종류의 그래프를 그리겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 방식으로 데이터명와 x축, y축 그리고 그래프의 종류만 바꿔주면 꽤나 근사한 그래프가 나올 수 있다.&lt;/p&gt;
&lt;p&gt;그런데, 여기서 몇가지 궁금한 것이 생겨야 한다. 그래프 종류는 많지 않나요? X축과 Y축에는 어떤 변수를 넣어야 하나요? * 해석은 어떻게 해야 하나요?&lt;/p&gt;
&lt;p&gt;결론적으로 말하면, 위 종류 모두 결국엔 통계와 연관성이 있다. 매우 복잡한 통계적인 해석은 일단 차후에 하더라도 기본적인 방법론에 대해서는 강사의 경험담과 여러 책을 통해 알게된 기본적인 내용을 공유한다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Hadley Wickham이 작성한 ggplot2 패키지에 관한 논문을 읽어보는 것을 제안한다. “The Layered Grammar of Graphics”, &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;http://vita.had.co.nz/papers/layered-grammar.pdf&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;강사가 2019년 후반부에 책을 쓸까하다가 기웃기웃 거리던 때에 작성했던 내용이다. &lt;code&gt;github.io&lt;/code&gt; 블로그로 통합한 이후 더 이상 업데이트는 시키지 않고 있다. 여기에 있는 내용들도 조금씩 옮길 예정이다. 덧붙여서, 강사가 과거에 올렸던 &lt;code&gt;tistory&lt;/code&gt;, &lt;code&gt;RPubs&lt;/code&gt;에 올렸던 자료들도 틈틈히 본 포스트에 다듬어서 올릴 예정이다. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib 한글 폰트 오류 해결</title>
      <link>https://chloevan.github.io/settings/matplotlib_koreanfont/</link>
      <pubDate>Fri, 17 Apr 2020 23:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/settings/matplotlib_koreanfont/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;matplotlib-한글폰트-오류-해결&#34;&gt;Matplotlib 한글폰트 오류 해결&lt;/h2&gt;
&lt;p&gt;한글을 사랑하지만, 코딩의 예외다. 프로그래밍 언어 자체가 영어기반이기 때문에 그런것도 있고, 아무튼 한글 부분이 네모 박스로 표시되면서 한글폰트가 깨지는 현상이 종종 발생한다. 오류를 해결하려면 먼저 한글폰트를 지정하는 다음의 코드를 추가해야 한다.&lt;/p&gt;
&lt;p&gt;우선 실제로 한글 폰트가 깨지는지 확인해보는 코드를 작성해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 모듈 불러오기&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#75715e&#34;&gt;# Excel 데이터 데이터프레임으로 변환&lt;/span&gt;
covid_19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/jihoonjung/Documents/python_visualisation/data/20200406-COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# KOR 데이터만 추출, val. countryterritoryCode&lt;/span&gt;
covid_kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KOR&amp;#39;&lt;/span&gt;]
covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateRep&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bmh&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cases)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;대한민국 코로나 확진자 수 그래프&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;기간&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;확진자수&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;확진자수&amp;#39;&lt;/span&gt;], loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;best&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/settings/matplotlib_koreanfont/output_1_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 그래프를 보니, 실제로 네모박스가 나왔다. 이 때 어떻게 해결해야 할까? 우선 OS 환경에 따라 다르다. 그러나, 기본 원리는 똑같다.
폰트 경로를 지정하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;macos-버전&#34;&gt;MacOS 버전&lt;/h2&gt;
&lt;p&gt;강사는 MacOS를 사용하기 때문에, 두줄 코드만 입력하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rc
rc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;, family&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AppleGothic&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 코드를 입력 후, 다시 출력해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 한글폰트 오류 해결&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rc
rc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;, family&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AppleGothic&amp;#34;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bmh&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cases)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;대한민국 코로나 확진자 수 그래프&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;기간&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;확진자수&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;확진자수&amp;#39;&lt;/span&gt;], loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;best&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/settings/matplotlib_koreanfont/output_3_0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 정상적으로 출력되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;windows-버전&#34;&gt;Windows 버전&lt;/h2&gt;
&lt;p&gt;윈도우즈의 경우 Mac과 달리 font_manager 코드가 추가가 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# matplotlib 한글 폰트 오류 문제 해결&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager, rc
font_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./한글폰트.ttf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 폰트 파일 위치&lt;/span&gt;
font_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font_path)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_name()
rc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font&amp;#39;&lt;/span&gt;, family&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font_name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;“똑똑이” [Python] matplotlib 한글폰트 설정방법, &lt;a href=&#34;http://wideeyed.blog.me/221225208497&#34;&gt;http://wideeyed.blog.me/221225208497&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib_01_linegraph</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_01_linegraph/</link>
      <pubDate>Fri, 17 Apr 2020 11:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_01_linegraph/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib-기본-그래프&#34;&gt;I. Matplotlib 기본 그래프&lt;/h2&gt;
&lt;p&gt;Matplotlib는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-matplotlib-설치&#34;&gt;II. matplotlib 설치&lt;/h2&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-선-그래프line-plot&#34;&gt;III. 선 그래프(line plot)&lt;/h2&gt;
&lt;p&gt;시계열 데이터와 같이 연속적인 값의 변화와 패턴을 파악하는데 적합하다. 그래프를 그리기 위해 2020년 전세계를 강타했던 코로나 데이터셋을 위주로 그래프를 그려보도록 한다.&lt;/p&gt;
&lt;h3 id=&#34;1-전체-소스코드&#34;&gt;(1) 전체 소스코드&lt;/h3&gt;
&lt;p&gt;코로나 데이터셋을 기반으로 데이터 수집부터 시각화까지 전체 소스코드를 보여준 뒤, 다시 설명하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 모듈 불러오기&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

&lt;span style=&#34;color:#75715e&#34;&gt;# Excel 데이터 데이터프레임으로 변환&lt;/span&gt;
covid_19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/20200406-COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# KOR 데이터만 추출, val. countryterritoryCode&lt;/span&gt;
covid_kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KOR&amp;#39;&lt;/span&gt;]
covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateRep&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bmh&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cases)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Corona Time Series in S.Korea&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cases&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cases&amp;#39;&lt;/span&gt;], loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;best&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/output_2_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-코드-설명&#34;&gt;(2) 코드 설명&lt;/h3&gt;
&lt;p&gt;데이터 분석의 &lt;code&gt;Workflow&lt;/code&gt;는 대개 다음과 같이 진행한다. 분석관련 모듈 설치, 데이터 수집, 데이터 가공, 그리고 데이터 시각화 순서로 진행이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) 분석관련 모듈 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 모듈 불러오기&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt;는 데이터 수집 및 가공에 특화된 모듈이다. &lt;code&gt;matplotlib.pyplot&lt;/code&gt; 모듈을 &lt;code&gt;as plt&lt;/code&gt;와 같이 약칭 &lt;code&gt;plt&lt;/code&gt;로 &lt;code&gt;import&lt;/code&gt;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) 엑셀파일을 판다스를 활용하여 데이터프레임 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;covid_19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_excel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/20200406-COVID-19-geographic-disbtribution-worldwide.xlsx&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;엑셀파일을 불러오는 과정에 대한 전반적인 설명은 강사가 작성한 자료를 참고한다. &lt;a href=&#34;https://chloevan.github.io/python/pandas/pandas_with_excel/&#34;&gt;Pandas With Excel&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 가공&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# KOR 데이터만 추출, val. countryterritoryCode&lt;/span&gt;
covid_kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KOR&amp;#39;&lt;/span&gt;]
covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateRep&amp;#39;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 소스코드에 대한 설명은 조금 필요하다. 선 그래프를 그리기 위해 필요한 변수는 &lt;code&gt;country&lt;/code&gt; &amp;amp; &lt;code&gt;cases&lt;/code&gt; 두개의 변수만 필요하다. 그런데, 여기에서 &lt;code&gt;filter&lt;/code&gt;를 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(covid_19&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     dateRep  day  month  year  cases  deaths countriesAndTerritories geoId  \
0 2020-04-05    5      4  2020     35       1             Afghanistan    AF   
1 2020-04-04    4      4  2020      0       0             Afghanistan    AF   
2 2020-04-03    3      4  2020     43       0             Afghanistan    AF   
3 2020-04-02    2      4  2020     26       0             Afghanistan    AF   
4 2020-04-01    1      4  2020     25       0             Afghanistan    AF   

  countryterritoryCode  popData2018  
0                  AFG   37172386.0  
1                  AFG   37172386.0  
2                  AFG   37172386.0  
3                  AFG   37172386.0  
4                  AFG   37172386.0  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 데이터를 보면, &lt;code&gt;countryterritoryCode&lt;/code&gt;별로 날짜별로 데이터가 집계중인 것을 알 수 있다. 이 데이터에서 필요한 정보를 담은 데이터만 가져오는 것이 주요 핵심이다. 아래 코드가 &lt;code&gt;countryterritoryCode&lt;/code&gt;에서 &lt;code&gt;KOR&lt;/code&gt;에 관련된 행만 가져오는 데이터를 추출한 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;covid_kor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_19[covid_19[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;countryterritoryCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;KOR&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;두번째로 봐야 하는 것은 &lt;code&gt;set_index(&#39;dateRep&#39;, inplace=True)&lt;/code&gt;라는 코드는 간단하게 표현하면, 데이터를 업데이트 하는데, &lt;code&gt;dateRep&lt;/code&gt;열을 기준으로 0부터 재정렬한다는 뜻이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 시각화
시각화는 다양한 스타일이 존재하기 마련이다. matplotlib에서도 다양한 스타일이 존재한다. 스타일 리스트를 출력해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;available)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;Solarize_Light2&#39;, &#39;_classic_test_patch&#39;, &#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;, &#39;ggplot&#39;, &#39;grayscale&#39;, &#39;seaborn&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-darkgrid&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-poster&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-ticks&#39;, &#39;seaborn-white&#39;, &#39;seaborn-whitegrid&#39;, &#39;tableau-colorblind10&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 다양한 스타일이 존재한다. 여기에서 마음에 드는 것 선택해서 입력하면 된다. 스타일이 어떻게 적용되는지 상세한 정보가 필요하다면 다음의 링크를 참조한다. &lt;a href=&#34;https://matplotlib.org/examples/style_sheets/style_sheets_reference.html&#34;&gt;Style_Sheet&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bmh&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;선 그래프를 그리는 &lt;code&gt;plot()&lt;/code&gt; 함수에 입력할 &lt;code&gt;x, y&lt;/code&gt;축 데이터를 선택한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, covid_kor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cases)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cases&amp;#39;&lt;/span&gt;], loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;best&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.legend.Legend at 0x11cef6c10&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/output_16_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 그래프가 출력이 되었다면, 그 다음부터는 그래프를 꾸미는 것이다. 차트의 제목, x축 이름, y축 이름 함수를 활용하여 그래프를 완성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Corona Time Series in S.Korea&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cases&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/output_18_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;“Usage Guide¶.” Usage Guide - Matplotlib 3.2.1 Documentation, matplotlib.org/tutorials/introductory/usage.html.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>