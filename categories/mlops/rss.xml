<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MLOps on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/categories/mlops/</link>
    <description>Recent content in MLOps on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 19:30:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/categories/mlops/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GCP Kubernetes Engine을 통한 배포(2)</title>
      <link>https://dschloe.github.io/mlops/ch02_kubernetes/ch02_creating_kubernetes_engine_deployments/</link>
      <pubDate>Tue, 13 Apr 2021 19:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/mlops/ch02_kubernetes/ch02_creating_kubernetes_engine_deployments/</guid>
      <description>1줄 요약  (GCP) GKE를 활용하여 nginx를 실행해보자.  Step 1. GCP Shell 활성화  You can list the active account name with this command:  (your_project_id)$ gcloud auth list Credentialed Accounts ACTIVE ACCOUNT * student-04-e46af1f1cd7b@qwiklabs.net To set the active account, run: $ gcloud config set account `ACCOUNT`  You can list the project ID with this command:  (your_project_id)$ gcloud config list project [core] project = qwiklabs-gcp-04-79efc1e4ae0f Your active configuration is: [cloudshell-24251] Step 2.</description>
    </item>
    
    <item>
      <title>GCP Kubernetes Engine을 통한 배포(1)</title>
      <link>https://dschloe.github.io/mlops/ch02_kubernetes/ch01_deploying_kubernetes_engine/</link>
      <pubDate>Thu, 01 Apr 2021 21:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/mlops/ch02_kubernetes/ch01_deploying_kubernetes_engine/</guid>
      <description>1줄 요약  (GCP) GKE를 활용하여 nginx를 실행해보자.  Step 1. GKE Cluster Setup   네비게이션 메뉴에서 Kubernetes Engine &amp;gt; Clusters를 클릭합니다.   위 화면에서 Create를 클릭합니다.
  그 이후에, Cluster 이름은 standard-cluster-1으로 바꾸고, Zone은 us-central1-a로 바꿉니다.
  나머지는 모두 Default로 그냥 놔둡니다.   Step 2. Edit Standard-Cluster-1   clusters 에서 standard-cluster-1를 클릭합니다.   다음 화면에서 Nodes &amp;gt; default-pool를 클릭합니다.   Edit 버튼을 클릭합니다.</description>
    </item>
    
    <item>
      <title>Docker Started using Cloud Build</title>
      <link>https://dschloe.github.io/mlops/ch01_docker/ch01_working_with_cloud_build/</link>
      <pubDate>Tue, 30 Mar 2021 22:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/mlops/ch01_docker/ch01_working_with_cloud_build/</guid>
      <description>1줄 요약  (GCP) Cloud Build를 활용하여 Docker를 활용해보자.  Step 1. API Enabled  클라우드 네비게이션 메뉴에서 APIs &amp;amp; Services를 클릭한다. Enable APIs and Services를 클릭한다. Search for APIs &amp;amp; Services에서 Cloud Build를 입력한다. Cloud Build API를 클릭한 후, Enable 버튼을 클릭한다. 뒤로가기 버튼을 클릭한 후, Google Container Registry API 버튼을 클릭한다.  Step 2. Docker File 작성   아래 그림처럼 Activate Cloud Shell를 클릭한다.   쉘 스크립트 작성을 위해 quickstart.</description>
    </item>
    
    <item>
      <title>Introduction to MLOps</title>
      <link>https://dschloe.github.io/mlops/intro/</link>
      <pubDate>Sun, 28 Mar 2021 11:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/mlops/intro/</guid>
      <description>1줄 요약  MLOps를 소개해본다.  What is MLOps?   최근 기술 트렌드 중의 Hot한 주제는 DevOps이다.
 Dev는 Development의 약어이며, Ops는 Operation의 약자이다. 과거에는 개발팀과 운영팀 두개로 존재하는 것이 상식이었지만, 가장 큰 문제는 Communication 문제! 이러한 문제점을 해결하기 위해 나온 방법론이 DevOps이다.    이러한 부분은 머신러닝과 딥러닝도 동일함. 즉, 개발자를 위한 배포와 운영이 DevOps라면, 머신러닝 엔지니어를 위해 나온 기술은 MLOps로 볼 수 있다. 자세한 것은 유투브 영상을 통해서 기본적인 개념을 배웠으면 한다.</description>
    </item>
    
  </channel>
</rss>
