<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EDA on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/tags/eda/</link>
    <description>Recent content in EDA on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Sep 2020 10:30:47 +0900</lastBuildDate>
    
	<atom:link href="https://dschloe.github.io/tags/eda/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(파이썬-Matplotlib) 시각화 튜토리얼</title>
      <link>https://dschloe.github.io/python/python_edu/03_datavisualisation/ch_histogram/</link>
      <pubDate>Tue, 29 Sep 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/03_datavisualisation/ch_histogram/</guid>
      <description>히스토그램 히스토그램 그래프는 연속형 변수의 분포를 그리는 데 사용된다. 연속형 변수 값은 필요한 빈(=bin) 수로 분활되어 x축에 표시되며, 각 빈에 포함되는 값의 카운트는 y축에 표시된다. y축에는 카운트 대신 총량의 백분율을 표시할 수 있으며, 이 경우 확률 분포를 나타내며, 이러한 그래프는 통계 분석에 사용된다.
(1) 라이브러리 불러오기 필요한 모듈을 불러온다.
import matplotlib.pyplot as plt import numpy as np import seaborn as sns /usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.</description>
    </item>
    
    <item>
      <title>Geospatial Analysis Using Python - Basic</title>
      <link>https://dschloe.github.io/python/python_edu/03_datavisualisation/chapter_2_3_1_geospatial_analysis_using_python/</link>
      <pubDate>Sun, 23 Aug 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/03_datavisualisation/chapter_2_3_1_geospatial_analysis_using_python/</guid>
      <description>개요  파이썬을 활용한 공간 시각화에 대해 기술하도록 한다. 각 패키지의 쓰임새와 용도를 확인하도록 한다.  예제를 통해 확인한 뒤, 국내 데이터를 적용해보도록 한다. 한글 폰트상의 문제점 외에 다른 문제점은 없는지 확인해본다.   우선 참고한 자료는 아래와 같다.  Visualizing Geospatial Data in Python 지리 정보 데이터 처리    기본 환경설정  구글 코랩의 환경설정을 살펴보자.  파이썬 버전 3.6.9을 현재 사용중이다. (2020년 8월 기준)    import sys sys.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Outliers</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_11_eda_with_outliers/</link>
      <pubDate>Tue, 16 Jun 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_11_eda_with_outliers/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Missing Values</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_10_eda_with_missingvalues/</link>
      <pubDate>Sat, 13 Jun 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_10_eda_with_missingvalues/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Categorical Variables</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_9_eda_with_categorical_features/</link>
      <pubDate>Fri, 12 Jun 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_9_eda_with_categorical_features/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Continuous Variables</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_8_eda_with_continous_features/</link>
      <pubDate>Thu, 11 Jun 2020 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_8_eda_with_continous_features/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Discrete Variables</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_7_eda_with_discrete_features/</link>
      <pubDate>Tue, 09 Jun 2020 22:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_7_eda_with_discrete_features/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Handling Date</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_5_eda_with_date/</link>
      <pubDate>Mon, 08 Jun 2020 11:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_5_eda_with_date/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기  from os.path import join ROOT = &amp;#34;/content/drive&amp;#34; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>EDA with Housing Price Prediction - Data Import</title>
      <link>https://dschloe.github.io/kaggle/chapter_2_4_eda_data_import/</link>
      <pubDate>Sun, 07 Jun 2020 18:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/chapter_2_4_eda_data_import/</guid>
      <description>I. 개요  이제 본격적으로 Kaggle 데이터를 활용하여 분석을 진행한다. 데이터는 이미 다운 받은 상태를 전제로 하며, 만약에 데이터가 없다면 이전 포스팅에서 절차를 확인하기 바란다. (미리보기 가능)  캐글 데이터 다운로드 받기 (via Colab)    II. 구글 드라이브 연동  구글 코랩을 시작하면 언제든지 가장 먼저 해야 하는 것은 드라이브 연동이다.  from google.colab import drive # 패키지 불러오기 from os.path import join ROOT = &amp;quot;/content/drive&amp;quot; # 드라이브 기본 경로 print(ROOT) # print content of ROOT (Optional) drive.</description>
    </item>
    
    <item>
      <title>캐글 데이터 다운로드 받기 (via Colab)</title>
      <link>https://dschloe.github.io/kaggle/colab_with_drive/</link>
      <pubDate>Sun, 07 Jun 2020 16:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/kaggle/colab_with_drive/</guid>
      <description>I. 개요  데이터 시각화와 변환에 대해 짧게 익혔다면 바로 실전 데이터를 활용한다. 이론이 조금 부족하게 느껴질 수 있지만, 모든 것을 다 알려드릴 수는 없다.  결국 공부는 스스로 해야 한다.   이 강의의 목적이 Kaggle 데이터를 활용한 Python 포트폴리오 제작 강의임을 잊지 말자. 이번 시간에는 Kaggle 데이터를 구글 드라이브로 다운로드 받는 방법에 대해 작성하였다.  II. Kaggle KPI 설치  Google Colab에서 Kaggle API를 불러오려면 다음 소스코드를 실행한다.  !</description>
    </item>
    
    <item>
      <title>EDA with Pandas - Data Merge</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/chapter_1_4_python_pandas_merge_solution/</link>
      <pubDate>Fri, 05 Jun 2020 13:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/chapter_1_4_python_pandas_merge_solution/</guid>
      <description>I. 개요  실무 데이터에서는 여러가지 데이터를 만나는 경우가 흔하다. 이 때, SQL에서 데이터를 직접 병합하는 방법이 좋다. 그러나, 현실적으로 DB에 접근하는 권한을 가진 경우는 흔하지는 않다. 현재 운영중인 서비스상에 DB를 직접 만지는 경우는 거의 없다 (DBA가 할지도..) 따라서, 데이터분석가는 흩어져 있는 데이터 Dump를 받게 될 가능성이 큰데, 이 때 Python에서 데이터를 병합하는 작업을 진행하게 된다. Kaggle이나 각종 경진대회에 출전하게 되면 서로 다른 데이터를 합쳐야 하는 경우가 매우 많다.  II.</description>
    </item>
    
    <item>
      <title>EDA with Python - Pandas</title>
      <link>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</link>
      <pubDate>Mon, 01 Jun 2020 18:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</guid>
      <description>I. 개요  Pandas는 panel data의 의미를 가지고 있다. 흔히, 엑셀 데이터로 불리우는 관계형(Relational) 또는 레이블링된(Labeling)된 데이터를 보다 쉽게, 직관적으로 작업할 수 있도록 설계되어 있다. Python에서 데이터 분석을 수행하기 위한 매우 기초적이며 높은 수준의 문법을 제공한다. Pandas는 크게 Series &amp;amp; DataFrame을 다룰 수 있도록 기초 문법을 제공하고 있다. Pandas가 다루는 여러 종류의 데이터를 확인해보자.  SQL 테이블 또는 Excel 스프레드시트에서와 같이 형식의 행과 열이 있는 표 형식 데이터 순서 및 순서 지정되지 않은(고정 빈도일 필요는 없음) 시계열 데이터.</description>
    </item>
    
    <item>
      <title>EDA with Python - NumPy Broadcasting</title>
      <link>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_2_eda_with_numpy_broadcasting/</link>
      <pubDate>Mon, 01 Jun 2020 13:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_2_eda_with_numpy_broadcasting/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요  NumPy는 C언어로 구성되었으며, 고성능의 수치계산을 위해 나온 패키지이며, Numerical Python의 약자이다. Python을 활용한 데이터 분석을 수행할 때, 그리고 데이터 시각화나 전처리를 수행할 때, NumPy는 매우 자주 사용되기 때문에 한번쯤은 꼭 다듬고 가는 것이 중요하다. 이전 포스트에서는 Python - NumPy 소개 및 다양한 객체 생성에 대해 다루었으니, 본 포스트 읽기에 앞서서 기본적인 개념에 대해 확인하기를 바란다.</description>
    </item>
    
    <item>
      <title>EDA with Python - NumPy basic</title>
      <link>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_1_eda_with_numpy_basic/</link>
      <pubDate>Sun, 31 May 2020 13:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_1_eda_with_numpy_basic/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요  파이썬 처음 입문하는 사람들을 위해서 작성하였다. 탐색작 자료분석(EDA: Exploratory Data Analysis)을 위해 가장 기초적인 뼈대가 되는 NumPy에 대해서 학습하도록 합니다.  II. Array 만들기  1차원, 2차원, 3차원의 Array를 만들고 학습니다. 먼저 numpy 라이브러리를 불러옵니다.  # import numpy import numpy as np print(np.</description>
    </item>
    
  </channel>
</rss>