<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jupyter Notebook on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/jupyter-notebook/</link>
    <description>Recent content in Jupyter Notebook on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2020 00:30:47 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/jupyter-notebook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connecting Jupyter Notebook to VS Code</title>
      <link>https://chloevan.github.io/python/settings02_vscode2jupyter/</link>
      <pubDate>Sun, 05 Apr 2020 00:30:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/settings02_vscode2jupyter/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;VS Code&lt;/code&gt;에 &lt;code&gt;Jupyter Notebook&lt;/code&gt;을 연동해본다. 강사는 R &amp;amp; Python을 연동해서 작업할 일이 많다. 특히 블로그를 쓰다보면 더욱 그러한 일이 많은데, IDE가 많으면 많을수록 무언가 복잡스러워 보일 때가 많다. 이 때 좀 더 효율적으로 일하고자 하는 마음에 &lt;code&gt;VS Code&lt;/code&gt;에 &lt;code&gt;Jupyter Notebook&lt;/code&gt;을 추가 및 연동하는 작업을 진행해본다.&lt;/p&gt;
&lt;h2 id=&#34;ii-installation&#34;&gt;II. Installation&lt;/h2&gt;
&lt;p&gt;내용의 간결화를 위해, &lt;code&gt;VS Code&lt;/code&gt; 및 &lt;code&gt;Jupyter Notebook&lt;/code&gt; 설치 방법은 본 포스트에서는 생략한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VS Code&lt;/code&gt; 설치방법: &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;https://code.visualstudio.com/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jupyter Notebook&lt;/code&gt; 설치 방법: &lt;a href=&#34;https://jupyter.org/install&#34;&gt;https://jupyter.org/install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-vs-code에서-jupyter-notebook-접속&#34;&gt;III. VS Code에서 Jupyter Notebook 접속&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;이 VS Code Extension에서 설치가 완료된 것을 전제로 한다. 이 부분 역시, 아래 참고자료를 활용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python Extension for Visual Studio Code: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-python.python&#34;&gt;https://marketplace.visualstudio.com/items?itemName=ms-python.python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-jupyter-url-복사하기&#34;&gt;(1) Jupyter URL 복사하기&lt;/h2&gt;
&lt;p&gt;터미널에서 아래와 같은 명령어를 입력하여 &lt;code&gt;Jupyter Notebook&lt;/code&gt;을 실행하여 &lt;code&gt;URL&lt;/code&gt;을 복사한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{bash}&#34; data-lang=&#34;{bash}&#34;&gt;$ jupyter notebook
[I 00:36:59.316 NotebookApp] Serving notebooks from local directory: /Users/jihoonjung
[I 00:36:59.316 NotebookApp] The Jupyter Notebook is running at:
[I 00:36:59.316 NotebookApp] http://localhost:8888/?token=e68982d0305b30d52228ef811c3bd08c1c6b8ed0a8a351e0
[I 00:36:59.316 NotebookApp]  or http://127.0.0.1:8888/?token=e68982d0305b30d52228ef811c3bd08c1c6b8ed0a8a351e0
[I 00:36:59.316 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 00:36:59.323 NotebookApp] 
    
    To access the notebook, open this file in a browser:
        file:///Users/jihoonjung/Library/Jupyter/runtime/nbserver-22060-open.html
    Or copy and paste one of these URLs:
        http://localhost:8888/?token=e68982d0305b30d52228ef811c3bd08c1c6b8ed0a8a351e0
     or http://127.0.0.1:8888/?token=e68982d0305b30d52228ef811c3bd08c1c6b8ed0a8a351e0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같은 소스코드가 나오는 것을 확인할 수 있다. 여기에서 &lt;code&gt;http://127.0.0.1:8888/?token=e68982d0305b30d52228ef811c3bd08c1c6b8ed0a8a351e0&lt;/code&gt; URL을 복사한다.&lt;/p&gt;
&lt;h2 id=&#34;2-vscode에서-token-입력&#34;&gt;(2) VSCode에서 Token 입력&lt;/h2&gt;
&lt;p&gt;복사한 URL을 붙여넣기 위해 아래 메뉴 순서대로 클릭한다.&lt;/p&gt;
&lt;p&gt;[&lt;code&gt;View&lt;/code&gt;] - [&lt;code&gt;Command Palette&lt;/code&gt;] 클릭하면 아래와 같은 이미지가 나올 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/settings/vscode2jupyter.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 화면 활성화를 위한 단축키는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: Ctrl + Shift + P&lt;/li&gt;
&lt;li&gt;MacOS: Command + Shift + P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다양한 메뉴 중에서 (MacOS 기준) &lt;code&gt;Python: Specify local or remote Jupyter server for connections&lt;/code&gt;를 클릭하면 아래와 같은 이미지가 나타날 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/settings/vscode2jupyter02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;여기에서 &lt;code&gt;Existing(Specify the URI of an existing server&lt;/code&gt;를 클릭한 후, 복사한 &lt;code&gt;URL&lt;/code&gt;을 붙여넣기 하면 VS Code에서도 이제 정상적으로 &lt;code&gt;Jupyter Notebook&lt;/code&gt;을 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Working with Jupyter Notebooks in Visual Studio Code: &lt;a href=&#34;https://code.visualstudio.com/docs/python/jupyter-support&#34;&gt;https://code.visualstudio.com/docs/python/jupyter-support&lt;/a&gt; 에서 &lt;code&gt;Connect to a remote Jupyter Server&lt;/code&gt; 참조.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Iterrows 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/iterrows/</link>
      <pubDate>Fri, 20 Mar 2020 20:32:10 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/iterrows/</guid>
      <description>&lt;h2 id=&#34;i-iterrows의-개념&#34;&gt;I. Iterrows의 개념&lt;/h2&gt;
&lt;p&gt;데이터 전처리를 진행할 때, 데이터프레임에서 행에 반복적으로 접근을 하면서 값을 추출하거나 또는 그 값을 조작하는 일이 발생한다. 예를 들면, 특정 컬럼 A의 값에서 대문자 A를 찾아내 소문자 b로 변경한다고 가정해보자. 이런 경우에는 언제나 For-loop를 통한 반복문 코드 작성을 만들어야 한다.&lt;/p&gt;
&lt;p&gt;이럴 때 보다 효율적으로 접근하는 방법 중 하나가 &lt;code&gt;iterrows()&lt;/code&gt;를 사용하는 경우이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ii-조건부-행-추출&#34;&gt;II. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드박스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.40  
1           4.0  162  0.34  0.42  
2           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-data-frame과-for-loop의-실체&#34;&gt;III. Data Frame과 For-loop의 실체&lt;/h2&gt;
&lt;p&gt;Python DataFrame과 For-loop가 만나면 어떻게 작동을 할까? iterrows() 함수를 활용하여 실체를 한번 들여다 보자.
먼저 각 행을 각각 추출해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0
Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
1
Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
2
Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DataFrame이 For-loop와 만나게 되면 각 loop에서 &lt;code&gt;row&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt; Pandas Series 형태인 것을 확인할 수 있다. For-loop 안에서 데이터 처리를 할 때, Pandas Series 형태인 것을 감안하고 접근해야 한다는 뜻이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row_tuple &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row_tuple)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row_tuple))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(0, Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(1, Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(2, Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 Tuple 형태로 데이터가 Return 했다. DataFrame와 For-loop가 만나면 이렇게 다양한 객체로 다시 Return하는 것을 보았다. Tuple로 결과값을 받을지, 아니면 Series 형태로 받을지는 미리 알고 써야 데이터 처리시의 에러에 잘 대처할 수 있다.&lt;/p&gt;
&lt;p&gt;이번에는 득점과 실점을 계산한 후 기존 데이터에 다시 넣는 것을 해본다.&lt;/p&gt;
&lt;h2 id=&#34;iv-득점-실점-계산&#34;&gt;IV. 득점-실점 계산&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG   RD  
0           NaN  162  0.33  0.40   74  
1           4.0  162  0.34  0.42  136  
2           3.0  162  0.32  0.39  151  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;새로운 컬럼 &lt;code&gt;RD&lt;/code&gt;가 나타난 것을 확인할 수 있을 것이다.
오늘 배운 것은 &lt;code&gt;iterrows()&lt;/code&gt;을 활용한 데이터 가공(Transformation)을 배웠다. 다음 시간에는 &lt;code&gt;itertuples()&lt;/code&gt; 활용법에 대해 배우도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.iterrows¶. (n.d.). Retrieved March 20, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Tensorflow 2.0 Installation</title>
      <link>https://chloevan.github.io/python/settings01_installation/</link>
      <pubDate>Sun, 15 Mar 2020 21:32:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/settings01_installation/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;pip를 사용하여 TensorFlow 설치를 해본다.&lt;/p&gt;
&lt;h2 id=&#34;ii-시스템-요구사항&#34;&gt;II. 시스템 요구사항&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.5-3.7&lt;/li&gt;
&lt;li&gt;pip 19.0 이상(manylinux2010 지원 필요)&lt;/li&gt;
&lt;li&gt;Ubuntu 16.04 이상(64비트)&lt;/li&gt;
&lt;li&gt;macOS 10.12.6(Sierra) 이상(64비트)(GPU 지원 없음)&lt;/li&gt;
&lt;li&gt;Windows 7 이상(64비트)(Python 3만 해당)&lt;/li&gt;
&lt;li&gt;Raspbian 9.0 이상&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/install/gpu?hl=ko&#34;&gt;GPU&lt;/a&gt; 지원에는 CUDA® 지원 카드 필요(Ubuntu 및 Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고: TensorFlow2를 설치하려면 최신 버전의 pip가 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-시스템에-python-개발-환경-설치&#34;&gt;III. 시스템에 Python 개발 환경 설치&lt;/h2&gt;
&lt;h3 id=&#34;1-환경-구성-우선-확인&#34;&gt;(1) 환경 구성 우선 확인&lt;/h3&gt;
&lt;p&gt;우선, Python 환경이 이미 구성되었는지 확인합니다. 참고: &lt;strong&gt;Python 3.5~3.7&lt;/strong&gt; 및 &lt;strong&gt;pip &amp;gt;= 19.0&lt;/strong&gt; 필요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;    python3 --version
    pip3 --version
    virtualenv --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 패키지가 이미 설치되어 있는 경우 다음 단계로 건너뜁니다.&lt;/p&gt;
&lt;h3 id=&#34;2-os별-설치&#34;&gt;(2) OS별 설치&lt;/h3&gt;
&lt;h4 id=&#34;a-ubuntu&#34;&gt;A. ubuntu&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;    sudo apt update
    sudo apt install python3-dev python3-pip
    sudo pip3 install -U virtualenv  # system-wide install
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;b-macos&#34;&gt;B. MacOS&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 패키지 관리자를 사용하여 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;    /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
    export PATH=&amp;quot;/usr/local/bin:/usr/local/sbin:$PATH&amp;quot;
    brew update
    brew install python  # Python 3
    sudo pip3 install -U virtualenv  # system-wide install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;주의!&lt;!-- raw HTML omitted --&gt; 가상 환경이 아니라면 아래 명령어에 &lt;code&gt;python3 -m pip&lt;/code&gt;를 사용하세요. 이렇게 하면 시스템 &lt;code&gt;pip&lt;/code&gt; 대신 &lt;code&gt;Python pip&lt;/code&gt;를 업그레이드하여 사용할 수 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;c-windows&#34;&gt;C. Windows&lt;/h4&gt;
&lt;p&gt;윈도우즈는 조금 복잡합니다. 관련 링크를 참조하세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads/&#34;&gt;Microsoft Visual C++&lt;/a&gt; 다운로드로 이동합니다.&lt;/li&gt;
&lt;li&gt;Visual Studio 2015, 2017 및 2019 섹션까지 페이지를 아래로 스크롤합니다.&lt;/li&gt;
&lt;li&gt;Visual Studio 2015, 2017 및 2019용 Microsoft Visual C++ 재배포 가능 패키지를 플랫폼에 다운로드하여 설치합니다.&lt;/li&gt;
&lt;li&gt;Windows에서 &lt;a href=&#34;https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing&#34;&gt;긴 경로가 사용 설정&lt;/a&gt;되었는지 확인합니다.&lt;/li&gt;
&lt;li&gt;64비트 &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Windows용 Python 3&lt;/a&gt; 출시를 설치합니다(선택적 기능으로 pip 선택).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;pip3 install -U pip virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;!&lt;!-- raw HTML omitted --&gt; 가급적이면 ubuntu 사용을 권장합니다.&lt;/p&gt;
&lt;h3 id=&#34;3-가상-환경-만들기권장&#34;&gt;(3) 가상 환경 만들기(권장)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt; 가상 환경은 패키지 설치를 시스템에서 격리하는 데 사용됩니다.&lt;/p&gt;
&lt;h4 id=&#34;a-ubutumacos&#34;&gt;A. Ubutu/MacOS&lt;/h4&gt;
&lt;p&gt;`Python 인터프리터를 선택하고 저장할 ./venv 디렉터리를 만들어 새로운 가상 환경을 만듭니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;virtualenv --system-site-packages -p python3 ./venv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;셸 특정 명령어를 사용하여 가상 환경을 활성화합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;source ./venv/bin/activate  # sh, bash, ksh, or zsh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt;가 활성화되면 셸 프롬프트가 &lt;code&gt;(venv)&lt;/code&gt;로 시작합니다.
호스트 시스템 설정에 영향을 주지 않고 가상 환경 내에 패키지를 설치합니다. &lt;code&gt;pip&lt;/code&gt; 업그레이드로 시작합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;    pip install --upgrade pip

    pip list  # show packages installed within the virtual environment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;나중에 virtualenv를 종료하려면 다음을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;deactivate  # don&#39;t exit until you&#39;re done using TensorFlow
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;iv-tensorflow-pip-패키지-설치&#34;&gt;IV. TensorFlow pip 패키지 설치&lt;/h2&gt;
&lt;p&gt;다음 TensorFlow 패키지 중 하나를 선택하여 &lt;a href=&#34;https://pypi.org/project/tensorflow/&#34;&gt;PyPI&lt;/a&gt;에서 설치합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tensorflow&lt;/code&gt; - CPU와 &lt;a href=&#34;https://www.tensorflow.org/install/gpu?hl=ko&#34;&gt;GPU&lt;/a&gt; 지원이 포함된 안정적인 최신 출시(Ubuntu 및 Windows)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf-nightly&lt;/code&gt; - 미리보기 빌드(불안정). &lt;code&gt;Ubuntu&lt;/code&gt; 및 &lt;code&gt;Windows&lt;/code&gt; GPU 지원이 포함되어 있습니다. (Mac은 안됩니다!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tensorflow&lt;/code&gt;==1.15 - &lt;code&gt;TensorFlow&lt;/code&gt; 1.x의 최종 버전&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-virtualenv-설치&#34;&gt;(1) Virtualenv 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;pip install --upgrade tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설치를 확인합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;python -c &amp;quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-시스템-설치&#34;&gt;(2) 시스템 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;pip3 install --user --upgrade tensorflow  # install in $HOME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설치를 확인합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{terminal}&#34; data-lang=&#34;{terminal}&#34;&gt;python -c &amp;quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow 공식 싸이트: &lt;a href=&#34;https://www.tensorflow.org/install?hl=ko&#34;&gt;https://www.tensorflow.org/install?hl=ko&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>