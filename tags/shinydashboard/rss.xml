<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shinydashboard on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/shinydashboard/</link>
    <description>Recent content in shinydashboard on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 21:10:39 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/shinydashboard/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shiny tutorial 07 - flexdashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_07/</link>
      <pubDate>Thu, 02 Apr 2020 21:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_07/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-flexdashboard-패키지의-개요&#34;&gt;II. flexdashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;기존의 &lt;code&gt;shinydashboard&lt;/code&gt;와의 가장 큰 차이점은 &lt;code&gt;flexdashboard&lt;/code&gt;의 패키지는 &lt;code&gt;R Markdown&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 형식을 지원한다는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식문서에 따르면, flexdashabord는 R에서 제공하는 다양한 형태의 &lt;code&gt;htmlwidgets&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;lattice&lt;/code&gt;, &lt;code&gt;grid graphics&lt;/code&gt;, &lt;code&gt;tabular data&lt;/code&gt;, &lt;code&gt;gauges and value boxes&lt;/code&gt;, and &lt;code&gt;text annotations&lt;/code&gt; 등을 지원한다 (거의 대부분 기능을 제공한다는 뜻으로 읽힘).&lt;/li&gt;
&lt;li&gt;기존의 &lt;code&gt;shiny tutorial&lt;/code&gt;를 잘 따라해왔다면, 대부분 느끼겠지만, 대시보드의 &lt;code&gt;열&lt;/code&gt;과 &lt;code&gt;행&lt;/code&gt;을 맞추는 건 쉽지가 않다. PC환경의 대시보드 형태로 구현이 되기 때문에, 모바일로 화면 전환이 쉽지가 않은데, &lt;code&gt;flexdashboard&lt;/code&gt;는 이러한 기능도 제공한다.&lt;/li&gt;
&lt;li&gt;기본적으로 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지는 &lt;code&gt;static&lt;/code&gt;한 대시보드인데, &lt;code&gt;dynamic&lt;/code&gt;하게 앱을 작성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 설치한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;flexdashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;패키지를 설치하고 나면, [&lt;code&gt;File&lt;/code&gt;] - [&lt;code&gt;New File&lt;/code&gt;] - [&lt;code&gt;R Markdown&lt;/code&gt;] - [&lt;code&gt;From Template&lt;/code&gt;] 순서대로 클릭하면 아래와 같이 &lt;code&gt;Flex Dashboard&lt;/code&gt; 파일이 활성화 되는데, 이 파일을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;클릭과 함께 아래와 같은 형태의 코드가 준비된 것을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서 &lt;code&gt;shiny dashboard&lt;/code&gt; 형태로 구현하려면 간단하게 &lt;code&gt;runtime: shiny&lt;/code&gt;를 &lt;code&gt;YAML header&lt;/code&gt;에 추가하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#66d9ef&#34;&gt;runtime&lt;/span&gt;: shiny
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-sample&#34;&gt;(1) Sample&lt;/h2&gt;
&lt;p&gt;아래 샘플 소스코드를 작성하여 실행한다. 아래 소스 코드 실행의 주요 목적은 &lt;code&gt;R Markdown&lt;/code&gt;과 &lt;code&gt;R Shiny&lt;/code&gt;가 어떻게 조금씩 다른지 확인하는 차원의 소스 코드이다. Sample 코드는 &lt;a href=&#34;https://beta.rstudioconnect.com/jjallaire/shiny-embedding/&#34;&gt;flexdashboard: Shiny Embedding&lt;/a&gt; 에서 가져와서 응용 했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;flexdashboard: Shiny Embedding&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    vertical_layout: scroll
runtime: shiny
---

```{r global, include=FALSE}
# 데이터를 &amp;#39;global&amp;#39; chunk에 넣고, 대시보드의 모든 사용자가 데이터를 공유할 수 있도록 지원하는 소스 코드
library(datasets)
data(WorldPhones)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
Module
=======================================================================

### Embedding a Shiny Module

```{r, include=FALSE}
# Shiny module definition (would typically be defined in a separate R script)

# UI function
worldPhonesUI &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  fillCol(height = 600, flex = c(NA, 1), 
    inputPanel(
      selectInput(ns(&amp;#34;region&amp;#34;), &amp;#34;Region:&amp;#34;, choices = colnames(WorldPhones))
    ),
    plotOutput(ns(&amp;#34;phonePlot&amp;#34;), height = &amp;#34;100%&amp;#34;)
  )
}

# Server function
worldPhones &amp;lt;- function(input, output, session) {
  output$phonePlot &amp;lt;- renderPlot({
    barplot(WorldPhones[,input$region]*1000, 
            ylab = &amp;#34;Number of Telephones&amp;#34;, xlab = &amp;#34;Year&amp;#34;)
  })
}
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;

```{r}
# Include the module
worldPhonesUI(&amp;#34;phones&amp;#34;)
callModule(worldPhones, &amp;#34;phones&amp;#34;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 파일을 실행하면 아래와 같이 화면이 구성되면 완성이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;flexdashabord&lt;/code&gt;의 구조는&lt;code&gt;R Markdown&lt;/code&gt;의 목차 및 내용을 구성하는 방식과 비슷하다. 차이점이 있다면, R chunk &lt;code&gt;{r, include=FALSE} &lt;/code&gt;안에 &lt;code&gt;shiny code&lt;/code&gt;를 진행할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;본 소스코드에서는 &lt;code&gt;Modularizing&lt;/code&gt;이 적용되었는데, 튜토리얼의 마지막 즈음에 복잡한 &lt;code&gt;shiny app&lt;/code&gt;을 만들기 위한 가이드라인의 차원에서 다루도록 한다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;이제 각각의 Layouts 대해 간단하게 설명하도록 해보자.&lt;/p&gt;
&lt;h2 id=&#34;iv-layouts&#34;&gt;IV. Layouts&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Layouts&lt;/code&gt;의 구성요소는 크게 3가지로 구분된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Orientation&lt;/code&gt;: 행과 열로 구분한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scrolling Layout&lt;/code&gt;: 만약에 차트가 많다면 한 화면에 다 넣을 수 없기 때문에 이때에는 스크롤 기능을 추가해주는 것이 좋다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tabsets&lt;/code&gt;: 강사가 제일 좋아하는 기능이다. 이유는 간단한다. 다양한 그래프와 정보를 한 화면에서 볼 수 있도록 넣을 수 있고, &lt;code&gt;Tab&lt;/code&gt; 클릭만으로 정보 제공이 가능하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;본 포스트에서는 &lt;code&gt;Tabsets&lt;/code&gt; 기준으로 작성하였는데, 이 글을 보는 사람들도 가급적 아래와 같은 형식으로 기본 &lt;code&gt;Format&lt;/code&gt;을 설정하는 것을 권유한다. 여기에서 주의해야 할 점은 어떤 시점에 &lt;code&gt;{.tabset}&lt;/code&gt;을 코드 작성 하느냐에 따라 디자인이 달라지기 때문에 수시로 확인해서 점검한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no free lunch, Open Source is free but hardworking is required. - ChloEvan -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-column&#34;&gt;(1) Column&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Column&amp;#34;
output: flexdashboard::flex_dashboard
---
    
Column 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Column {.tabset}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;실행된 화면에서 &lt;code&gt;Chart 2&lt;/code&gt;와 &lt;code&gt;Chart 3&lt;/code&gt;를 교대로 클릭하며 내용을 확인해본다. 이번에는 Rows를 기준으로 작업하는데, 사실상 달라지는 건 기존의 소스코드와 없다.&lt;/p&gt;
&lt;h2 id=&#34;2-rows&#34;&gt;(2) Rows&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;{.tabset-fade}&lt;/code&gt; 속성값은 탭이 변환될 때마다 Fade in/out 효과를 적용하여 준다. 실제로 아래와 같이 나오는지 코드 작성을 통해 확인해본다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-components&#34;&gt;V. Components&lt;/h2&gt;
&lt;p&gt;개요 페이지에서 언급했던 것처럼 &lt;code&gt;flexdashboard&lt;/code&gt;는 다양한 &lt;code&gt;Componets&lt;/code&gt;를 제공한다. &lt;code&gt;shiny&lt;/code&gt;와 &lt;code&gt;R Markdown&lt;/code&gt; 내용과 중복되는 예를 들면, &lt;code&gt;R graphics&lt;/code&gt;, &lt;code&gt;Tabular Data&lt;/code&gt; 등은 생략한다. 즉, 기존에 알고 있는 코드 문법과 차이가 없다는 뜻이기도 하다. 본 포스트에서는 &lt;code&gt;HTML Widgets&lt;/code&gt;(사실, 이것도 shiny &amp;amp; shinydashboard에서도 사용은 가능하다!) &lt;code&gt;Navigation Bar&lt;/code&gt;만 언급하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-html-widgets&#34;&gt;(1) HTML Widgets&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CRAN&lt;/code&gt;에 등록되어 있는 &lt;code&gt;30&lt;/code&gt;개 이상의 패키지는 &lt;code&gt;HTML Widgets&lt;/code&gt;을 제공한다. 즉, 이러한 &lt;code&gt;Widgets&lt;/code&gt;들은 모두 본 패키지에서 작성이 가능하다. 향후 코로나 프로젝트를 위해 지도 패키지인 &lt;code&gt;leaflets&lt;/code&gt;의 간단 예제로 간단하게 소스 코드를 구현해본다. 소스코드보다는 어떻게 대시보드화가 되는지 결과 위주로 보기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chart 2&lt;/code&gt; 섹션에 지도화면이 정상적으로 출력된다면 완성이다. &lt;code&gt;Chart 1&lt;/code&gt;에는 어떤 내용을 추가할지, &lt;code&gt;Chart 3&lt;/code&gt;에는 어떤 내용을 추가할지 보여줘야 할지 고민해야 하며, Dynamic하게 모든 차트가 동시에 적용되게 하려면, 결국엔 &lt;code&gt;데이터셋&lt;/code&gt;이 모듈화처럼 움직여야 한다 (일단, Pass!!, 본 프로젝트에 들어가면 자세히 소개하기로 한다!)&lt;/p&gt;
&lt;h2 id=&#34;2-navigation-bar&#34;&gt;(2) Navigation Bar&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Navigation Bar&lt;/code&gt;는 다중페이지가 만들어질 때 보통 사용된다. 대시 보드에 다중 페이지가 있으면 &lt;code&gt;Navigation Bar&lt;/code&gt;의 왼쪽에 다중 페이지와 링크로 연결되게 되며, 이 때에는 소셜 링크와 대시 보드의 소스 코드를 볼 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;leaflet&lt;/code&gt;을 활용하여 만들었던 기존 소스코드에 &lt;code&gt;Navigation Bar&lt;/code&gt;, &lt;code&gt;social&lt;/code&gt;, &lt;code&gt;source code&lt;/code&gt; 기능을 추가 하도록 하겠다. 어디에 어떻게 구현이 되는지 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    navbar:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;-&lt;/span&gt; { title: &amp;#34;About&amp;#34;, href: &amp;#34;https://chloevan.github.io/about/&amp;#34; }
    social: [ &amp;#34;twitter&amp;#34;, &amp;#34;facebook&amp;#34;, &amp;#34;menu&amp;#34;, &amp;#34;linkedin&amp;#34; ]
    source_code: embed
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;우측 상단에 보면, &lt;code&gt;About&lt;/code&gt; 버튼, 각각의 &lt;code&gt;Social Network&lt;/code&gt; 기능, 특히 &lt;code&gt;Facebook&lt;/code&gt;, &lt;code&gt;Twitter&lt;/code&gt;, &lt;code&gt;Linkedin&lt;/code&gt;과 같이 대시보드를 공유할 수 있는 기능들이 있는 것을 볼 수 있다. 이러한 기능들은 현재  &lt;code&gt;Corona-19&lt;/code&gt; 대시보드와 같이 빅데이터를 활용하여 시각화로 &lt;code&gt;Insight&lt;/code&gt;를 줄 때, 매우 유용한 기능이다.&lt;/p&gt;
&lt;p&gt;마지막으로 &lt;code&gt;source code&lt;/code&gt;는 현재 보고 있는 화면에 대한 전체 &lt;code&gt;source code&lt;/code&gt;를 보여주는 기능인데, 이 부분 역시 소스코드 공유를 통해 커뮤니티에 기여하고 싶을 때 넣어주면 좋다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny07.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;vii-shinydashboard-vs-flexdashboard의-활용에-관한-개인적인-단상&#34;&gt;VII. shinydashboard Vs. flexdashboard의 활용에 관한 개인적인 단상&lt;/h2&gt;
&lt;p&gt;각 패키지마다 장단점이 있지만, 굳이 두가지 중에서 한 패키지를 먼저 배워야 한다면 강사는 &lt;code&gt;flexdashboard&lt;/code&gt;로 우선 작업하는 것을 권유한다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;code&gt;shinydashboard Vs. flexdashboard&lt;/code&gt;에 대한 &lt;a href=&#34;https://shiny.rstudio.com/articles/dashboards.html&#34;&gt;비교 글&lt;/a&gt;에 대한 원문을 읽어보는 것을 권한다. (사실 그렇게 큰 내용은 없다.)&lt;/p&gt;
&lt;p&gt;일단 간단하게 요약하면, &lt;code&gt;shinydashboard&lt;/code&gt;는 입문자들이 접근하기에는 조금 어려운 점이 있다. 물론, 추후에 &lt;code&gt;HTML &amp;amp; CSS&lt;/code&gt;와 같은 기능에 대한 필요성이 느껴진다면, &lt;code&gt;shinydashboard&lt;/code&gt;에 자바스크립트 등 복잡성 있게 구현이 가능하겠지만.. 추천하지는 않는다 (왜 꼭 R로 그렇게 해야하는가? 복잡성 있게 구현한다면 나는 차라리 유료 BI Tool을 쓰자고 할 것 같다!) 하는 의문점이 늘 있어왔다. 다년간 R 커뮤니티를 관찰한 결과 &lt;code&gt;R&lt;/code&gt;을 활용하는 사람들의 대부분(특히 국내 R 유저의 특성상)의 사실상 프로그래밍에 익숙하지 않은 사람들이 대부분인 것을 추정하기 때문에 &lt;code&gt;R Shiny&lt;/code&gt;를 하는 사람들에게 &lt;code&gt;R Markdown&lt;/code&gt; 보고서를 빠르게 웹으로 구현하는 일련의 과정이 훨씬 빠르고 간결하기 때문에 추천한다. (지극히 개인적인 생각)&lt;/p&gt;
&lt;h2 id=&#34;viii-다루지-못한-것들&#34;&gt;VIII. 다루지 못한 것들&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;와 &lt;code&gt;flexdashboard&lt;/code&gt;에 다양한 기능들을 접해봤지만, 아직 다루지 못한 그러나 중요한 기능이 하나 있다. &lt;code&gt;Mobile&lt;/code&gt;의 접근성이다. 이 부분은 향후 프로젝트를 진행하면서 한번 짚고 넘어가도록 하겠다.&lt;/p&gt;
&lt;p&gt;이제 기본적인 이론 중 마지막 한가지가 남아있다. &lt;code&gt;shiny&lt;/code&gt;에서 &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;Javascript&lt;/code&gt; 연동이다.&lt;/p&gt;
&lt;p&gt;이제 미니 프로젝트의 시작점이 얼마 남지 않았다. 고지를 향해 조금만 더 달려가보자!&lt;/p&gt;
&lt;h2 id=&#34;ix-reference&#34;&gt;IX. Reference&lt;/h2&gt;
&lt;p&gt;flexdashboard, (2020). flexdashboard Retrieved April 2, 2020, from &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;https://rmarkdown.rstudio.com/flexdashboard/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered flexdashboard in Shiny&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ChloEvan. (2020, March 18). R Markdown Introduction. Retrieved April 2, 2020, from &lt;a href=&#34;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&#34;&gt;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;웹개발 개발경력이 되신 분들은 shiny 홈페이지에 게재된 &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modularizing Shiny app code&lt;/a&gt;을 자세히 읽어보기를 권한다. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 06 - shinydashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_06/</link>
      <pubDate>Wed, 01 Apr 2020 17:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_06/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shinydashboard-패키지의-개요&#34;&gt;II. shinydashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTML content&lt;/code&gt;와 &lt;code&gt;Layouts&lt;/code&gt; 조작하는 것이 편해지면 대시보드를 만들 수 있다. 그런데, 문제는 대시보드 개발을 처음부터 하는 것과 어느정도 정해진 포맷을 활용하여 작성하는 것은 다르다. 반복해서 말하지만, 데이터분석가가 처음부터 개발해서 &lt;code&gt;사내 내부용 보고서&lt;/code&gt;를 꼭 작성해서 만들어야 하는가?하는가? 글쎄. 개인적으로 동의하기 어렵다. 핵심적인 내용의 지표만 산출 및 작성 요약하여 보고하는 것이 데이터 분석가의 기본적인 업무이자 핵심적인 업무이기 때문에, 다양한 대시보드를 빠르게 그러나 가독성있게 만드는 것이 중요하다. 어차피, 이러한 대시보드 역시, 시간이 지나면 결국엔 보는 사람만 본다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt; 패키지와 그리고 다음 장에서 설명할 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 활용하여 대시보드를 빠르게 만들어봄으로써 shiny 개발 &amp;amp; 배포를 빠르게 반복적으로 진행하며 학습하는 것을 권한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;shinydashboard&lt;/code&gt; 패키지를 설치한다. &lt;code&gt;shiny&lt;/code&gt; 패키지가 설치가 되어 있지 않거나 &lt;code&gt;shiny Version (&amp;gt;=0.11)&lt;/code&gt;이 낮은 경우, 설치 에러가 날 수 있으니 주의 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;shinydashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1-shinydashboard-구조&#34;&gt;(1) shinydashboard 구조&lt;/h2&gt;
&lt;p&gt;Shiny의 기본구조는 &lt;code&gt;ui&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt;으로 구성되어 있음을 알고 있다. shinydashboard 패키지를 사용시, 이 때의 &lt;code&gt;ui&lt;/code&gt; 문법이 조금 달라진다. 어렵지는 않다. 그냥 제공하는 함수가 다를 뿐이다.&lt;/p&gt;
&lt;p&gt;일단 간단하게 소스와 결과를 확인해 보자! 아래 소스코드를 따라하면서 연습할 때는 &lt;code&gt;app.R&lt;/code&gt; 파일을 생성한 뒤 아래 코드를 작성하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;shinydashboard&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:graphics&#39;:
## 
##     box
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:3474
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardPage()&lt;/code&gt; 안에 &lt;code&gt;Header()&lt;/code&gt;, &lt;code&gt;Sidebar()&lt;/code&gt;, &lt;code&gt;Body()&lt;/code&gt;가 만들어진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 대시보드는 &lt;code&gt;default&lt;/code&gt;로 만들어진 것이고, 여기에서 이제 각각의 구성품을 채워넣는 작업을 할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-basic-dashboard&#34;&gt;IV. Basic Dashboard&lt;/h2&gt;
&lt;h2 id=&#34;1-dashboardheader&#34;&gt;(1) dashboardHeader()&lt;/h2&gt;
&lt;p&gt;먼저 제목부터 달아보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:4095
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;왼쪽 상단에 &lt;code&gt;첫번째 대시보드&lt;/code&gt; 글자가 보일 것이다. 만약, &lt;code&gt;dashboardHeader(disable = TRUE)&lt;/code&gt;를 하게 되면 불필요해 보이는 &lt;code&gt;header&lt;/code&gt; 공간은 사라지고 &lt;code&gt;Sidebar&lt;/code&gt;와 &lt;code&gt;Body&lt;/code&gt; 공간만 남게 된다.&lt;/p&gt;
&lt;h2 id=&#34;2-dashboardsidebar&#34;&gt;(2) dashboardSidebar()&lt;/h2&gt;
&lt;p&gt;Sidebar의 주 활용 용도는 메뉴 구성과 같은 개념으로 파악하면 좋다. 아래 소스코드를 활용해서 실습하기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    )
  ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7315
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dashboardSidebar()&lt;/code&gt; 안에 &lt;code&gt;sidebarMenu()&lt;/code&gt; 메뉴 구성을 만든다. 그 이후에 &lt;code&gt;menuItem()&lt;/code&gt;을 입력하는데, 다양한 &lt;code&gt;Arguments&lt;/code&gt;들이 있는 것을 확인할 수 있다. 각 &lt;code&gt;Arguments&lt;/code&gt; 사용 설명서는 &lt;code&gt;?menuItem&lt;/code&gt;를 실행한 후, 확인하는 것을 추천한다. 각각의 &lt;code&gt;Arguments&lt;/code&gt;들은 일종의 대시보드 화면을 좀 더 &lt;code&gt;Interactive&lt;/code&gt;하게 만들어주는 옵션이기 때문에, 다양한 방법으로 시도하는 것을 권유한다.&lt;/p&gt;
&lt;h2 id=&#34;3-dashboardbody&#34;&gt;(3) dashboardBody()&lt;/h2&gt;
&lt;p&gt;기존 shiny에서 작업했던 &lt;code&gt;inputId&lt;/code&gt;, &lt;code&gt;outputId&lt;/code&gt; 값이 일치한 것을 기억했으면 좋겠다. 마찬가지로 &lt;code&gt;menuItem() tabName&lt;/code&gt;값은 &lt;code&gt;Body() tabName&lt;/code&gt;값과 일치해야 한다.&lt;/p&gt;
&lt;p&gt;이유는 간단하다. &lt;code&gt;menuItem&lt;/code&gt;의 각 메뉴들을 클릭할 때마다, 다른 화면이 나타나게끔 하려고 하는 것이 &lt;code&gt;menuItem&lt;/code&gt;을 사용하는 목적이기 때문이다. 일종의 &lt;code&gt;Key&lt;/code&gt;값이라고 하면 적정한 표현일까?&lt;/p&gt;
&lt;p&gt;아래 소스를 통해서 한번 더 확인해본다. &lt;code&gt;Body&lt;/code&gt; 안에 들어가는 소스코드도 중요하지만, 여기에서는 &lt;code&gt;tabName&lt;/code&gt;을 유심히 관찰할 필요가 있다. 처음에 발생하는 에러의 대부분은 &lt;code&gt;ID&lt;/code&gt;가 일치하지 않아 발생하는 경우가 대부분이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# sidebarMenu&lt;/span&gt;
  ), &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardSidebar&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItems&lt;/span&gt;(
      &lt;span style=&#34;color:#75715e&#34;&gt;# First tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드 탭 내용&amp;#34;&lt;/span&gt;), 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidRow&lt;/span&gt;(
          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plot1&amp;#34;&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;)),

          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(
            title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Controls&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of observations:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
          ) &lt;span style=&#34;color:#75715e&#34;&gt;# box&lt;/span&gt;
        ) &lt;span style=&#34;color:#75715e&#34;&gt;# fluidRow&lt;/span&gt;
      ), &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem(tabName = &amp;#34;dashboard&amp;#34;)&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Second tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯 탭 내용&amp;#34;&lt;/span&gt;)
      ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem&lt;/span&gt;
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItems&lt;/span&gt;
  ) &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardBody&lt;/span&gt;
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;)
  histdata &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; histdata&lt;span style=&#34;color:#a6e22e&#34;&gt;[seq_len&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;slider)]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(data)
  })
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8129
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardBody()&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItems&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItem&lt;/code&gt; 순서대로 코드를 작성하는데, 가장 많이 실수하는 곳은 예상할 수 있겠지만 &lt;code&gt;tabItems&lt;/code&gt;와 &lt;code&gt;tabItem&lt;/code&gt; 오기하는 것이 많기 때문에 주의 하기 바란다.&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;대시보드 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;위젯 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-더-알아보기&#34;&gt;V. 더 알아보기&lt;/h2&gt;
&lt;p&gt;지금까지 작성한 내용은 매우 기초적인 부분에서만 접근을 한 것이기 때문에, 더 많은 기능은 직접 해봐야 알 수 있다. shinydashboard 패키지에 대한 구체적인 내용들은  &lt;a href=&#34;https://rstudio.github.io/shinydashboard/structure.html&#34;&gt;Structure&lt;/a&gt;, &lt;a href=&#34;https://rstudio.github.io/shinydashboard/appearance.html&#34;&gt;Apperance&lt;/a&gt; 등을 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;vi-sample&#34;&gt;VI. Sample&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;를 활용한 예제코드를 보면서 &lt;code&gt;필사&lt;/code&gt; 하는 것을 추천한다. 그리고 전반적인 과정을 이해하면, 그 후에 약간의 코드 수정으로 응용하여 배포하는 것을 권유한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/086-bus-dashboard/&#34;&gt;Twin Cities Buses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/087-crandash/&#34;&gt;crandash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinydashboard., (2020). shinydashboard. Retrieved April 1, 2020, from &lt;a href=&#34;https://rstudio.github.io/shinydashboard/index.html/&#34;&gt;https://rstudio.github.io/shinydashboard/index.html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered shinydashboard in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R Markdown Introduction</title>
      <link>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</link>
      <pubDate>Wed, 18 Mar 2020 13:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</guid>
      <description>&lt;h2 id=&#34;r-markdown-소개-및-환경설정&#34;&gt;R Markdown 소개 및 환경설정&lt;/h2&gt;
&lt;p&gt;데이터 분석가의 주요 업무 중의 하나는 향후에 참고자료로 활용하기 위해 작업결과를 문서화 해야 하는데, 상당량의 보고서를 작성해서 분석과정과 출력결과를 기술해야만 합니다.&lt;/p&gt;
&lt;p&gt;보통의 과정은 아래과 같을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1단계: 본인의 작업을 위해서 R 스크립트 작성&lt;/li&gt;
&lt;li&gt;2단계: 다양한 그래프가 첨부된 분석결과를 Word, PPT 분석결과를 기술해서 동료 또는 메신저로 분석결과 전송&lt;/li&gt;
&lt;li&gt;3단계: 분석결과 토의&lt;/li&gt;
&lt;li&gt;4단계: 각각의 그래프 결과 코드를 매칭하기 위한 작업이 토의 중 발생&lt;/li&gt;
&lt;li&gt;5단계: 혼란 및 불필요한 시간 소요 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데, 해당 작업물을 그 때 마다 웹페이지(HTML)을 생성하여 자체 서버내 구축할 수 있다면, 그러면 위 5단계의 과정을 3단계(&lt;strong&gt;소스코드 작성&lt;/strong&gt; -&amp;gt; &lt;strong&gt;웹 게시&lt;/strong&gt; -&amp;gt; &lt;strong&gt;분석결과 토의&lt;/strong&gt;)로 축소할 수가 있을 것이며 특히, 연구자가 분석 당시의 고민과 문제점들을 스크롤링과 함께 같이 고민할 수 있는 시간으로 빠져들 수 있도록 유도할 수 있습니다.&lt;/p&gt;
&lt;p&gt;데이터 분석 보고서는 보고서의 작성이 연구자의 끝이 아니기 때문에 분석의 과정과 결과물을 잘 정리하여 의사결정을 하는데 반드시 도움이 되어야 하는 일종의 제안서와 같습니다.&lt;/p&gt;
&lt;p&gt;본 게시물은 R을 처음 접하는 데이터 분석가를 위해서 작성하였습니다. 사내의 보고서 문화 혁신에 기여하기를 바라는 마음과 함께!!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-r-마크다운-파일-생성&#34;&gt;Step 1. R 마크다운 파일 생성&lt;/h2&gt;
&lt;p&gt;R 마크다운 파일 생성은 아래와 같이 생성할 수 있습니다.
RStudio에서 File -&amp;gt; New File -&amp;gt; R Markdown을 클릭하시면 아래와 같이 대화상자가 열립니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdown.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Title과 Author를 설정 한 후 HTML로 클릭합니다.&lt;/p&gt;
&lt;h2 id=&#34;step-2-r-마크다운-기본-구성요소&#34;&gt;Step 2. R 마크다운 기본 구성요소&lt;/h2&gt;
&lt;p&gt;기본 구조는 아래와 같이 확인 될 것입니다.
&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownbasic.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;구성-1-header&#34;&gt;구성 1. Header&lt;/h3&gt;
&lt;p&gt;초기 설정된 텍스트 덩어리에 R에 대한 지시사항이 담겨있다: 제목, 저자명, 날짜, html 출력물(다른 말로, 웹페이지)을 생성할지가 포함됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 필드는 임의 삭제가 가능하나, 경험적으로는 포함 시키는 것이 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;구성-2-r-코드-덩어리---set-up&#34;&gt;구성 2. R 코드 덩어리 - Set Up&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;위 구성은 R 마크다운 문서의 기본 Set Up 코드이기 때문에 유지하는 것을 원칙으로 합니다. 위 코드 상 옵션에 대한 설명은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup: 소스코드 덩어리에 대한 title이며, 다른 소스코드 덩어리와 중복 작성 시, 에러가 발생합니다.&lt;/li&gt;
&lt;li&gt;include=FALSE: 문서에는 포함시키지 않고, 몰래 실행할 수 있으며, 주로 최초 설정에 이용됩니다.&lt;/li&gt;
&lt;li&gt;knitr::opts_chunk$set에서 디폴트 옵션을 설정할 수 있으며, echo = TRUE는 코드를 보여줍니다. 그 외 옵션은 아래를 확인하여 주시기를 바랍니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eval = F&lt;/strong&gt;: 코드 실행하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo = F&lt;/strong&gt;: 코드를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;include=F&lt;/strong&gt;: 실행 결과를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message=F&lt;/strong&gt;: 실행 때 나오는 메세지를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warning=F&lt;/strong&gt;: 실행 때 나오는 경고를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error=T&lt;/strong&gt;: 에러가 있어도 실행하고 에러코드를 보여준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.height=(number)&lt;/strong&gt;: R에서 작성한 그래프를 그림의 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.width=(number)&lt;/strong&gt;: R에서 작성한 그림의 넓이를 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.align=&#39;center&amp;rsquo;&lt;/strong&gt; : R에서 작성한 그림의 위치를 변경할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외 옵션을 확인하려면 아래와 같이 코드를 입력 후 실행하면 결과값이 나옵니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;구성-3-r-코드-덩어리---작업코드-예제&#34;&gt;구성 3. R 코드 덩어리 - 작업코드 예제&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;code&gt;knitr&lt;/code&gt;로 실행되면, R 코드 덩어리를 실행결과와 함께 나타납니다.&lt;/p&gt;
&lt;h2 id=&#34;step-3-마크다운markdown문법에-대한-이해&#34;&gt;Step 3. 마크다운(Markdown)문법에 대한 이해&lt;/h2&gt;
&lt;p&gt;마크다운은 2004년 12월에 처음 등장한 것으로 보입니다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 마크다운을 활용하여 작성된 문서는 보다 쉽고 빠르게 HTML 등 다른 문서 형태로 변환이 가능합니다. 특별히, R Markdown은 R사용자를 위한 Markdown으로 이해하시면 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;기본문법-1-bold--italic&#34;&gt;기본문법 1. Bold &amp;amp; Italic&lt;/h3&gt;
&lt;p&gt;별표&lt;code&gt;*&lt;/code&gt;를 활용하여 굵게 또는 이탤릭체로 변환할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;굵게&lt;/strong&gt;: &lt;code&gt;**굵게(bold)**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이탤릭&lt;/em&gt;: &lt;code&gt;*이탤릭(italic)*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;기본문법-2-구분점&#34;&gt;기본문법 2. 구분점&lt;/h3&gt;
&lt;p&gt;아래와 같이 하이픈&lt;code&gt;-&lt;/code&gt; 혹은 별표&lt;code&gt;*&lt;/code&gt;를 적용해서 구분점이 붙은 항목을 생성할 수 있습니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;혹은 아래와 같이 작성도 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;숫자 사용을 활용한 구분점도 아래와 같이 적용하면 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;기본문법-3-섹션-제목-만들기&#34;&gt;기본문법 3. 섹션 제목 만들기&lt;/h3&gt;
&lt;p&gt;섹션 제목을 만들려면 &lt;code&gt;#&lt;/code&gt;  기호를 활용하여 각 라인 첫번째 적용하게 되면 다른 크기를 갖는 섹션 제목을 만들 수 있을 뿐만 아니라, 위 섹션이 목차로 재 활용될 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 첫번째 제목 (Title)
## 두번째 제목 (Main Section)
### 세번째 제목 (Sub-Section)
#### 네번째 제목 (Sub-sub section)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;첫번째-제목-title&#34;&gt;첫번째 제목 (Title)&lt;/h1&gt;
&lt;h2 id=&#34;두번째-제목-main-section&#34;&gt;두번째 제목 (Main Section)&lt;/h2&gt;
&lt;h3 id=&#34;세번째-제목-sub-section&#34;&gt;세번째 제목 (Sub-Section)&lt;/h3&gt;
&lt;h4 id=&#34;네번째-제목-sub-sub-section&#34;&gt;네번째 제목 (Sub-sub Section)&lt;/h4&gt;
&lt;h2 id=&#34;step-4-마크다운markdown-다양한-기능-사용&#34;&gt;Step 4. 마크다운(Markdown) 다양한 기능 사용&lt;/h2&gt;
&lt;h3 id=&#34;기능-1-하이퍼링크&#34;&gt;기능 1. 하이퍼링크&lt;/h3&gt;
&lt;p&gt;독립적으로 링크 코드를 입력하거나, 또는 문장 중간에 삽입이 가능합니다. 아래와 같은 방법으로 입력하시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: [text](링크)
예시: [네이버](https://www.naver.com)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;네이버 클릭하시면(&amp;amp;#8594) &lt;a href=&#34;https://www.naver.com&#34;&gt;네이버&lt;/a&gt; 네이버 메인 화면에 연결됩니다.&lt;/p&gt;
&lt;h3 id=&#34;기능-2-이미지-삽입&#34;&gt;기능 2. 이미지 삽입&lt;/h3&gt;
&lt;p&gt;아래와 같은 방법으로 이미지를 삽입할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: ![caption](경로)
예시: ![rmarkdownlogo](./rmarkdownlogo.jpeg)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownlogo.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;다만, image size 작업 조정을 직접 하려면 R 코드 덩어리에 아래와 같은 방법으로 작업할수도 있습니다. (예: out.width=&amp;quot;400px&amp;rdquo;, out.height=&amp;quot;400px&amp;rdquo;)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;다만, 경험적으로 봤을 때는 개별 이미지를 수정하려면 HTML 소스 코드 또는 소스코드를 직접 입력하는 것을 권장합니다.&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;
test.Rmd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
css&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; test.css
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;## Page with an image {#myImagePage}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[Image&lt;span style=&#34;color:#a6e22e&#34;&gt;]&lt;/span&gt;(path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;image)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;기능-3-latex-expression&#34;&gt;기능 3. LaTeX expression&lt;/h3&gt;
&lt;p&gt;수식작성법은 &lt;a href=&#34;https://www.latex-project.org/&#34;&gt;Latex&lt;/a&gt;라는 문법을 참조해서 작성할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$&lt;/p&gt;
&lt;h3 id=&#34;기능-4-인라인inline-r-코드&#34;&gt;기능 4. 인라인(Inline) R 코드&lt;/h3&gt;
&lt;p&gt;인라인 R코드를 활용하는 가장 궁극적인 목적은 보고서의 모든 숫자를 재현가능하게 만들기 위해서입니다. 인라인 코드를 작성할 때 &lt;!-- raw HTML omitted --&gt;`r&lt;!-- raw HTML omitted --&gt;와 &lt;!-- raw HTML omitted --&gt;`&lt;!-- raw HTML omitted --&gt;을 사용합니다. 예를 들어, &lt;!-- raw HTML omitted --&gt;`r 2+2`&lt;!-- raw HTML omitted --&gt; 또는 &lt;!-- raw HTML omitted --&gt;`r round(some_value, 2)`&lt;!-- raw HTML omitted --&gt; . R 코드가 실행되어 코드가 결과 값으로 치환됩니다.&lt;/p&gt;
&lt;h2 id=&#34;step-5-다른-언어와의-호환성-고급&#34;&gt;Step 5. 다른 언어와의 호환성 (고급)&lt;/h2&gt;
&lt;p&gt;R과 함께 파이썬 또는 SQL을 다루는 머신러닝 개발자가 있다고 가정합니다. 그러면 R Markdown 안에서도 python 코드를 실행 후 작업할 수가 있습니다. 다만, 이때에는 코드 덩어리를 파이썬 또는 sql로 명명해야 적용이 가능합니다.&lt;/p&gt;
&lt;p&gt;예를 들면 아래와 같이 작성이 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;option-더-공부하기&#34;&gt;(Option) 더 공부하기&lt;/h2&gt;
&lt;p&gt;위에서 제공한 자료를 가지고도 충분히 보고서를 작성하는데는 부족함이 없습니다. 다만, 보고서를 조금 더 풍성하게 만들고자 한다면 메뉴얼을 참고해서 보다 전문적으로 작성하는 권장합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown 공식 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34;&gt;R 마크다운 공식 메뉴얼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf&#34;&gt;R 마크다운 Cheet Sheet  PDF 파일 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;a href=&#34;mailto:j2hoon85@gmail.com&#34;&gt;j2hoon85@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;R Markdown 기초&amp;rdquo;, &amp;ldquo;Zarathu Official Blog&amp;rdquo;, 2019년 1월 3일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&#34;&gt;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;Markdown&amp;rdquo;, &amp;ldquo;Daring Fireball&amp;rdquo;, 2004년 12월 17일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;https://daringfireball.net/projects/markdown/&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>