<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/pandas/</link>
    <description>Recent content in Pandas on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Apr 2020 11:32:36 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas Lambda Apply 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/apply/</link>
      <pubDate>Mon, 23 Mar 2020 20:10:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/apply/</guid>
      <description>&lt;h2 id=&#34;i-iterrows-itertuples-복습&#34;&gt;I. Iterrows, Itertuples 복습&lt;/h2&gt;
&lt;p&gt;이번 포스팅은 &lt;code&gt;For-loop&lt;/code&gt;의 대안에 관한 함수 &lt;code&gt;apply&lt;/code&gt;에 관한 내용이다. 본 포스트를 보고 학습하시기 전에 &lt;a href=&#34;https://chloevan.github.io/python/pandas/iterrows/&#34;&gt;Pandas Iterrows 함수 활용&lt;/a&gt;과 &lt;a href=&#34;https://chloevan.github.io/python/pandas/itertuples/&#34;&gt;Pandas Itertuples 함수 활용&lt;/a&gt;에서 학습 하기를 바란다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 데이터는 동일한 것을 쓰도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ii-조건부-행-추출&#34;&gt;II. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드삭스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-apply-함수&#34;&gt;III. apply 함수&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt;함수에는 반드시 &lt;code&gt;특정함수(Specific Function)&lt;/code&gt;가 같이 데이터프레임 적용 및 사용이 된다.&lt;/li&gt;
&lt;li&gt;이 때, &lt;code&gt;axis&lt;/code&gt;에 숫자를 기입해야 하는데, &lt;code&gt;0&lt;/code&gt;일 경우에는 &lt;code&gt;column&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;일 경우네는 &lt;code&gt;rows&lt;/code&gt;가 처리된다.&lt;/li&gt;
&lt;li&gt;lambda function도 같이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-column의-적용&#34;&gt;(1) Column의 적용&lt;/h2&gt;
&lt;p&gt;먼저, 각각의 &lt;code&gt;Column&lt;/code&gt;의 합계를 모으도록 한다. Column의 합계이니, &lt;code&gt;sum&lt;/code&gt;함수가 필요하며, &lt;code&gt;axis=0&lt;/code&gt;을 입력했다. 이 때 주의해야 할 것이 있다면, 각 함수가 사용되는 &lt;code&gt;데이터타입&lt;/code&gt;에 맞춰서 데이터 처리가 선행이 되어야 한다. 먼저 전체 &lt;code&gt;Column&lt;/code&gt;에 &lt;code&gt;sum&lt;/code&gt;함수를 적용해보자. 에러가 날 것이지만, 어떻게 에러가 나는지 확인하는 것도 중요하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;stat_totals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(stat_totals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-38-04a01c9fea4a&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 stat_totals = bos_year_df.apply(sum, axis=0)
      2 print(stat_totals)


/usr/local/lib/python3.7/site-packages/pandas/core/frame.py in apply(self, func, axis, raw, result_type, args, **kwds)
   6876             kwds=kwds,
   6877         )
-&amp;gt; 6878         return op.get_result()
   6879 
   6880     def applymap(self, func) -&amp;gt; &amp;quot;DataFrame&amp;quot;:


/usr/local/lib/python3.7/site-packages/pandas/core/apply.py in get_result(self)
    184             return self.apply_raw()
    185 
--&amp;gt; 186         return self.apply_standard()
    187 
    188     def apply_empty_result(self):


/usr/local/lib/python3.7/site-packages/pandas/core/apply.py in apply_standard(self)
    294             try:
    295                 result = libreduction.compute_reduction(
--&amp;gt; 296                     values, self.f, axis=self.axis, dummy=dummy, labels=labels
    297                 )
    298             except ValueError as err:


pandas/_libs/reduction.pyx in pandas._libs.reduction.compute_reduction()


pandas/_libs/reduction.pyx in pandas._libs.reduction.Reducer.get_result()


TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;에러가 &lt;code&gt;usupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;&lt;/code&gt; 인 것을 확인할 수 있다. 이제, 숫자형만 추출하도록 한다. 추출할 &lt;code&gt;Column&lt;/code&gt;은 &lt;code&gt;RS&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;Playoffs&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_num_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Playoffs&amp;#39;&lt;/span&gt;]]
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    RS   RA   W  Playoffs
0  734  806  69         0
1  875  737  90         0
2  818  744  89         0
3  872  736  95         1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;stat_totals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(stat_totals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;RS          3299
RA          3023
W            343
Playoffs       1
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 각 컬럼의 전체 합계가 구해진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-row의-적용&#34;&gt;(2) Row의 적용&lt;/h2&gt;
&lt;p&gt;이번에는 &lt;code&gt;RS&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt;만 합산하는 코드를 작성해본다. 이 때 중요한 것은 &lt;code&gt;axis=1&lt;/code&gt;을 입력하는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;total_runs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(total_runs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    1540
1    1612
2    1562
3    1608
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각각의 합산된 결과값이 나왔다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;playoffs&lt;/code&gt;의 조건에 따라 &lt;code&gt;return&lt;/code&gt; 값을 바꾸는 것을 해본다. 이번에 나오는 소스코드는 &lt;strong&gt;데이터처리 할 때 자주 쓰는 구문&lt;/strong&gt; 이므로 반드시 익히도록 한다.&lt;/p&gt;
&lt;p&gt;먼저, 조건 함수를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text_playoffs&lt;/span&gt;(num_playoffs): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num_playoffs &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yes&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;각 행마다 &lt;code&gt;1&lt;/code&gt;인지 &lt;code&gt;0&lt;/code&gt;인지 확인 후 &lt;code&gt;Text&lt;/code&gt;가 바뀌어야 하기 때문에, 이 때에는 &lt;code&gt;.apply(lambda row: function(row[&amp;quot;name_of_column&amp;quot;]), axis=1)&lt;/code&gt; 형태로 작성하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;convert_playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_num_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: text_playoffs(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Playoffs&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(convert_playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0     No
1     No
2     No
3    Yes
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Numeric&lt;/code&gt;이 &lt;code&gt;Character&lt;/code&gt;로 바뀌어진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-apply-활용한-시즌별-승률-계산&#34;&gt;IV. apply 활용한 시즌별 승률 계산&lt;/h2&gt;
&lt;p&gt;이번에는 승률 함수(&lt;code&gt;wp_calc&lt;/code&gt;)를 작성한 후, 팀의 승률을 계산한 것을 기존 데이터프레임(&lt;code&gt;bos_year_df&lt;/code&gt;)에 추가하는 것을 작업을 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wp_cal&lt;/span&gt;(wins, games_played):
    win_perc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wins &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; games_played
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(win_perc,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

win_percs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: wp_cal(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;], row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(win_percs, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    0.43
1    0.56
2    0.55
3    0.59
dtype: float64 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# bos_year_df에 `WP` 칼럼 추가&lt;/span&gt;
bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WP&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; win_percs

&lt;span style=&#34;color:#75715e&#34;&gt;# 여기에서 승률이 0.5 이하인 것을 구하면&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(bos_year_df[bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WP&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   

   RankPlayoffs    G  OOBP  OSLG    WP  
0           NaN  162  0.33  0.43  0.43  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-iterrows-vs-itertuples-vs-apply-의-속도-비교&#34;&gt;V. iterrows Vs. itertuples Vs. apply 의 속도 비교&lt;/h2&gt;
&lt;p&gt;이제 iterrows Vs itertuples Vs apply의 속도를 비교하는 코드를 작성해서, 향후에 어떤 구문을 쓰면 좋을지 고민해본다.&lt;/p&gt;
&lt;p&gt;우선 데이터 관측치를 조금 늘려서 확인하도록 하겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-iterrows의-속도&#34;&gt;(1) iterrows의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;6.51 ms ± 413 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-itertuples의-속도&#34;&gt;(2) itertuples의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.71 ms ± 99.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-apply의-속도&#34;&gt;(3) apply의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs_apply &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; row: calc_diff(row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;], row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]),axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RD&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs_apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;2.6 ms ± 121 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 속도에서 볼 수 있듯이, &lt;code&gt;apply&lt;/code&gt;의 함수가 &lt;code&gt;iterrows&lt;/code&gt;의 속도가 약 5.00 ms 더 빠른 것을 확인 할 수 있다. 그러나 &lt;code&gt;itertuples&lt;/code&gt;에 비해서는 꼭 엄청 빠르다고는 할 수 없다.&lt;/p&gt;
&lt;p&gt;사실 이것은 조금 의외의 결과이기는 했다. 어떻게 받아 들여야 할지.. 그러나 확실한 것은 &lt;code&gt;iterrows&lt;/code&gt;보다는 속도가 빠르다는 점과, &lt;code&gt;itertuples&lt;/code&gt;보다는 코드가 훨씬 간결해졌다는 점은 &lt;code&gt;apply&lt;/code&gt;의 함수가 보다 매력적인 것은 확신할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.apply¶. (n.d.). Retrieved March 23, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Itertuples 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/itertuples/</link>
      <pubDate>Sun, 22 Mar 2020 20:36:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/itertuples/</guid>
      <description>&lt;h2 id=&#34;i-iterrows&#34;&gt;I. Iterrows&lt;/h2&gt;
&lt;p&gt;이번 포스팅은 &lt;code&gt;Iterrows()&lt;/code&gt;의 확장개념입니다. 본 포스트를 보고 학습하시기 전에 &lt;a href=&#34;https://chloevan.github.io/python/pandas/iterrows/&#34;&gt;Pandas Iterrows 함수 활용&lt;/a&gt;에서 학습 하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-itertuples의-개념&#34;&gt;II. Itertuples의 개념&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;itertuples()&lt;/code&gt;는 기본적으로 &lt;code&gt;iterrows()&lt;/code&gt; 함수보다는 빠르다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-조건부-행-추출&#34;&gt;III. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드박스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.40  
1           4.0  162  0.34  0.42  
2           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iv-itertuples의-구조&#34;&gt;IV. itertuples의 구조&lt;/h2&gt;
&lt;p&gt;itertuples의 구조는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Pandas(Index=0, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2010, RS=818, RA=744, W=89, OBP=0.34, SLG=0.45, BA=0.27, Playoffs=0, RankSeason=nan, RankPlayoffs=nan, G=162, OOBP=0.33, OSLG=0.4)
Pandas(Index=1, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2009, RS=872, RA=736, W=95, OBP=0.35, SLG=0.45, BA=0.27, Playoffs=1, RankSeason=3.0, RankPlayoffs=4.0, G=162, OOBP=0.34, OSLG=0.42)
Pandas(Index=2, Team=&#39;BOS&#39;, League=&#39;AL&#39;, Year=2008, RS=845, RA=694, W=95, OBP=0.36, SLG=0.45, BA=0.28, Playoffs=1, RankSeason=3.0, RankPlayoffs=3.0, G=162, OOBP=0.32, OSLG=0.39)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;iterrows&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt;값이 &lt;code&gt;Series&lt;/code&gt;형태인 것에 비해, &lt;code&gt;itertuples&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt;값은 &lt;code&gt;Pandas&lt;/code&gt;형으로 출력 되었다. 이러한 성질을 이용해서, 이번에는 &lt;code&gt;Index&lt;/code&gt;, &lt;code&gt;Year&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;Playoffs&lt;/code&gt;을 각각 가져오는 &lt;code&gt;For-loop&lt;/code&gt;문을 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index
  year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Year
  games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;G
  wins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W
  playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, year, games, wins, playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0 2010 162 89 0
1 2009 162 95 1
2 2008 162 95 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 여기에서 &lt;code&gt;playoffs=1&lt;/code&gt; 인 조건을 줘서 데이터를 출력하도록 해본다. 여기에서 &lt;code&gt;1&lt;/code&gt;은 &lt;code&gt;playoff&lt;/code&gt;에 진출했다는 &lt;code&gt;Yes&lt;/code&gt;의 의미이고 &lt;code&gt;0&lt;/code&gt;은 진출하지 못했다는 뜻을 의미한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index
  year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Year
  games &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;G
  wins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;W
  playoffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Playoffs &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i, year, games, wins, playoffs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1 2009 162 95 1
2 2008 162 95 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-itertuples을-활용한-득점과-실점-계산&#34;&gt;V. itertuples을 활용한 득점과 실점 계산&lt;/h2&gt;
&lt;p&gt;이번에는 득점과 실점을 계산한 후 기존 데이터에 다시 추가하는 코드를 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG   RD  
0           NaN  162  0.33  0.40   74  
1           4.0  162  0.34  0.42  136  
2           3.0  162  0.32  0.39  151  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vi-iterrows-vs-itertuples의-속도-비교&#34;&gt;VI. iterrows vs itertuples의 속도 비교&lt;/h2&gt;
&lt;p&gt;이제 iterrows Vs itertuples의 속도를 비교하는 코드를 작성해서, 향후에 어떤 구문을 쓰면 좋을지 고민해본다.&lt;/p&gt;
&lt;p&gt;우선 데이터 관측치를 조금 늘려서 확인하도록 하겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-iterrows의-속도&#34;&gt;(1) iterrows의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;6.47 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-itertuples의-속도&#34;&gt;(2) itertuples의 속도&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%%&lt;/span&gt;timeit

&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RS
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RA
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;1.57 ms ± 37.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 속도에서 볼 수 있듯이, itertuples의 속도가 iterrows의 속도보다 약 5.00 ms 더 빠른 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;다음시간에는 &lt;code&gt;apply&lt;/code&gt; 함수에 대해 배워보는 시간을 갖도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;vii-reference&#34;&gt;VII. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.itertuples¶. (n.d.). Retrieved March 22, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
  </channel>
</rss>