<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/tags/pandas/</link>
    <description>Recent content in Pandas on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 May 2021 20:36:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/tags/pandas/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pandas 속도 비교 - loc vs replace</title>
      <link>https://dschloe.github.io/python/pandas/loc_replace/</link>
      <pubDate>Sat, 15 May 2021 20:36:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/loc_replace/</guid>
      <description>개요  Replace 속도를 측정해보자.  방법 1. .loc vs .replace  값을 바꾸는 방법은 다음과 같다.  data[&#39;column&#39;].loc[data[&#39;column&#39;] == &#39;Old Value&#39;] = &#39;New Value&#39;    import pandas as pd import seaborn as sns diamonds = sns.load_dataset(&amp;#39;diamonds&amp;#39;) print(diamonds)  carat cut color clarity depth table price x y z 0 0.23 Ideal E SI2 61.5 55.0 326 3.95 3.98 2.43 1 0.21 Premium E SI1 59.8 61.0 326 3.</description>
    </item>
    
    <item>
      <title>Pandas 속도 비교 - iloc and loc</title>
      <link>https://dschloe.github.io/python/pandas/loc_iloc/</link>
      <pubDate>Wed, 12 May 2021 20:36:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/loc_iloc/</guid>
      <description>1줄 요약  .loc[]와 .iloc[] 인덱스의 속도 차이를 측정한다.  개요  시간이 허락한다면, Pandas 속도를 비교하는 게시글을 자주 작성하려고 한다.  Pandas가 상대적으로 속도가 느리기 때문에, 조금 더 효율적인 코드를 작성하는 쪽에 초점을 맞춰본다.   .loc[] : index name locator를 의미한다. iloc[] : index number locator를 의미한다.  행 선택시 속도 비교  먼저 행을 선택할 때의 속도 차이를 확인하도록 합니다.  import pandas as pd import time import seaborn as sns diamonds = sns.</description>
    </item>
    
    <item>
      <title>Pandas read_csv skiprows 활용</title>
      <link>https://dschloe.github.io/python/pandas/pandas_skiprows/</link>
      <pubDate>Sat, 20 Feb 2021 20:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/pandas_skiprows/</guid>
      <description>문제 개요  Kaggle 데이터 New York City Taxi Fare Prediction 데이터를 구글 코랩에서 Loading 하는 중 메모리 문제가 발생함 계통추출(Systematic Sampling)을 통해 데이터를 불러오기로 함  예제 실습  아래 예제를 통해서 실제로 데이터가 줄어드는지 확인을 해본다. 핵심 코드는 skip_logic 함수이며, skiprows = skiprows=lambda x: skip_logic(x, 3) 형태로 작성할 수 있다. IRIS 데이터는 https://www.kaggle.com/saurabh00007/iriscsv 에서 다운로드 받았다.  iris 데이터외에도 각자 데이터를 가지고 실습을 해도 좋다.    import pandas as pd def skip_logic(index, skip_num): if index % skip_num == 0: return False return True def main(): print(&amp;#39;**** skiprows 기본 옵션 ****&amp;#39;) iris = pd.</description>
    </item>
    
    <item>
      <title>List to Pandas</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/list_pandas/</link>
      <pubDate>Mon, 09 Nov 2020 18:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/list_pandas/</guid>
      <description>개요  List는 파이썬 데이터 타입의 기본 자료형이다. Pandas 데이터 분석을 위한 기본적인 자료형이다. List에서 Pandas로 변환하는 작업의 다양한 방법을 활용해본다.  방법 1. 기초  List를 생성한 후, 데이터프레임으로 변환한다. 여기에서는 column과 index값을 확인해본다.  import pandas as pd lst = [&amp;#34;Korea&amp;#34;, &amp;#34;Japan&amp;#34;, &amp;#34;USA&amp;#34;, &amp;#34;China&amp;#34;, &amp;#34;Russia&amp;#34;] data = pd.DataFrame(lst) print(data)  0 0 Korea 1 Japan 2 USA 3 China 4 Russia  방법 2. Column &amp;amp; Index 추가  이번에는 column과 index를 추가한다.</description>
    </item>
    
    <item>
      <title>Pandas Data Handling 1편</title>
      <link>https://dschloe.github.io/python/python_edu/02_datatransformation/pandas_data_handling_1/</link>
      <pubDate>Sun, 05 Jul 2020 16:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/02_datatransformation/pandas_data_handling_1/</guid>
      <description>I. Kaggle에서 타이타닉 데이터 가져오기  캐글 데이터 가져오는 예제는 본 Kaggle with Google Colab에서 참고하기를 바란다. 먼저 kaggle 패키지를 설치한다.  !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6) Requirement already satisfied: urllib3&amp;lt;1.25,&amp;gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.24.3) Requirement already satisfied: six&amp;gt;=1.10 in /usr/local/lib/python3.6/dist-packages (from kaggle) (1.12.0) Requirement already satisfied: python-dateutil in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.8.1) Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from kaggle) (4.41.1) Requirement already satisfied: python-slugify in /usr/local/lib/python3.</description>
    </item>
    
    <item>
      <title>EDA with Python - Pandas</title>
      <link>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</link>
      <pubDate>Mon, 01 Jun 2020 18:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/01_basic/chapter_1_3_eda_with_pandas/</guid>
      <description>I. 개요  Pandas는 panel data의 의미를 가지고 있다. 흔히, 엑셀 데이터로 불리우는 관계형(Relational) 또는 레이블링된(Labeling)된 데이터를 보다 쉽게, 직관적으로 작업할 수 있도록 설계되어 있다. Python에서 데이터 분석을 수행하기 위한 매우 기초적이며 높은 수준의 문법을 제공한다. Pandas는 크게 Series &amp;amp; DataFrame을 다룰 수 있도록 기초 문법을 제공하고 있다. Pandas가 다루는 여러 종류의 데이터를 확인해보자.  SQL 테이블 또는 Excel 스프레드시트에서와 같이 형식의 행과 열이 있는 표 형식 데이터 순서 및 순서 지정되지 않은(고정 빈도일 필요는 없음) 시계열 데이터.</description>
    </item>
    
    <item>
      <title>Pandas Lambda Apply 함수 활용</title>
      <link>https://dschloe.github.io/python/pandas/apply/</link>
      <pubDate>Mon, 23 Mar 2020 20:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/apply/</guid>
      <description>I. Iterrows, Itertuples 복습 이번 포스팅은 For-loop의 대안에 관한 함수 apply에 관한 내용이다. 본 포스트를 보고 학습하시기 전에 Pandas Iterrows 함수 활용과 Pandas Itertuples 함수 활용에서 학습 하기를 바란다.
지난시간과 마찬가지로 데이터는 동일한 것을 쓰도록 한다.
import pandas as pd import io import requests import pprint url = &amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39; url=requests.get(url).content baseball_stats = pd.read_csv(io.StringIO(url.decode(&amp;#39;utf-8&amp;#39;))) pprint.pprint(baseball_stats.head())  Team League Year RS RA W OBP SLG BA Playoffs RankSeason \ 0 ARI NL 2012 734 688 81 0.</description>
    </item>
    
    <item>
      <title>Pandas Itertuples 함수 활용</title>
      <link>https://dschloe.github.io/python/pandas/itertuples/</link>
      <pubDate>Sun, 22 Mar 2020 20:36:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/pandas/itertuples/</guid>
      <description>I. Iterrows 이번 포스팅은 Iterrows()의 확장개념입니다. 본 포스트를 보고 학습하시기 전에 Pandas Iterrows 함수 활용에서 학습 하기를 바란다.
II. Itertuples의 개념 itertuples()는 기본적으로 iterrows() 함수보다는 빠르다.
import pandas as pd import io import requests import pprint url = &amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39; url=requests.get(url).content baseball_stats = pd.read_csv(io.StringIO(url.decode(&amp;#39;utf-8&amp;#39;))) pprint.pprint(baseball_stats.head())  Team League Year RS RA W OBP SLG BA Playoffs RankSeason \ 0 ARI NL 2012 734 688 81 0.33 0.42 0.26 0 NaN 1 ATL NL 2012 700 600 94 0.</description>
    </item>
    
  </channel>
</rss>
