<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pie Plot on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/pie-plot/</link>
    <description>Recent content in Pie Plot on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Apr 2020 16:15:47 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/pie-plot/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>matplotlib 05 pie plot</title>
      <link>https://chloevan.github.io/python/matplotlib/matplotlib_05_pie_chart/</link>
      <pubDate>Mon, 27 Apr 2020 16:15:47 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/matplotlib/matplotlib_05_pie_chart/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.&lt;/p&gt;
&lt;p&gt;도움이 되었다면 &lt;code&gt;Github&lt;/code&gt;에 &lt;code&gt;Star&lt;/code&gt;를 눌러주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chloevan/python_visualisation&#34;&gt;python_visualisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;i-matplotlib--seaborn&#34;&gt;I. Matplotlib &amp;amp; Seaborn&lt;/h2&gt;
&lt;h3 id=&#34;1-기본-개요&#34;&gt;(1) 기본 개요&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;는 파이썬 표준 시각화 도구라고 불리워지며 파이썬 그래프의 기본 토대가 된다고 해도 무방하다. 객체지향 프로그래밍을 지원하므로 세세하게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Seaborn&lt;/code&gt; 그래는 파이썬 시각화 도구의 고급 버전이다. &lt;code&gt;Matplotlib&lt;/code&gt;에 비해 비교적 단순한 인터페이스를 제공하기 때문에 초보자도 어렵지 않게 배울 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-matplotlib--seabon-설치&#34;&gt;(2) matplotlib &amp;amp; Seabon 설치&lt;/h3&gt;
&lt;p&gt;설치방법은 윈도우 명령 프롬프트, MacOS, Linux 터미널에서 &lt;code&gt;pip install matplotlib&lt;/code&gt;입력하면 되지만, 간혹 여러 환경에 따라 달라질 수 있으니 관련 싸이트에서 확인하기를 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib 설치 방법: &lt;a href=&#34;https://matplotlib.org/users/installing.html&#34;&gt;https://matplotlib.org/users/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;seaborn 설치 방법: &lt;a href=&#34;https://seaborn.pydata.org/installing.html&#34;&gt;https://seaborn.pydata.org/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-pie-plot&#34;&gt;II. Pie Plot&lt;/h2&gt;
&lt;p&gt;Pie Chart는 빈도수와 연관이 있는데, 사실 이 그래프는 약간의 호불호가 존재한다. Ian Spence는 &lt;a href=&#34;https://www.researchgate.net/profile/Ian_Spence2/publication/228401311_No_Humble_Pie_The_Origins_and_Usage_of_a_Statistical_Chart/links/0fcfd50c206a89af2e000000/No-Humble-Pie-The-Origins-and-Usage-of-a-Statistical-Chart.pdf?origin=publication_detail&#34;&gt;No Humble Pie:
The Origins and Usage of a Statistical Chart&lt;/a&gt; 라는 페이퍼를 작성했는데, 요지는 이 그래프가 대부분의 전문가들에게 어필하는데 실패했다는 것이다.&lt;/p&gt;
&lt;p&gt;구체적인 이유는 위 논문에서 영어공부도 할겸 찾아보시기를 바란다.&lt;/p&gt;
&lt;p&gt;그럼에도 불구하고, 여전히 사람들은 &lt;code&gt;Pie Chart&lt;/code&gt;가 원에서 비율을 직관적으로 확인할 수 있다는 것에 만족해 하는 것 같다. 특히, 상사나 클라이언트의 연령대가 높으면 높을수록 이러한 그래프를 좋아할 가능성은 경험적으로 조금 높았다.&lt;/p&gt;
&lt;p&gt;빠르게 그래프를 작성하기 위해 데이터부터 가져온다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/hmcuesta/PDA_Book/master/Chapter3/pokemonByType.csv&amp;#39;&lt;/span&gt;
pokemonByType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(url, index_col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), tablefmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;| type     |   amount |
|:---------|---------:|
| Bug      |       45 |
| Dark     |       16 |
| Dragon   |       12 |
| Electric |        7 |
| Fighting |        3 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;샘플 데이터는 매우 중요하다. 처음에는 그 중요성을 잘 몰랐으나, 샘플 데이터의 뜻은 기본적으로 앞단에서 데이터를 전처리하여, 샘플 데이터화 처럼 만들어 달라는 뜻이기도 하다.&lt;/p&gt;
&lt;p&gt;샘플 데이터를 다시 확인해보면, 첫번째 열은 문자로 구성이 되어 있고, 두번째 열은 숫자로 구성이 되어 있는 것을 확인하고 있다.&lt;/p&gt;
&lt;p&gt;즉, 데이터의 빈도수를 말하는 것이다. 이걸 그래프로 그리면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pie(pokemonByType[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amount&amp;#39;&lt;/span&gt;], labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
        shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, startangle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, autopct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%1.1f%%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_05_pie_chart/output_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 완성이 되었다. 위 그래프는 사실 기본 그래프이고, 조금 더 응용해서 작업할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;(pct, allvals):
    absolute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pct&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(allvals))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{:.1f}%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;({:d} cnt)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(pct, absolute)


plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pie(pokemonByType[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amount&amp;#39;&lt;/span&gt;], labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index, 
        shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, startangle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, autopct&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; pct: func(pct, pokemonByType), 
        textprops&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dict(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;))

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(pokemonByType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index,
          title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PokemonByType Count&amp;#34;&lt;/span&gt;,
          loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center left&amp;#34;&lt;/span&gt;,
          bbox_to_anchor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/matplotlib/matplotlib_05_pie_chart/output_8_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-실습파일&#34;&gt;III. 실습파일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;구글코랩에서 빠르게 실습도 할 수 있습니다. &lt;a href=&#34;https://colab.research.google.com/github/chloevan/python_visualisation/blob/master/matplotlib/matplotlib_05_pie_chart.ipynb.ipynb&#34;&gt;실습&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Mukhiya, Uuresh Kumar. Ahmed Usman. Hands-on Exploratory Data Analysis With Python: Perform EDA Techniques to understand, Summarize, and Investigate Your Data. Packt publishing limited, 2020.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>