<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny Deployment on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/shiny-deployment/</link>
    <description>Recent content in Shiny Deployment on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2020 01:10:39 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/shiny-deployment/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>shiny tutorial 05 - Sharing Apps</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_05/</link>
      <pubDate>Tue, 31 Mar 2020 01:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_05/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-deployment의-개요&#34;&gt;II. Shiny Deployment의 개요&lt;/h2&gt;
&lt;p&gt;이 영역은 웹개발자에게는 매우 쉬운 영역일 수도 있다. 그러나, 웹 환경에 익숙하지 않은 R 유저에게는 조금 버거울 수도 있다. 2-3번 정도만 반복하면 쉽게 작업하게 될 것이고, Shiny를 클라우드 서버를 통해 배포하는 방법도 익힐 수 있다.&lt;/p&gt;
&lt;p&gt;운이 좋게도, RStudio 에서는 무료로 매우 쉽게 배포를 할 수 있도록 하고 있다. 또한 On-Premise(사내 전용) 환경에서 배포할 수 있도록 오픈 소스도 제공하고 있다. 서버는 사실 경제적 비용이 발생하기 때문에, 클라우드로 배포할지, 도커(Docker) 및 오픈소스로 구현하여 배포할지, 고민할 필요는 있다. 배포에 관한 자세한 내용은 &lt;a href=&#34;https://shiny.rstudio.com/deploy/&#34;&gt;Hosting and Deployment&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-shinyappsio&#34;&gt;III. Shinyapps.io&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;에서 소개한 Sample Dashboard는 모두 &lt;code&gt;Shinyapps.io&lt;/code&gt;에서 배포를 하는 중이다. 배포 하는 과정은 어렵지 않으니 간단히 그 과정만 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;1-회원가입&#34;&gt;(1) 회원가입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shinyapps.io/admin/#/login&#34;&gt;shinyapps.io&lt;/a&gt;에서 회원가입을 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 싸이트에서 회원가입을 진행하고 RStudio로 돌아온다.&lt;/p&gt;
&lt;h2 id=&#34;2-shiny-app-실행&#34;&gt;(2) Shiny App 실행&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단한 소스코드로 ShinyApp을 실행한다.&lt;/li&gt;
&lt;li&gt;소스코드는 Shiny User Case에 있는 &lt;a href=&#34;https://shiny.rstudio.com/gallery/kmeans-example.html&#34;&gt;Iris K-Means Clustering&lt;/a&gt;에서 가져왔다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.R&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
iris &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; iris
vars &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(iris), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Species&amp;#34;&lt;/span&gt;)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pageWithSidebar&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;headerPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Iris k-means clustering&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xcol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X Variable&amp;#39;&lt;/span&gt;, vars),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ycol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y Variable&amp;#39;&lt;/span&gt;, vars, selected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[[2]]),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clusters&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cluster count&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
    ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plot1&amp;#39;&lt;/span&gt;)
  )
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output, session) {

  &lt;span style=&#34;color:#75715e&#34;&gt;# Combine the selected variables into a new data frame&lt;/span&gt;
  selectedData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    iris[, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;xcol, input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;ycol)]
  })

  clusters &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;kmeans&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(), input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;clusters)
  })

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;palette&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E41A1C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#377EB8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#4DAF4A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#984EA3&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FF7F00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFFF33&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#A65628&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#F781BF&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#999999&amp;#34;&lt;/span&gt;))

    &lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(),
         col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;cluster,
         pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;centers, pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
  })

}

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the application &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8977
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shiny App&lt;/code&gt;을 실행하고 난 후에 우측 상단의 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭한다.&lt;/li&gt;
&lt;li&gt;아래 그림 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-shinyappsio-연동&#34;&gt;(3) ShinyApps.io 연동&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 아래와 같은 팝업창이 활성화 될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;다음 메뉴에서 &lt;code&gt;ShinyApps.io&lt;/code&gt; 또는 &lt;code&gt;RStudio Connect&lt;/code&gt;를 선택하라는 팝업이 활성화 될 것이다. 여기에서 &lt;code&gt;ShinyApps.io&lt;/code&gt;를 선택한다. &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;는 일종의 유료 버전이기 때문에 여기에서는 다루지 않는다. 자세히 알아보고 싶다면 &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;마지막 하단의 이미지에서 드디어 &lt;code&gt;Token&lt;/code&gt;값을 받아야 하는데, 이 &lt;code&gt;Token&lt;/code&gt;값은 &lt;code&gt;ShinyApps.io&lt;/code&gt; 싸이트에서 확인해야 한다. 아래 팝업창을 유지한채로 웹사이트로 이동한다. 이동할 웹사이트는 친절하게 &lt;code&gt;Go to&lt;/code&gt; &lt;a href=&#34;http://www.shinyapps.io/&#34;&gt;&lt;code&gt;your account on Shiny Apps&lt;/code&gt;&lt;/a&gt;로 클릭할 수 연동되어 있으니 클릭해주면 된다. 클릭 후 우측 상단의 Dashboard 메뉴를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;Tokens&lt;/code&gt;을 찾아야 하는데, &lt;code&gt;Tokens&lt;/code&gt;는 왼쪽 메뉴에 &lt;code&gt;[Account]&lt;/code&gt;-&lt;code&gt;[Tokens]&lt;/code&gt;-&lt;code&gt;[Add Token]&lt;/code&gt;를 순서대로 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그러면 Token &amp;amp; Secret에 값이 생성 될 것인데, 이 때 [&lt;code&gt;show&lt;/code&gt;] 버튼을 클릭하면 다음과 같은 이미지에서 [&lt;code&gt;Show Secret&lt;/code&gt;] 버튼을 클릭한 후 전체 소스코드를 복사한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;복사한 소스코드는 &lt;code&gt;Connect ShinyApps.io Account&lt;/code&gt;에 붙여넣기 한후 &lt;code&gt;Connect Account&lt;/code&gt;를 실행한뒤 &lt;code&gt;Publish to Server&lt;/code&gt; 팝업창에서 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 연동이 완료된다. 이 때 &lt;code&gt;Shiny Project Title&lt;/code&gt;은 URL에 적용되므로 참고하기를 바란다. 강사는 &lt;code&gt;shinyProject_Test&lt;/code&gt; 이름으로 &lt;code&gt;Title&lt;/code&gt;을 적용했다.&lt;/p&gt;
&lt;p&gt;Publishing을 진행하면 Deploy창이 활성화되면서 아래와 같은 메시지가 출력이 되기 시작할 것이다. App이 무거우면 배포하는데도 시간이 소요되므로 이 부분은 참고하기를 바란다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Preparing to deploy application...DONE
Uploading bundle for application: 2027237...DONE
Deploying bundle: 2948176 for application: 2027237 ...
Waiting for task: 709961221
  building: Building image: 3271985
  building: Installing packages
  building: Installing files
  building: Pushing image: 3271985
  deploying: Starting instances
  success: Stopping old instances
Application successfully deployed to https://chloevan.shinyapps.io/shinyProject_Test/
Deployment completed: https://chloevan.shinyapps.io/shinyProject_Test/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;참고로 이왕 배포하는 시간에 대해 굳이 비교하자면, 확실히 &lt;code&gt;RStudio&lt;/code&gt;에서 배포하는 속도는 강사가 블로그를 작성하는 &lt;code&gt;go&lt;/code&gt;언어 기반으로 작성된 &lt;code&gt;hugo + github.io&lt;/code&gt;보다 속도는 체감적으로 많이 느린감이 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-배포-확인&#34;&gt;IV. 배포 확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;방금 전에 구현한 &lt;code&gt;App&lt;/code&gt;이 다음 URL에서 확인 할 수 있을 것이다.   &lt;a href=&#34;https://chloevan.shinyapps.io/shinyProject_Test/&#34;&gt;https://chloevan.shinyapps.io/shinyProject_Test/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;RStudio를 활용하면 무료로 배포를 하는데, 간단한 클릭만으로도 배포를 할 수 있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;어떤 수강생들이 이런 질문을 한적이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux에서 배포를 하고 싶어요, 클라우드에서 배포를 하고 싶어요, 도커에서 배포를 하고 싶어요,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;결론부터 말하면 모두 가능하다. Shiny를 개발단에서 확인하고 싶다면, 정식문서를 참고하기를 바란다. &lt;a href=&#34;https://docs.rstudio.com/shiny-server/&#34;&gt;공식문서: Shiny Server Professional v1.5.13 Administrator&amp;rsquo;s Guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;도커에서 배포 예제: &lt;a href=&#34;https://www.bjoern-bos.de/post/learn-how-to-dockerize-a-shinyapp-in-7-steps/&#34;&gt;Learn How to Dockerize a ShinyApp in 7 Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS 배포 예제: &lt;a href=&#34;https://abndistro.com/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/&#34;&gt;Deploying a Shiny App with Shiny Server on an AWS EC2 Instance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로, 강사는 GCP를 사랑한 나머지, GCP에 배포를 한적이 있다. 관련해서 배포 예제 글도 작성한 글이 있었는데, Tutorial 마지막에 정리해서 공유를 할 수 있을까? 하도록 노력하겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinyapps.io team., (2020, March 5). shinyapps.io user guide. Retrieved March 31, 2020, from &lt;a href=&#34;https://docs.rstudio.com/shinyapps.io/&#34;&gt;https://docs.rstudio.com/shinyapps.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Deployment in Shiny&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>