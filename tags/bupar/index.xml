<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bupaR on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/bupar/</link>
    <description>Recent content in bupaR on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Apr 2020 23:20:39 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/bupar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ch03 Components of Process Data</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch03_components_of_process_data/</link>
      <pubDate>Mon, 27 Apr 2020 23:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch03_components_of_process_data/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;지난시간에 &lt;code&gt;patients&lt;/code&gt;에 관한 데이터를 통해서 프로세스 분석에 대한 일반적인 개념을 접했다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 &lt;code&gt;bupaR&lt;/code&gt;에 대한 이론적인 내용과 함께 간단하게 실습을 진행하도록 한다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 먼저 데이터를 획득하는 것에서부터 출발한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(eventdataR)
patients &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; patients
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 5442    7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5442행과 7개의 열이 확인되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;eventlog&amp;quot;   &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ii-용어-정리&#34;&gt;II. 용어 정리&lt;/h2&gt;
&lt;p&gt;우선 용어 정리가 필요하다. Events, Event log, Activity 등등. 하나씩 살펴보자.&lt;/p&gt;
&lt;h3 id=&#34;1-events&#34;&gt;(1) Events&lt;/h3&gt;
&lt;p&gt;우선 Events에 관한 이해를 돕기 위해 아래 그림을 우선 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch03/event.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;John이 &lt;code&gt;X-Ray&lt;/code&gt;를 촬영하면 크게 3가지의 log가 남을 것이다. &lt;code&gt;Scheduled&lt;/code&gt;, &lt;code&gt;Started&lt;/code&gt;, &lt;code&gt;Completed&lt;/code&gt; 이러한 3가지 활동을 통칭해서 &lt;code&gt;Events&lt;/code&gt;라고 부른다.&lt;/p&gt;
&lt;h3 id=&#34;2-event-log&#34;&gt;(2) Event Log&lt;/h3&gt;
&lt;p&gt;시간대별로 이렇게 다양한 log가 남겨지는 것을 &lt;code&gt;Event log&lt;/code&gt;라고 불리운다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(patient &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(patient, handling, registration_type, time, force_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 4
##    patient handling              registration_type time               
##    &amp;lt;chr&amp;gt;   &amp;lt;fct&amp;gt;                 &amp;lt;fct&amp;gt;             &amp;lt;dttm&amp;gt;             
##  1 1       Registration          start             2017-01-02 11:41:53
##  2 1       Triage and Assessment start             2017-01-02 12:40:20
##  3 1       Blood test            start             2017-01-05 08:59:04
##  4 1       MRI SCAN              start             2017-01-05 21:37:12
##  5 1       Discuss Results       start             2017-01-07 07:57:49
##  6 1       Check-out             start             2017-01-09 17:09:43
##  7 1       Registration          complete          2017-01-02 12:40:20
##  8 1       Triage and Assessment complete          2017-01-02 22:32:25
##  9 1       Blood test            complete          2017-01-05 14:34:27
## 10 1       MRI SCAN              complete          2017-01-06 01:54:23
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 코드에서 중요한 것은 &lt;code&gt;Select(~, force_df = TRUE)&lt;/code&gt;를 꼭 입력해줘야 &lt;code&gt;data.frame&lt;/code&gt; 형태로 출력된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;event log는 결과적으로 다음 &lt;code&gt;Components&lt;/code&gt;로 구성되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case id&lt;/li&gt;
&lt;li&gt;activity label&lt;/li&gt;
&lt;li&gt;activity instance id&lt;/li&gt;
&lt;li&gt;timestamp&lt;/li&gt;
&lt;li&gt;lifecycle status&lt;/li&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-event-log-데이터-생성&#34;&gt;III. event log 데이터 생성&lt;/h2&gt;
&lt;p&gt;일반적인 데이터를 작성해서 &lt;code&gt;event log&lt;/code&gt;를 생성해보자. 어려운 것은 아니나, 기본적으로 포함해야 할 데이터가 있기 에 확인차 작성을 해본다.&lt;/p&gt;
&lt;h3 id=&#34;1-데이터-생성&#34;&gt;(1) 데이터 생성&lt;/h3&gt;
&lt;p&gt;아래 소스코드를 활용하여 가상의 데이터를 만든다. 그 이후 &lt;code&gt;eventlog()&lt;/code&gt; 함수를 활용하여, 각 데이터에 맞게 매칭해서 Column명을 입력하기만 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 가상 데이터 생성&lt;/span&gt;
eventData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(
  id          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pat_2&amp;#34;&lt;/span&gt;),
  action      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10011&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10015&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;), 
  action_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check-in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check-in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Payment&amp;#34;&lt;/span&gt;), 
  date        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-01-12&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-21&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-01-15&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-23&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-01&amp;#34;&lt;/span&gt;)), 
  originator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assistant_1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assistant_7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager_2&amp;#34;&lt;/span&gt;), 
  status      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;complete&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# event log 데이터 생성&lt;/span&gt;
claims_log &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eventlog&lt;/span&gt;(
  eventData,
  case_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
  activity_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_type&amp;#34;&lt;/span&gt;,
  activity_instance_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;,
  lifecycle_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;,
  timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;,
  resource_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;originator&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-두-데이터-비교&#34;&gt;(2) 두 데이터 비교&lt;/h3&gt;
&lt;p&gt;만들어진 소스코드를 통해서 실제로 &lt;code&gt;summary()&lt;/code&gt;를 통해 실제 구조를 비교해본다. 먼저 &lt;code&gt;eventData&lt;/code&gt;를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# eventData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(eventData)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       id                action      action_type             date           
##  Length:5           Min.   :10002   Length:5           Min.   :2020-01-12  
##  Class :character   1st Qu.:10011   Class :character   1st Qu.:2020-01-15  
##  Mode  :character   Median :10015   Mode  :character   Median :2020-03-21  
##                     Mean   :10015                      Mean   :2020-02-25  
##                     3rd Qu.:10024                      3rd Qu.:2020-03-23  
##                     Max.   :10024                      Max.   :2020-04-01  
##   originator           status         
##  Length:5           Length:5          
##  Class :character   Class :character  
##  Mode  :character   Mode  :character  
##                                       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;매우 익숙한 구조가 나온 것을 확인할 수 있다. 이번에는 eventlog 데이터를 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# eventData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(claims_log)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Number of events:  5
## Number of cases:  2
## Number of traces:  2
## Number of distinct activities:  2
## Average trace length:  2.5
## 
## Start eventlog:  2020-01-12
## End eventlog:  2020-04-01
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;##       id               action            action_type      date           
##  Length:5           Length:5           Check-in:2    Min.   :2020-01-12  
##  Class :character   Class :character   Payment :3    1st Qu.:2020-01-15  
##  Mode  :character   Mode  :character                 Median :2020-03-21  
##                                                      Mean   :2020-02-25  
##                                                      3rd Qu.:2020-03-23  
##                                                      Max.   :2020-04-01  
##        originator      status      .order 
##  Assistant_1:1    complete:1   Min.   :1  
##  Assistant_7:1    start   :4   1st Qu.:2  
##  Manager_2  :3                 Median :3  
##                                Mean   :3  
##                                3rd Qu.:4  
##                                Max.   :5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터의 구조가 달라진 것을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-activity-label-확인&#34;&gt;(3) Activity Label 확인&lt;/h3&gt;
&lt;p&gt;간단하게 바뀌어진 eventlog 데이터의 &lt;code&gt;activity label&lt;/code&gt;이 바뀌어졌는지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activity_labels&lt;/span&gt;(claims_log)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] Check-in Payment 
## Levels: Check-in Payment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;정상적으로 출력이 되었다면, 실제로 변환된 &lt;code&gt;eventlog&lt;/code&gt;데이터를 가지고 본격적인 분석을 진행할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch02 Process Analysis Basic</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch02_process_analysis_basic/</link>
      <pubDate>Thu, 23 Apr 2020 23:20:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch02_process_analysis_basic/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;지난시간에 &lt;code&gt;patients&lt;/code&gt;에 관한 데이터를 통해서 프로세스 분석에 대한 일반적인 개념을 접했다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 &lt;code&gt;bupaR&lt;/code&gt;에 대한 이론적인 내용과 함께 간단하게 실습을 진행하도록 한다.&lt;/p&gt;
&lt;p&gt;지난시간과 마찬가지로 먼저 데이터를 획득하는 것에서부터 출발한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(eventdataR)
patients &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; patients
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 5442    7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5442행과 7개의 열이 확인되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;eventlog&amp;quot;   &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고, 데이터는 &lt;code&gt;eventlog&lt;/code&gt;, &lt;code&gt;tbl_df&lt;/code&gt;, &lt;code&gt;data.frame&lt;/code&gt;으로 구성된 것을 확인할 수 있다. 기존에 R을 학습한 사람들은 &lt;code&gt;tbl &amp;amp; data.frame&lt;/code&gt;에 대해서 한두번쯤 들었을 거라 생각한다. 그러나 &lt;code&gt;eventlog&lt;/code&gt;는 생소한 객체임을 알 수 있다.&lt;/p&gt;
&lt;p&gt;조금더 구체적으로 확인하기 위해 데이터를 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(dplyr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;glimpse&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Rows: 5,442
## Columns: 7
## $ handling          &amp;lt;fct&amp;gt; Registration, Registration, Registration, Registrat…
## $ patient           &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;10&amp;quot;, …
## $ employee          &amp;lt;fct&amp;gt; r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1, r1,…
## $ handling_id       &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;10&amp;quot;, …
## $ registration_type &amp;lt;fct&amp;gt; start, start, start, start, start, start, start, st…
## $ time              &amp;lt;dttm&amp;gt; 2017-01-02 11:41:53, 2017-01-02 11:41:53, 2017-01-…
## $ .order            &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Number of events:  5442
## Number of cases:  500
## Number of traces:  7
## Number of distinct activities:  7
## Average trace length:  10.884
## 
## Start eventlog:  2017-01-02 11:41:53
## End eventlog:  2018-05-05 07:16:02
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;##                   handling      patient          employee  handling_id       
##  Blood test           : 474   Length:5442        r1:1000   Length:5442       
##  Check-out            : 984   Class :character   r2:1000   Class :character  
##  Discuss Results      : 990   Mode  :character   r3: 474   Mode  :character  
##  MRI SCAN             : 472                      r4: 472                     
##  Registration         :1000                      r5: 522                     
##  Triage and Assessment:1000                      r6: 990                     
##  X-Ray                : 522                      r7: 984                     
##  registration_type      time                         .order    
##  complete:2721     Min.   :2017-01-02 11:41:53   Min.   :   1  
##  start   :2721     1st Qu.:2017-05-06 17:15:18   1st Qu.:1361  
##                    Median :2017-09-08 04:16:50   Median :2722  
##                    Mean   :2017-09-02 20:52:34   Mean   :2722  
##                    3rd Qu.:2017-12-22 15:44:11   3rd Qu.:4082  
##                    Max.   :2018-05-05 07:16:02   Max.   :5442  
## 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기존의 데이터프레임과는 많이 다른 것을 확인할 수 있다. 이쯤 되면 여기에서는 패키지 원문을 봐야 정확하게 짚고 넘어가야 한다. 아래 그림을 보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/data-model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 그림은 &lt;a href=&#34;https://www.bupar.net/creating_eventlogs.html&#34;&gt;Event data Model&lt;/a&gt;에 대한 전체적인 설명이다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;bupaR&lt;/code&gt;패키지를 활용하려면 전반적인 데이터셋이 위 그림과 같아야 하는데, 전반적으로 데이터가 특정 사건에 대해 시계열처럼 프로세스를 기록한 데이터셋이라고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;patterns&lt;/code&gt;라는 데이터셋은 병원 응급실에서 발생한 데이터와 연관이 있고, &lt;code&gt;model level&lt;/code&gt;, &lt;code&gt;instance level&lt;/code&gt;, 그리고 &lt;code&gt;event level&lt;/code&gt;로 구성되어 있음을 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-eda---기초통계량&#34;&gt;II. EDA - 기초통계량&lt;/h2&gt;
&lt;h3 id=&#34;1-환자에-대한-기록&#34;&gt;(1) 환자에 대한 기록&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 5442개의 데이터에서 실제 환자의 수는 몇명일까? &lt;code&gt;summary&lt;/code&gt;에서 확인이 가능했지만, &lt;code&gt;n_cases()&lt;/code&gt; 함수를 활용하면 쉽게 구할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n_cases&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 500
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이번에는 첫번째 환자의 여정을 살펴보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(patients, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Log of 12 events consisting of:
## 1 trace 
## 1 case 
## 6 instances of 6 activities 
## 6 resources 
## Events occurred from 2017-01-02 11:41:53 until 2017-01-09 19:45:45 
##  
## Variables were mapped as follows:
## Case identifier:		patient 
## Activity identifier:		handling 
## Resource identifier:		employee 
## Activity instance identifier:	handling_id 
## Timestamp:			time 
## Lifecycle transition:		registration_type 
## 
## # A tibble: 12 x 7
##    handling patient employee handling_id registration_ty… time               
##    &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;fct&amp;gt;            &amp;lt;dttm&amp;gt;             
##  1 Registr… 1       r1       1           start            2017-01-02 11:41:53
##  2 Triage … 1       r2       501         start            2017-01-02 12:40:20
##  3 Blood t… 1       r3       1001        start            2017-01-05 08:59:04
##  4 MRI SCAN 1       r4       1238        start            2017-01-05 21:37:12
##  5 Discuss… 1       r6       1735        start            2017-01-07 07:57:49
##  6 Check-o… 1       r7       2230        start            2017-01-09 17:09:43
##  7 Registr… 1       r1       1           complete         2017-01-02 12:40:20
##  8 Triage … 1       r2       501         complete         2017-01-02 22:32:25
##  9 Blood t… 1       r3       1001        complete         2017-01-05 14:34:27
## 10 MRI SCAN 1       r4       1238        complete         2017-01-06 01:54:23
## 11 Discuss… 1       r6       1735        complete         2017-01-07 10:18:08
## 12 Check-o… 1       r7       2230        complete         2017-01-09 19:45:45
## # … with 1 more variable: .order &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;slice(patients, 1)&lt;/code&gt; 함수를 적용하니, 첫번째 case에 대한 모든 기록이 다 나오는 것을 확인할 수 있다. 상상력을 발휘해서, 환자의 보호자를 떠오르면, &lt;code&gt;handling&lt;/code&gt;의 의미(병원 등록부터 수납까지)를 쉽게 파악할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-병원내-활동-현황&#34;&gt;(2) 병원내 활동 현황&lt;/h3&gt;
&lt;p&gt;두번째로 확인할 수 있는 것은 500명 환자가 활동한 &lt;code&gt;activity&lt;/code&gt;에 대한 기초통계량이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n_activities&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우선 총 7개의 활동 영역을 확인 할 수 있다. 그러면 각 활동의 이름은 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activity_labels&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] Registration          Triage and Assessment Blood test           
## [4] MRI SCAN              X-Ray                 Discuss Results      
## [7] Check-out            
## 7 Levels: Blood test Check-out Discuss Results MRI SCAN ... X-Ray
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우선 범주형 벡터로 확인되었고, 병원과 관련있는 용어로 구성되어 있음을 확인했다. 그런데, &lt;code&gt;Triage and Assessment&lt;/code&gt;가 있다. 이 용어는 응급환자 분류와 평가에 대한 항목&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;인데, &lt;code&gt;patients&lt;/code&gt; 데이터가 응급환자와 관련된 데이터임을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면, 각 활동의 빈도수는 어떻게 될까? 환자 500명이 각각의 활동을 할 것인데, 분명히 프로세스에 따라 그 빈도수가 차이가 날 것임을 예상할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activities&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   handling              absolute_frequency relative_frequency
##   &amp;lt;fct&amp;gt;                              &amp;lt;int&amp;gt;              &amp;lt;dbl&amp;gt;
## 1 Registration                         500             0.184 
## 2 Triage and Assessment                500             0.184 
## 3 Discuss Results                      495             0.182 
## 4 Check-out                            492             0.181 
## 5 X-Ray                                261             0.0959
## 6 Blood test                           237             0.0871
## 7 MRI SCAN                             236             0.0867
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;당연한 말이지만, 환자가 병원에 오면 무조건 밟아야 하는 기본 절차인 &lt;code&gt;Registration&lt;/code&gt; &amp;amp; &lt;code&gt;Triage and Assessment&lt;/code&gt; (등록과 응급환자 분류와 평가)는 기본적인 절차이기 때문에 500명, 즉 환자수와 일치하지만, 나머지는 상이한 것을 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-프로세스-경로와-관련된-현황&#34;&gt;(3) 프로세스 경로와 관련된 현황&lt;/h3&gt;
&lt;p&gt;환자가 등록을 하면, 피검사를 할지, X-Ray를 할지 등으로 분류가 될 것이다. 이러한 경로가 몇개 나왔는지 확인을 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;traces&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   trace                                      absolute_frequen… relative_frequen…
##   &amp;lt;chr&amp;gt;                                                  &amp;lt;int&amp;gt;             &amp;lt;dbl&amp;gt;
## 1 Registration,Triage and Assessment,X-Ray,…               258             0.516
## 2 Registration,Triage and Assessment,Blood …               234             0.468
## 3 Registration,Triage and Assessment,Blood …                 2             0.004
## 4 Registration,Triage and Assessment,X-Ray                   2             0.004
## 5 Registration,Triage and Assessment                         2             0.004
## 6 Registration,Triage and Assessment,X-Ray,…                 1             0.002
## 7 Registration,Triage and Assessment,Blood …                 1             0.002
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;총 7개가 나오는 것으로 확인이 된다.&lt;/p&gt;
&lt;p&gt;위 테이블을 시각화를 해본다. 이미 이러한 시각화를 할 수 있도록 &lt;code&gt;processmapR&lt;/code&gt; 패키지가 있어서 매우 쉽게 시각화를 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/unnamed-chunk-11-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그러면 지난 포스트에서 잠깐 봤던 이미지가 다시 출력되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제 보다 분명하게 이해되었을 것이다. 인수 &lt;code&gt;coverage&lt;/code&gt;는 경로 탐색을 위한 전체 빈도수에 대한 누적 퍼센트를 말한다. 다시 말하면 &lt;code&gt;coverage = 1&lt;/code&gt; 전체 데이터를 보여 달라는 뜻이고, 여기에서 &lt;code&gt;coverage = 0.???&lt;/code&gt; 값을 조정하여 시각화를 다르게 가져갈 수 있다. 예를 들면, &lt;code&gt;coverage 0.986&lt;/code&gt;으로 지정하면 누적 퍼센트 &amp;lt;= 0.986 이하의 데이터만 시각화로 출력이 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.986&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/unnamed-chunk-12-1.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-프로세스-지도&#34;&gt;(4) 프로세스 지도&lt;/h3&gt;
&lt;p&gt;이번에는 위 데이터의 현황에 대해 전체적인 프로세스가 어떻게 진행되는지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;process_map&lt;/span&gt;(patients)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch02/processmap.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;전체적으로 경로 현황에 대해 보다 시각적으로 나타난 것으로 확인이 되었다. 위 시각화에 대한 분석은 각자 맡기도록 한다.&lt;/p&gt;
&lt;p&gt;다만, 중요한 것은 이렇게 시각화를 통하여 응급환자의 이동 경로를 매우 쉽고 빠르게 확인할 수 있다는 점이다.&lt;/p&gt;
&lt;h2 id=&#34;iii-결론&#34;&gt;III. 결론&lt;/h2&gt;
&lt;p&gt;이 부분이 만약 다른 업종과 연계되어 접근이 되면 어떻게 될까? 아니, 다른 업종도 위와 같은 데이터를 구성해서 활용할 수 있을까?&lt;/p&gt;
&lt;p&gt;다음 시간에는 event data를 실제로 생성하는 작업을 해보도록 해서 응용하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;아이라. (2017). KTAS 한국형 외상. 응급환자 분류와 평가(Triage and Assessment). Retrieved from &lt;a href=&#34;https://m.blog.naver.com/tinaarena/221070718090&#34;&gt;https://m.blog.naver.com/tinaarena/221070718090&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Ch01 Process Analysis Intro</title>
      <link>https://chloevan.github.io/r/dataanalysis/process_analysis/ch01_process_analysis_intro/</link>
      <pubDate>Mon, 20 Apr 2020 21:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/dataanalysis/process_analysis/ch01_process_analysis_intro/</guid>
      <description>&lt;h2 id=&#34;i-process-mining-intro&#34;&gt;I. Process Mining Intro&lt;/h2&gt;
&lt;p&gt;모든 비즈니스는 프로세스와 연관이 깊다. 이러한 데이터를 통상적으로 &lt;code&gt;event&lt;/code&gt;라고 부르며, 다루는 데이터는 &lt;code&gt;log&lt;/code&gt; 데이터와 연관이 깊다. &lt;code&gt;프로세스 마이닝(Process Mining)&lt;/code&gt;은 데이터의 추출, 프로세싱, 그리고 분석의 순으로 진행한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch01_workflow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;데이터 추출 (Extraction)&lt;/code&gt;: &lt;code&gt;Raw Data&lt;/code&gt;를 &lt;code&gt;Event Data&lt;/code&gt;로 변환시킨다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;프로세싱 (Processing)&lt;/code&gt;: 데이터 가공과 비슷하며, 보통 &lt;code&gt;Aggregation&lt;/code&gt;, &lt;code&gt;Filtering&lt;/code&gt;, &lt;code&gt;Enrichment&lt;/code&gt;의 용어가 등장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;분석 (Analysis)&lt;/code&gt;: Performance, Control-Flow 등과 연관된 분석이 진행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 빠르게 시각화부터 진행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bupaR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(httr)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(processmapR)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(edeaR)

url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/chloevan/datasets/blob/master/log/log_eat_patterns.RDS?raw=true&amp;#39;&lt;/span&gt;
patterns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readRDS&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;(url))
&lt;span style=&#34;color:#a6e22e&#34;&gt;trace_explorer&lt;/span&gt;(patients, coverage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch03_viz.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 그래프에 대한 해석은 나중에 하더라도, 위 데이터를 보면, &lt;code&gt;Rgst&lt;/code&gt;아 &lt;code&gt;TraA&lt;/code&gt;는 공통으로 존재하고, 경로에 따라서 &lt;code&gt;X-Ray&lt;/code&gt;, &lt;code&gt;Blood Test&lt;/code&gt;에 나뉘는 걸 봐서는 환자의 경로에 관한 데이터임을 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;ii-process-mining-overview&#34;&gt;II. Process Mining Overview&lt;/h2&gt;
&lt;p&gt;일반적으로 프로세스 마이닝은 이벤트 로그를 기반으로 비즈니스 프로세스를 분석할 수 있는 프로세스 관리 기술이라고 할 수 있다. 아래 그림을 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/processanalysis/ch01/ch02_workflow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;알파벳 글자는 일종의 &lt;code&gt;Task&lt;/code&gt;이다. 즉, 각각의 &lt;code&gt;Task&lt;/code&gt;가 끝날 때 마다 실제로 어떻게 행동하는지 알아보는 과정이 &lt;code&gt;Process Mining&lt;/code&gt;이라 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Process Mining&lt;/code&gt;에서 중요하게 바라봐야 하는 것은 무엇일까? 각 도메인마다 다르겠지만, &lt;code&gt;Patients&lt;/code&gt; 데이터의 경우에는 시간이 아닐까?&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;code&gt;MRI Scan&lt;/code&gt;이 시간이 소요된다는 걸 상식적으로 알고 있다. 그렇다면 진료 시간을 계산하기 위해서 &lt;code&gt;MRI Scan&lt;/code&gt;이 있고 없고에 따라서 어떻게 바뀌는지 알아보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_activity_presence&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRI SCAN&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;processing_time&lt;/span&gt;(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hours&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       min        q1    median      mean        q3       max    st_dev       iqr 
## 21.873056 27.790347 30.769444 30.303944 32.614514 38.245833  3.359803  4.824167 
## attr(,&amp;quot;units&amp;quot;)
## [1] &amp;quot;hours&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;MRI Scan&lt;/code&gt;을 할 때, 평균 &lt;code&gt;30.3&lt;/code&gt;시간이 걸린 것을 확인할 수 있다. 그렇다면 &lt;code&gt;MRI Scan&lt;/code&gt;을 하지 않았을 때 시간은 얼마나 단축이 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;patients &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_activity_presence&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRI SCAN&amp;#34;&lt;/span&gt;, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;processing_time&lt;/span&gt;(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;, units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hours&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##       min        q1    median      mean        q3       max    st_dev       iqr 
## 10.717778 23.285764 25.840139 25.465921 27.898958 33.422500  3.448286  4.613194 
## attr(,&amp;quot;units&amp;quot;)
## [1] &amp;quot;hours&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때에는 평균 &lt;code&gt;25.45&lt;/code&gt;시간으로 약 5시간이 단축된 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;iii-lets-begin-with-process-mining&#34;&gt;III. Let&amp;rsquo;s Begin with Process Mining&lt;/h2&gt;
&lt;p&gt;이벤트 로그를 통해서 우리는 &lt;code&gt;Process Mining&lt;/code&gt;에 대한 간단하게 맛보기를 진행하였다. 이번 포스트를 통해서 어느정도 감을 잡았으면 좋겠다. 강사도 처음 접하는 분석이지만, 실제로 웹로그분석시에는 &lt;code&gt;Google Analytics&lt;/code&gt;라는 좋은 Tool을 활용하여 자주 접하는 내용이기도 했다. 내용 자체는 어렵지는 않다. 다만,  그러나, &lt;code&gt;Web log&lt;/code&gt;이외의 다른 영역에서 어떻게 &lt;code&gt;Process Mining&lt;/code&gt;을 어떻게 다루는지 궁금하던 차에, 관련 논문을 보게 되었고, 이에 한번 본격적으로 다뤄보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;R on notast. “Process Mining (Part 1/3): Introduction to BupaR Package.” R, 7 Mar. 2019, &lt;a href=&#34;http://www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&#34;&gt;www.r-bloggers.com/process-mining-part-1-3-introduction-to-bupar-package/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aalst, W.m.p. Van Der, and A.j.m.m. Weijters. “Process Mining: a Research Agenda.” Computers in Industry, vol. 53, no. 3, 2004, pp. 231–244., doi:10.1016/j.compind.2003.10.001.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>