<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iterrows on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/iterrows/</link>
    <description>Recent content in iterrows on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2020 20:32:10 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/iterrows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas Iterrows 함수 활용</title>
      <link>https://chloevan.github.io/python/pandas/iterrows/</link>
      <pubDate>Fri, 20 Mar 2020 20:32:10 +0900</pubDate>
      
      <guid>https://chloevan.github.io/python/pandas/iterrows/</guid>
      <description>&lt;h2 id=&#34;i-iterrows의-개념&#34;&gt;I. Iterrows의 개념&lt;/h2&gt;
&lt;p&gt;데이터 전처리를 진행할 때, 데이터프레임에서 행에 반복적으로 접근을 하면서 값을 추출하거나 또는 그 값을 조작하는 일이 발생한다. 예를 들면, 특정 컬럼 A의 값에서 대문자 A를 찾아내 소문자 b로 변경한다고 가정해보자. 이런 경우에는 언제나 For-loop를 통한 반복문 코드 작성을 만들어야 한다.&lt;/p&gt;
&lt;p&gt;이럴 때 보다 효율적으로 접근하는 방법 중 하나가 &lt;code&gt;iterrows()&lt;/code&gt;를 사용하는 경우이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.githubusercontent.com/chloevan/datasets/master/sports/baseball_stats.csv&amp;#39;&lt;/span&gt;
url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
baseball_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)))

pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  ARI     NL  2012  734  688  81  0.33  0.42  0.26         0         NaN   
1  ATL     NL  2012  700  600  94  0.32  0.39  0.25         1         4.0   
2  BAL     AL  2012  712  705  93  0.31  0.42  0.25         1         5.0   
3  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
4  CHC     NL  2012  613  759  61  0.30  0.38  0.24         0         NaN   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.32  0.41  
1           5.0  162  0.31  0.38  
2           4.0  162  0.32  0.40  
3           NaN  162  0.33  0.43  
4           NaN  162  0.34  0.42  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ii-조건부-행-추출&#34;&gt;II. 조건부 행 추출&lt;/h2&gt;
&lt;p&gt;드디어 Python 데이터 분석가로 보스턴 레드박스&lt;code&gt;(BOS)&lt;/code&gt;야구팀에 취직을 했다고 가정을 해보자. 단장이 2008 ~ 2010년까지의 득점과 실점의 차이를 보고 싶다고 요청을 해왔다. 이럴 때 어떻게 해야 할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baseball_stats[baseball_stats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Team &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOS&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2012  734  806  69  0.32  0.41  0.26         0         NaN   
1  BOS     AL  2011  875  737  90  0.35  0.46  0.28         0         NaN   
2  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
3  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
4  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.43  
1           NaN  162  0.32  0.39  
2           NaN  162  0.33  0.40  
3           4.0  162  0.34  0.42  
4           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, 중요한 것 중의 하나는 &lt;code&gt;.reset_index(drop = True)&lt;/code&gt; 활용법인데, 기존의 행 인덱스를 제거하고 0부터 다시 시작하는 것이 특징이다. 위 표에서 보는 것처럼 &lt;code&gt;Team-BOS&lt;/code&gt; 데이터만 추출 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제는 &lt;code&gt;Year&lt;/code&gt; 컬럼에서 2008~2010년 데이터만 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bos_year_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bos_df[bos_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;])]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(drop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True)
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG  
0           NaN  162  0.33  0.40  
1           4.0  162  0.34  0.42  
2           3.0  162  0.32  0.39  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에 소개하는 함수는 &lt;code&gt;.isin()&lt;/code&gt;인데, 연구자가 원하는 값만 알면 쉽게 추출할 수 있다는 장점이 있다. &lt;code&gt;R&lt;/code&gt;을 사용하는 유저라면 &lt;code&gt;%in%&lt;/code&gt; 함수를 기억할 것인데, 이와 매우 유사하다.&lt;/p&gt;
&lt;h2 id=&#34;iii-data-frame과-for-loop의-실체&#34;&gt;III. Data Frame과 For-loop의 실체&lt;/h2&gt;
&lt;p&gt;Python DataFrame과 For-loop가 만나면 어떻게 작동을 할까? iterrows() 함수를 활용하여 실체를 한번 들여다 보자.
먼저 각 행을 각각 추출해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0
Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
1
Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
2
Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DataFrame이 For-loop와 만나게 되면 각 loop에서 &lt;code&gt;row&lt;/code&gt;의 &lt;code&gt;Return&lt;/code&gt; Pandas Series 형태인 것을 확인할 수 있다. For-loop 안에서 데이터 처리를 할 때, Pandas Series 형태인 것을 감안하고 접근해야 한다는 뜻이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row_tuple &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(row_tuple)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(row_tuple))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(0, Team             BOS
League            AL
Year            2010
RS               818
RA               744
W                 89
OBP             0.34
SLG             0.45
BA              0.27
Playoffs           0
RankSeason       NaN
RankPlayoffs     NaN
G                162
OOBP            0.33
OSLG             0.4
Name: 0, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(1, Team             BOS
League            AL
Year            2009
RS               872
RA               736
W                 95
OBP             0.35
SLG             0.45
BA              0.27
Playoffs           1
RankSeason         3
RankPlayoffs       4
G                162
OOBP            0.34
OSLG            0.42
Name: 1, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
(2, Team             BOS
League            AL
Year            2008
RS               845
RA               694
W                 95
OBP             0.36
SLG             0.45
BA              0.28
Playoffs           1
RankSeason         3
RankPlayoffs       3
G                162
OOBP            0.32
OSLG            0.39
Name: 2, dtype: object)
&amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번에는 Tuple 형태로 데이터가 Return 했다. DataFrame와 For-loop가 만나면 이렇게 다양한 객체로 다시 Return하는 것을 보았다. Tuple로 결과값을 받을지, 아니면 Series 형태로 받을지는 미리 알고 써야 데이터 처리시의 에러에 잘 대처할 수 있다.&lt;/p&gt;
&lt;p&gt;이번에는 득점과 실점을 계산한 후 기존 데이터에 다시 넣는 것을 해본다.&lt;/p&gt;
&lt;h2 id=&#34;iv-득점-실점-계산&#34;&gt;IV. 득점-실점 계산&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 함수 정의&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_diff&lt;/span&gt;(runs_scored, runs_allowed): &lt;span style=&#34;color:#75715e&#34;&gt;# runs_scored: 득점 / runs_allowed: 실점&lt;/span&gt;
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runs_allowed
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; run_diff

run_diffs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
    runs_scored &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RS&amp;#39;&lt;/span&gt;]
    runs_allowed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RA&amp;#39;&lt;/span&gt;]
    
    run_diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_diff(runs_scored, runs_allowed)
    
    run_diffs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(run_diff)

bos_year_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RD&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run_diffs
pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pprint(bos_year_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  Team League  Year   RS   RA   W   OBP   SLG    BA  Playoffs  RankSeason  \
0  BOS     AL  2010  818  744  89  0.34  0.45  0.27         0         NaN   
1  BOS     AL  2009  872  736  95  0.35  0.45  0.27         1         3.0   
2  BOS     AL  2008  845  694  95  0.36  0.45  0.28         1         3.0   

   RankPlayoffs    G  OOBP  OSLG   RD  
0           NaN  162  0.33  0.40   74  
1           4.0  162  0.34  0.42  136  
2           3.0  162  0.32  0.39  151  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;새로운 컬럼 &lt;code&gt;RD&lt;/code&gt;가 나타난 것을 확인할 수 있을 것이다.
오늘 배운 것은 &lt;code&gt;iterrows()&lt;/code&gt;을 활용한 데이터 가공(Transformation)을 배웠다. 다음 시간에는 &lt;code&gt;itertuples()&lt;/code&gt; 활용법에 대해 배우도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;pandas.DataFrame.iterrows¶. (n.d.). Retrieved March 20, 2020, from &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html?highlight=iterrows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End of Document&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
  </channel>
</rss>