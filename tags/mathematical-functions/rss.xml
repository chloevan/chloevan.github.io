<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathematical Functions on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/mathematical-functions/</link>
    <description>Recent content in Mathematical Functions on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 May 2020 20:30:30 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/mathematical-functions/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ch20 Logical Operations</title>
      <link>https://chloevan.github.io/gcp/bigquery/02_basics/ch20_logical_operations/</link>
      <pubDate>Wed, 27 May 2020 20:30:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/02_basics/ch20_logical_operations/</guid>
      <description>&lt;h2 id=&#34;i-구글-클라우드-설정&#34;&gt;I. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, Python과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-사용자-계정-인증&#34;&gt;II. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate_user()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticated&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Authenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-logical-operations&#34;&gt;III. Logical Operations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt; 절의 필터링에 관한 섹션에서 &lt;code&gt;WHERE&lt;/code&gt; 절은 &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt; 및 &lt;code&gt;NOT&lt;/code&gt;를 포함하는 &lt;code&gt;BOOL&lt;/code&gt;식 뿐만 아니라 실행 순서를 제어하는 괄호를 포함할 수 있다고 호출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bigquery
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

project_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your_project_id&amp;#39;&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bigquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project_id)

temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender, tripduration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE (tripduration &amp;lt; 600 AND gender = &amp;#39;female&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;WARNING:google.auth._default:No project ID could be determined. Consider running `gcloud config set project` or setting the GOOGLE_CLOUD_PROJECT environment variable


         gender  tripduration
0        female           238
1        female           389
2        female           397
3        female           385
4        female           499
...         ...           ...
5020698  female           412
5020699  female           468
5020700  female           561
5020701  female           450
5020702  female           583

[5020703 rows x 2 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;다음과 같이 &lt;code&gt;BOOL&lt;/code&gt; 변수와 비교 연산자를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT NULL AS is_vowel, NULL as letter, -1 as position
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT true, &amp;#39;a&amp;#39;, 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;b&amp;#39;, 2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;c&amp;#39;, 3
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT * 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM example 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE is_vowel != false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   is_vowel letter  position
0      True      a         1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 이번의 예에서와 같이 내장 상수와 비교할 때 &lt;code&gt;IS&lt;/code&gt; 연산자를 사용하는 것이 더 간단한 경우가 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT NULL AS is_vowel, NULL as letter, -1 as position
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT true, &amp;#39;a&amp;#39;, 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;b&amp;#39;, 2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;c&amp;#39;, 3
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT * 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM example 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE is_vowel IS NOT false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  is_vowel letter  position
0     None   None        -1
1     True      a         1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;의미상으로는 똑같아 보이겠지만, 결과는 다르다.&lt;/li&gt;
&lt;li&gt;비교연산자(&lt;code&gt;=, !=, &amp;lt;, etc&lt;/code&gt;)의 결과는 &lt;code&gt;NULL&lt;/code&gt;과의 비교를 위해 &lt;code&gt;NULL&lt;/code&gt;을 반환하지만, &lt;code&gt;IS&lt;/code&gt; 연산자는 그렇지 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-null에-대한-추가적인-tip&#34;&gt;IV. NULL에 대한 추가적인 Tip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt; 일반적으로 수집되지 않은 결측값 또는 값을 나타낸다. 값이 없고 &lt;code&gt;0도 아니고&lt;/code&gt;, &lt;code&gt;빈 문자열&lt;/code&gt;도 아니다.&lt;/li&gt;
&lt;li&gt;데이터 집합에 &lt;code&gt;NULL&lt;/code&gt;이 있는 경우 &lt;code&gt;NULL&lt;/code&gt;과의 비교는 항상 &lt;code&gt;NULL&lt;/code&gt;을 반환하므로 &lt;code&gt;WHERE&lt;/code&gt; 절에서 &lt;code&gt;NULL&lt;/code&gt; 값을 필터링하는 것에 주의 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IS&lt;/code&gt; 연산자를 사용하여 값이 &lt;code&gt;NULL&lt;/code&gt;인지 확인한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOL&lt;/code&gt; 변수를 직접 사용하는 것이 더 간단하고 읽기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT NULL AS is_vowel, NULL as letter, -1 as position
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT true, &amp;#39;a&amp;#39;, 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;b&amp;#39;, 2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT false, &amp;#39;c&amp;#39;, 3
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT * 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM example 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE is_vowel
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   is_vowel letter  position
0      True      a         1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Lakshmanan, V. (2018). &amp;ldquo;Exploring a powerful SQL pattern: ARRAY_AGG, STRUCT and UNNEST&amp;rdquo; Retrieved from &lt;a href=&#34;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&#34;&gt;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch19 Comparisons Decimal Calculations</title>
      <link>https://chloevan.github.io/gcp/bigquery/02_basics/ch19_comparisons_decimal_calculations/</link>
      <pubDate>Tue, 26 May 2020 18:30:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/02_basics/ch19_comparisons_decimal_calculations/</guid>
      <description>&lt;h2 id=&#34;i-구글-클라우드-설정&#34;&gt;I. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, Python과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-사용자-계정-인증&#34;&gt;II. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate_user()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticated&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Authenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-comparisons&#34;&gt;III. Comparisons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비교는 연산자를 이용하여 실시한다.&lt;/li&gt;
&lt;li&gt;연산자 &amp;lt; , &amp;gt; , &amp;gt;=, 그리고 != (또는 )는 비교의 결과를 얻기 위해 사용된다.&lt;/li&gt;
&lt;li&gt;정렬을 한다면, NaN 뒤에 나오는 NULL은 유효 숫자(inf 포함)보다 작은 것으로 가정한다.&lt;/li&gt;
&lt;li&gt;그러나 NaN과의 비교는 항상 거짓을 반환하고 NULL과의 비교는 항상 NULL을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bigquery
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

project_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your_project_id&amp;#39;&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bigquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project_id)

temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;Sat&amp;#39; AS day
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1451 AS numrides
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1018 AS oneways
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;SUN&amp;#39;, 2376, 936
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;Mon&amp;#39;, NULL, NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;Tue&amp;#39;, IEEE_DIVIDE(-3, 0), 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      0 -- this is -inf, 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  from example
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY numrides
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   day  numrides  oneways
0  Mon       NaN      NaN
1  Tue      -inf      0.0
2  Sat    1451.0   1018.0
3  SUN    2376.0    936.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;위 결과에서 순서상으로 &lt;code&gt;NaN&lt;/code&gt;이 가장 낮은 순위로 정렬되고 있음을 보여주고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-precise-decimal-calculations-with-numeric&#34;&gt;IV. Precise Decimal Calculations with NUMERIC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;INT64와 FLOUT64는 유연하고 빠를 수 있도록 설계되었으나 계산에 사용할 때 컴퓨터 메모리의 64비트 영역에 베이스-2(0초와 1초) 형태로 저장된다는 점에 의해 제한된다.&lt;/li&gt;
&lt;li&gt;이것은 대부분의 애플리케이션에서 충분히 절충할 가치가 있지만, 재무 및 회계 애플리케이션은 종종 십진수(기본값 10)로 표시된 숫자에 대해 정확한 계산을 요구한다.&lt;/li&gt;
&lt;li&gt;BigQuery의 숫자 데이터 유형은 숫자를 나타내는 38자리 숫자를 제공하며, 그 중 9자리 숫자가 소수점 뒤에 나타난다.&lt;/li&gt;
&lt;li&gt;저장용으로는 16바이트를 사용하며 십진수 분수를 정확히 나타낼 수 있어 재무 계산에 적합하다.&lt;/li&gt;
&lt;li&gt;예를 들어, 세 가지 지불의 합계를 계산해야 한다고 생각해 보십시오.&lt;/li&gt;
&lt;li&gt;당연히, 조회 결과가 정확하길 바랄 겁니다.&lt;/li&gt;
&lt;li&gt;그러나 FLOUT64 값을 사용할 경우 숫자가 메모리에 표시되는 방법과 숫자가 소수점 단위로 표시되는 방법 사이의 작은 차이가 다음과 같이 합산될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT 1.23 AS payment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT 7.89
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT 12.43
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SUM(payment) AS total_paid, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    AVG(payment) AS average_paid
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM example
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   total_paid  average_paid
0       21.55      7.183333
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 금융 및 회계 애플리케이션에서 이러한 부정확한 표현은 장부에 작성할 때에는 조금 까다로워 질 수 있다. 지급 데이터 유형을 NUMBER로 변경하면 어떻게 되는지 보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT NUMERIC &amp;#39;1.23&amp;#39; AS payment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT NUMERIC &amp;#39;7.89&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT NUMERIC &amp;#39;12.43&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SUM(payment) AS total_paid, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    AVG(payment) AS average_paid
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM example
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  total_paid average_paid
0      21.55  7.183333333
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;지급액의 합계는 이제 보다 정밀해졌다.&lt;/li&gt;
&lt;li&gt;반복적인 소수점이기 때문에 평균은 숫자로도 정확하게 나타낼 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Lakshmanan, V. (2018). &amp;ldquo;Exploring a powerful SQL pattern: ARRAY_AGG, STRUCT and UNNEST&amp;rdquo; Retrieved from &lt;a href=&#34;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&#34;&gt;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch18 Mathematical Functions</title>
      <link>https://chloevan.github.io/gcp/bigquery/02_basics/ch18_mathematical_functions/</link>
      <pubDate>Mon, 25 May 2020 07:30:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/02_basics/ch18_mathematical_functions/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/gcp/bigquery/google_big_query_icon_256x256.png#center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;i-구글-클라우드-설정&#34;&gt;I. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, Python과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-사용자-계정-인증&#34;&gt;II. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate_user()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticated&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Authenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-mathematical-functions&#34;&gt;III. Mathematical Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;빅쿼리 내부에는 다양한 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions&#34;&gt;표준 SQL의 수학 함수&lt;/a&gt;를 제공하고 있다.&lt;/li&gt;
&lt;li&gt;위 함수들은 &lt;code&gt;integer &amp;amp; floating-point&lt;/code&gt; 유형에서 사용이 가능하니 참고하기를 바란다.&lt;/li&gt;
&lt;li&gt;다음은 그 중에서 몇가지 예시를 통해 어떻게 사용하는지 알아보도록 한다.&lt;/li&gt;
&lt;li&gt;개념적으로 어려운 것은 아니다. 다만, &lt;code&gt;SQL&lt;/code&gt;에서는 어떻게 사용하는지 한번 보자는데 의의가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-round&#34;&gt;(1) ROUND&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;X만 존재하는 경우, ROUND는 X를 가장 가까운 정수로 반올림을 한다.&lt;/li&gt;
&lt;li&gt;N이 존재하는 경우, ROUND는 X를 소수점 이하 N자리까지 반올림을 한다.&lt;/li&gt;
&lt;li&gt;N이 음수이면 ROUND는 소수점 왼쪽의 자릿수를 반올림 한다.&lt;/li&gt;
&lt;li&gt;중간값은 올림된다.&lt;/li&gt;
&lt;li&gt;오버플로가 발생하면 오류를 생성한다.&lt;/li&gt;
&lt;li&gt;사용방법은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;ROUND(X [, N])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bigquery
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

project_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your_id&amp;#39;&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bigquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project_id)

temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;Sat&amp;#39; AS day
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1451 AS numrides
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1018 AS oneways
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;SUN&amp;#39;, 2376, 936
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    , ROUND(oneways/numrides, 2) AS frac_oneway 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  from example
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   day  numrides  oneways  frac_oneway
0  Sat      1451     1018         0.70
1  SUN      2376      936         0.39
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-ieee_divide&#34;&gt;(2) IEEE_DIVIDE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;보통 나눗셈을 할 때, 0으로 나누기를 하면 &lt;code&gt;overflow&lt;/code&gt;를 생성한다.&lt;/li&gt;
&lt;li&gt;이 때, &lt;code&gt;IEEE_DIVIDE&lt;/code&gt;를 사용하면 오버플로 오류를 생성하지 않는다.&lt;/li&gt;
&lt;li&gt;이 때에는 &lt;code&gt;FLOAT64&lt;/code&gt;를 결과값으로 반환한다.&lt;/li&gt;
&lt;li&gt;특수한 경우에 대해 살펴보자.
&lt;ul&gt;
&lt;li&gt;결과가 오버플로되면 +/-inf를 반환한다.&lt;/li&gt;
&lt;li&gt;Y=0이고 X=0이면, NaN을 반환한다.&lt;/li&gt;
&lt;li&gt;Y=0이고 X!=0이면, +/-inf를 반환한다.&lt;/li&gt;
&lt;li&gt;X = +/-inf이고 Y = +/-inf이면 NaN을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용방법은 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;IEEE_DIVIDE(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH example AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;Sat&amp;#39; AS day
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1451 AS numrides
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        , 1018 AS oneways
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;SUN&amp;#39;, 2376, 936
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UNION ALL SELECT &amp;#39;Wed&amp;#39;, 0, 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    , ROUND(IEEE_DIVIDE(oneways, numrides), 2) AS frac_oneway 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  from example
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   day  numrides  oneways  frac_oneway
0  Sat      1451     1018         0.70
1  SUN      2376      936         0.39
2  Wed         0        0          NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;IEEE_DIVIDE의 특수한 경우에 대해 좀 더 살펴보자.&lt;/li&gt;
&lt;li&gt;아래 표는 IEEE_DIVIDE의 특수한 경우를 나열한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;분자 데이터 유형(X)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;분모 데이터 유형(Y)&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;결과 값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0을 제외한 모든 유형&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;+/-inf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;+/-inf&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;+/-inf&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3-safe-functions&#34;&gt;(3) SAFE Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 연산을 수행할 때, &lt;code&gt;SAFE&lt;/code&gt; 함수를 사용하게 되면 기존에는 &lt;code&gt;error&lt;/code&gt;를 발생하던 것이 &lt;code&gt;NULL&lt;/code&gt;을 결과값으로 반환한다.&lt;/li&gt;
&lt;li&gt;아래 코드와 같이 &lt;code&gt;SAFE&lt;/code&gt;가 없다면 에러를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT LOG(10, -3), LOG(10, 3)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;ERROR:root:An unexpected error occurred while tokenizing input
The following traceback may be corrupted or invalid
The error message is: (&#39;EOF in multi-line string&#39;, (1, 2))


---------------------------------------------------------------------------

BadRequest                                Traceback (most recent call last)

&amp;lt;ipython-input-6-40a71401de97&amp;gt; in &amp;lt;module&amp;gt;()
      1 temp = client.query(&#39;&#39;&#39;
      2   SELECT LOG(10, -3), LOG(10, 3)
----&amp;gt; 3   &#39;&#39;&#39;).to_dataframe()
      4 
      5 print(temp)

.
.
.    

BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/bigquerytutorial-274406/queries/35b716dc-77b7-46c4-acb5-9202ad15115c?maxResults=0&amp;amp;location=US: Floating point error in function: LOG(10, -3)

(job ID: 35b716dc-77b7-46c4-acb5-9202ad15115c)

   -----Query Job SQL Follows-----   

    |    .    |    .    |    .    |
   1:
   2:  SELECT LOG(10, -3), LOG(10, 3)
   3:  
    |    .    |    .    |    .    |
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;그런데, 위 코드에서 &lt;code&gt;SAFE&lt;/code&gt;를 추가하면 코드는 강제 실행된다.&lt;/li&gt;
&lt;li&gt;여기에서 주목할 것은 &lt;code&gt;SAFE.LOG(10, -3)&lt;/code&gt;인데, 원래는 계산되지 않는 수이나, &lt;code&gt;None&lt;/code&gt;로 반환된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT SAFE.LOG(10, -3), SAFE.LOG(10, 3)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    f0_       f1_
0  None  2.095903
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL에서 사칙연산에서 발생하는 오류들은 대부분 일상적인 산수에서는 허용되지 않거나 무조건 0으로 결과값이 반환되는 것이다. (예: 분모가 0인 경우)&lt;/li&gt;
&lt;li&gt;그런데, 그렇다고 해서 SQL 본연의 업무 중 하나인 쿼리조회가 되지 않는다면 일일이 계산식을 다 맞춰야 하는 불필요한 작업이 동반될 수 밖에 없다.&lt;/li&gt;
&lt;li&gt;이러한 부분을 일부 해결해주는 것이 &lt;code&gt;SAFE Function &amp;amp; NaN&lt;/code&gt;의 결과값 반환이 아닐까 한다.&lt;/li&gt;
&lt;li&gt;다음 시간에는 &lt;code&gt;비교 연산자&lt;/code&gt;와 &lt;code&gt;소수점 연산&lt;/code&gt;에 대해서 배워보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Lakshmanan, V. (2018). &amp;ldquo;Exploring a powerful SQL pattern: ARRAY_AGG, STRUCT and UNNEST&amp;rdquo; Retrieved from &lt;a href=&#34;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&#34;&gt;https://www.freecodecamp.org/news/exploring-a-powerful-sql-pattern-array-agg-struct-and-unnest-b7dcc6263e36/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>