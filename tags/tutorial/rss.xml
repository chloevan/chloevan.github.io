<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2020 11:38:15 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/tutorial/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>list handling</title>
      <link>https://chloevan.github.io/r/basics/list/</link>
      <pubDate>Wed, 29 Apr 2020 11:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/list/</guid>
      <description>&lt;h2 id=&#34;i-개요&#34;&gt;I. 개요&lt;/h2&gt;
&lt;p&gt;모든 프로그래밍 언어에는 기본적으로 데이터타입이 존재한다. R도 프로그래밍 언어이기 때문에 데이터 타입의 일반적인 유형이 존재한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/r_basics/data_structure.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt;의 기본 개념을 익혔다면, 전반적인 구조에 대해 살피는 시간을 갖도록 한다. 먼저 동일 성질의 &lt;code&gt;Vector&lt;/code&gt;가 모여서 &lt;code&gt;matrix&lt;/code&gt;도 되고, 데이터프레임도 된다. 그리고 이러한 다양한 데이터의 구조가 모여 리스트를 형성하는데,&lt;/p&gt;
&lt;p&gt;리스트를 만드는 것도 중요한 건, 즉 이해다. 리스트에 접근법이 중요한데, 리스트를 잘 다루면, &lt;code&gt;apply&lt;/code&gt; 함수 계열을 사용하는데도 큰 도움이 된다.&lt;/p&gt;
&lt;p&gt;특히, 100GB 이상의 데이터를 다루게 되면, &lt;code&gt;apply()&lt;/code&gt; 함수로 작업해야 하는 일이 종종 발생한다.&lt;/p&gt;
&lt;h2 id=&#34;ii-list-생성&#34;&gt;II. List 생성&lt;/h2&gt;
&lt;p&gt;이제 리스트를 작성해보자. 문자형 벡터와 숫자형 벡터를 만든후 리스트에 넣도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
xChar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
xList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(xNum, xChar)
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xList)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1.00 3.14 5.00 7.00
## 
## [[2]]
## [1] &amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot; &amp;quot;D&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 출력값에서 주의 깊게 봐야 하는 것 &lt;code&gt;[[1]]&lt;/code&gt;과 같은 형태이다. 즉, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;1.00&lt;/code&gt;과 같은 실제 값이 들어있는 각각의 원소에 대해 접근을 하려면, &lt;code&gt;[[1]]&lt;/code&gt;과 같은 것에 먼저 접근을 해야 하기 때문이다.&lt;/p&gt;
&lt;p&gt;실제로 &lt;code&gt;3.14&lt;/code&gt;을 출력하도록 해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xList[[1]][2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 3.14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;출력을 할 때는 위와 같은 형태로 작성을 해야 한다.&lt;/p&gt;
&lt;p&gt;그런데, 우리가 궁금한 것은 이러한 접근법이 중요한 것이 아니다. &lt;code&gt;List&lt;/code&gt;라는 데이터안에 있는 값에서 의미있는 수치를 뽑아야 하는 것이 데이터 분석가가 하는 일이기 때문이다.&lt;/p&gt;
&lt;p&gt;이제 간단한 &lt;code&gt;lappy()&lt;/code&gt; 함수를 활용해서 간단하게 통계 수치를 뽑도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-lapply&#34;&gt;III. lapply()&lt;/h2&gt;
&lt;p&gt;lapply() 함수는 추후에 &lt;code&gt;apply&lt;/code&gt; 함수 계열에 대해서 자세하게 설명할 때 다시한번 드리도록 하겠다. 각각의 &lt;code&gt;apply&lt;/code&gt;함수는 input 데이터구조와 output 데이터 구조에 따라 사용되어야 할 함수 이름이 조금씩 다르다.&lt;/p&gt;
&lt;p&gt;참고로 lapply인 이유는 output이 리스트로 반환되기 때문에 그렇다.&lt;/p&gt;
&lt;h3 id=&#34;1-사용설명서&#34;&gt;(1) 사용설명서&lt;/h3&gt;
&lt;p&gt;필자는 R의 사용설명서를 좋아한다. 예제와 설명이 주로 박사급 사람들이 작성해서 그런가 가독성이 좋다.&lt;/p&gt;
&lt;p&gt;꼭 다음을 실행해서 사용설명서를 읽기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;(lapply)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lappy()&lt;/code&gt;의 구조는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(객체(vector, dataframe, list), FUNCTION)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-without-lapply&#34;&gt;(2) Without lapply&lt;/h3&gt;
&lt;p&gt;이제 함수를 적용한다. 이번에 활용하려는 건, 리스트에 저장되어 있는 &lt;code&gt;xNum&lt;/code&gt;값의 &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;값을 구하려고 한다.&lt;/p&gt;
&lt;p&gt;아래와 같이 적용해야 할 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(xList[[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 4.035
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 코드의 단점은 당연히 확장성이 떨어진다. 즉, 1개의 벡터에만 접근이 가능하기 때문에 실무에서는 당연히 쓰지 않는다.&lt;/p&gt;
&lt;h3 id=&#34;3-with-lapply&#34;&gt;(3) With lapply&lt;/h3&gt;
&lt;p&gt;이번에는 &lt;code&gt;lapply&lt;/code&gt;을 활용해서 값을 구해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, summary)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000 
## 
## [[2]]
##    Length     Class      Mode 
##         4 character character
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자열까지 조회가 되는 것을 확인할 수 있다. 여기에서 조금더 &lt;code&gt;list&lt;/code&gt;를 확장해보자. &lt;code&gt;xList&lt;/code&gt;에 &lt;code&gt;xNum2&lt;/code&gt; 객체를 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
xList[[3]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xNum2
&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;(xList)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## List of 3
##  $ : num [1:4] 1 3.14 5 7
##  $ : chr [1:4] &amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot; &amp;quot;D&amp;quot;
##  $ : num [1:4] 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 추가가 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이제, 애초에 구하려고 했던, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; 를 구할 수 있습니다. 결과가 어떻게 나오는지 확인합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, max)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 7
## 
## [[2]]
## [1] &amp;quot;D&amp;quot;
## 
## [[3]]
## [1] 5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;min&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, min)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] &amp;quot;A&amp;quot;
## 
## [[3]]
## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;mean&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, mean)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Warning in mean.default(X[[i]], ...): argument is not numeric or logical:
## returning NA
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 4.035
## 
## [[2]]
## [1] NA
## 
## [[3]]
## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자형이 있어도, &lt;code&gt;apply&lt;/code&gt;함수에서는 우선 출력됨을 볼 수 있다. 여기에서 문자형의 값 처리에 대한 설명은 본 포스트의 작성 범위를 넘어서게 된다.&lt;/p&gt;
&lt;p&gt;R의 기본함수는 다른 언어와 다르게 데이터 타입마다 엄격하게 적용되는 건 아니다! (Why?) 이 부분이 R의 장점이자, 추후에 단점으로 작용하기도 한다.&lt;/p&gt;
&lt;h3 id=&#34;4-naming&#34;&gt;(4) Naming&lt;/h3&gt;
&lt;p&gt;각 벡터에 이제 이름을 지어서 List 작성 하면, 원소의 접근법이 보다 수월해진다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(xList) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemNum&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemChar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itemNum2&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제, &lt;code&gt;$name&lt;/code&gt; 또는 &lt;code&gt;[[&amp;quot;name&amp;quot;]]&lt;/code&gt;과 같은 형태로 원소에 접근할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xList&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;itemNum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이를 통해서 &lt;code&gt;lapply()&lt;/code&gt; 활용하면 조금 더 깔끔하게 출력할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(xList, summary)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## $itemNum
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000 
## 
## $itemChar
##    Length     Class      Mode 
##         4 character character 
## 
## $itemNum2
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    2.00    2.75    3.50    3.50    4.25    5.00
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vi-결론&#34;&gt;VI. 결론&lt;/h2&gt;
&lt;p&gt;List는 R에서 매우 중요하다. 특히, 데이터셋이 꼭 &lt;code&gt;data.frame&lt;/code&gt;만 존재하는 것은 아니다.&lt;/p&gt;
&lt;p&gt;지도 데이터는 &lt;code&gt;sp&lt;/code&gt;라는 객체로 불리어지고, &lt;code&gt;json&lt;/code&gt;타입도 존재한다. 이러한 데이터를 다루는데 적합한 데이터 구조가 &lt;code&gt;list&lt;/code&gt;이기 때문에 주기적으로 다룰 필요가 있다.&lt;/p&gt;
&lt;h2 id=&#34;v-reference&#34;&gt;V. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More on Vectors and Indexing</title>
      <link>https://chloevan.github.io/r/basics/more_vectors_indexing/</link>
      <pubDate>Sun, 26 Apr 2020 16:10:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/more_vectors_indexing/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 Tutorial은 강사에게 강의를 듣는 과거-현재-미래 학생들을 위해 작성하였습니다.&lt;/p&gt;
&lt;p&gt;이 글을 읽어주시는 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-벡터&#34;&gt;I. 벡터&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;본 포스트는 프로그래밍과 R을 처음 배우는 사람을 위해 작성하였습니다. 짧게 읽어두시기를 바랍니다. 공부하실 때는 복잡하게 생각하지는 마시기를 바랍니다. 영어의 기본단어 및 문법을 배우듯이 그냥 받아들이시기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;현재 진행중인 R 기초문법은 아래와 같습니다. 원하시는 것은 참조해서 가볍게 공부하시기를 바랍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/basics/basic_objects_vector/&#34;&gt;Basic Objects - Vector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;벡터(&lt;code&gt;Vector&lt;/code&gt;). R에서 다루는 가장 작은 단위값의 데이터다. 1차원으로 구성이 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-다양한-방식의-벡터-생성&#34;&gt;(1) 다양한 방식의 벡터 생성&lt;/h3&gt;
&lt;p&gt;벡터는 같은 종류의 값으로 구성되어야 함을 배웠다. 그런데, 벡터 생성은 다양한 방식으로 구성될 수 있다.&lt;/p&gt;
&lt;p&gt;데이터분석을 할 때 자주 쓰는 건 아니다. 보통은 주로 데이터 전처리와 시각화, 그리고 각종 통계 분석을 해석 하면서 시간을 보낸다.그런데, 가끔 필요할 때가 있다.&lt;/p&gt;
&lt;p&gt;간단하게 데이터를 만들어 시뮬레이션을 진행할 때다. 이럴 때 기초문법을 알고 있으면 데이터가 없어도 매우 쉽게 데이터를 만들수가 있다.&lt;/p&gt;
&lt;p&gt;코드로 넘어가보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xSeq &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xSeq)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;원래대로라면, &lt;code&gt;xSeq &amp;lt;- c(1,2,3...,10)&lt;/code&gt; 이런 형태로 코드가 작성되어야 하지만, 매우 간단하게 작성된 것을 볼 수 있다. 이 문법에 기초해서 10을 살짝 변형해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMul &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
xPar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of x1:5*4: &amp;#34;&lt;/span&gt;, xMul))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of x1:5*4:  4 8 12 16 20
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xPar: &amp;#34;&lt;/span&gt;, xPar))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xPar:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 &lt;code&gt;()&lt;/code&gt;을 추가해서 숫자형 벡터를 원하는 길이만큼 늘려서 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;이러한 문법을 영어로는 &lt;code&gt;sequence&lt;/code&gt;라고 부른다. 그런데, &lt;code&gt;sequence&lt;/code&gt;문법을 통해서 인덱싱도 할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;2-indexing-with-sequence&#34;&gt;(2) Indexing with Sequence&lt;/h3&gt;
&lt;p&gt;먼저 코드부터 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;myStart &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
xPar[myStart&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(myStart&lt;span style=&#34;color:#ae81ff&#34;&gt;+7&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1]  3  4  5  6  7  8  9 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;1:20&lt;/code&gt;을 담고있는 &lt;code&gt;xPar&lt;/code&gt; 벡터에, &lt;code&gt;[myStart:(myStart+7)]&lt;/code&gt; 범위를 지정해서, 그 범위에 해당하는 값만 반환하도록 하는 문법이다.&lt;/p&gt;
&lt;p&gt;이 부분은 꼭 한번 실습 하는 것을 권한다.&lt;/p&gt;
&lt;h3 id=&#34;3-seq--req&#34;&gt;(3) seq() &amp;amp; req()&lt;/h3&gt;
&lt;p&gt;지금까지 배운 것은 &lt;code&gt;sequence&lt;/code&gt; 벡터 생성에 관한 것을 배웠다. 그런데, 만약 규칙을 통해서 생성하고 싶다면 어떻게 할까? 사용자 정의 함수를 만들수도 있지만, R에서는 웬만한 건 다 함수로 제공한다.&lt;/p&gt;
&lt;p&gt;함수는 일종의 단어와 같다. 단어의 개수를 얼마만큼 많이 아느냐에 따라 외국어 실력이 나오듯이, 기초 함수 사용법은 많이 외우면 외울수록 좋다.&lt;/p&gt;
&lt;p&gt;코드를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xSeq &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-5&lt;/span&gt;, to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xSeq: &amp;#34;&lt;/span&gt;, xSeq))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xSeq:  -5 -2 1 4 7 10 13 16 19 22 25 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문법이 어렵지는 않을 것이다. 시작점과 끝점이 있고, 단위를 3번 건너뛰어서 출력하도록 하는 것이다.&lt;/p&gt;
&lt;p&gt;이번에는 &lt;code&gt;rep()&lt;/code&gt;함수를 사용해보자. &lt;code&gt;rep&lt;/code&gt;는 &lt;code&gt;replicate(복제하다)&lt;/code&gt;는 뜻을 가지고 있는데, 특정 숫자열이 반복해서 나타나도록 한다. 코드를 보면 쉽게 이해가 갈 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xRep &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), each &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result of xRep: &amp;#34;&lt;/span&gt;, xRep))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## The result of xRep:  1 1 1 2 2 2 3 3 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;만약에 각 함수에 대해 조금 구체적으로 알고 싶다면, 다음과 같이 입력하고 실행해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;(rep) &lt;span style=&#34;color:#75715e&#34;&gt;# 방법 1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;rep      &lt;span style=&#34;color:#75715e&#34;&gt;# 방법 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;지금까지 벡터의 기본에 대해 배웠다. 다음시간에는 벡터내에 존재하는 결측치 = &lt;code&gt;NA&lt;/code&gt; 처리 방법에 대해 학습하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;2-reference&#34;&gt;2. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Objects - Vector</title>
      <link>https://chloevan.github.io/r/basics/basic_objects_vector/</link>
      <pubDate>Sat, 25 Apr 2020 18:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/basic_objects_vector/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;본 Tutorial은 강사에게 강의를 듣는 과거-현재-미래 학생들을 위해 작성하였습니다.&lt;/p&gt;
&lt;p&gt;이 글을 읽어주시는 분들에게 작은 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;i-벡터&#34;&gt;I. 벡터&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;본 포스트는 프로그래밍과 R을 처음 배우는 사람을 위해 작성하였습니다. 짧게 읽어두시기를 바랍니다. 공부하실 때는 복잡하게 생각하지는 마시기를 바랍니다. 영어의 기본단어 및 문법을 배우듯이 그냥 받아들이시기를 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;벡터(&lt;code&gt;Vector&lt;/code&gt;). R에서 다루는 가장 작은 단위값의 데이터다. 1차원으로 구성이 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-4가지-벡터&#34;&gt;(1) 4가지 벡터&lt;/h3&gt;
&lt;p&gt;크게 4가지의 벡터가 존재한다. 간단하게 코드를 작성해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
xLog &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
xChar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;가&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;나&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
xMix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello R!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 작성한 코드는 실행한다. 실행할 때, 윈도우 사용자는 &lt;code&gt;Ctrl + Enter&lt;/code&gt;,  Mac사용자는 &lt;code&gt;Command + Enter&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;이렇게 크게 4개의 유형으로 정리할 수 있다. 이를 출력하는 방법은 크게 2가지다. &lt;code&gt;print(xNum)&lt;/code&gt; 또는 &lt;code&gt;xNum&lt;/code&gt;. 결과값을 확인하는데, 지금은 어떠한 방법으로 사용해도 무관하지만, &lt;code&gt;print(xNum)&lt;/code&gt;으로 습관을 가져가는 걸 추천한다. If-else, For-loop 문을 사용할 때 매우 유용하다.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;print(xNum)&lt;/code&gt;을 실행하여 결과값을 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 &lt;code&gt;xNum&lt;/code&gt;을 실행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xNum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.00 3.14 5.00 7.00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;보시다시피, 결과값의 큰 차이는 없다. xLog, xChar도 동일하게 실행하본다.&lt;/p&gt;
&lt;h3 id=&#34;2-벡터-추가-append&#34;&gt;(2) 벡터 추가 (Append)&lt;/h3&gt;
&lt;p&gt;벡터 추가하는 방법을 배워보자. 어려운 건 아니다. 자유자재로 벡터를 추가할 수 있다. 이 때 주의해야 하는 것은 동일 성질의 값을 입력해야 한다.&lt;/p&gt;
&lt;p&gt;문자는 문자열끼리, 숫자는 숫자열끼리, 안 그러면 데이터가 &lt;code&gt;Mix&lt;/code&gt;가 된다. 이 때 &lt;code&gt;print&lt;/code&gt;가 아닌 출력할 때는 &lt;code&gt;message&lt;/code&gt; + &lt;code&gt;cat&lt;/code&gt; 함수를 활용해 본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
x2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(x, x)
x3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(x2, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x: &amp;#34;&lt;/span&gt;, x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x:  2 4 6 8
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x2: &amp;#34;&lt;/span&gt;, x2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x2:  2 4 6 8 2 4 6 8
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current x3: &amp;#34;&lt;/span&gt;, x3))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Current x3:  2 4 6 8 2 4 6 8 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 추가할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;3-데이터-요약-summary&#34;&gt;(3) 데이터 요약 summary()&lt;/h3&gt;
&lt;p&gt;각각의 벡터는 일종의 정보라고 생각해야 한다. 벡터 1개를 가지고도 매우 쉽게 다양한 분석을 할 수 있다. 이것이 &lt;code&gt;R&lt;/code&gt;의 장점이기도 하다. 이 때 쉽게 데이터를 요약하는 함수가 &lt;code&gt;summary()&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   2.605   4.070   4.035   5.500   7.000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4개의 데이터에서도 값이 출력된다. 문자열과 논리형 벡터는 어떨까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 문자열을 보자&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xChar)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##         4 character character
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;간단하게 Length 즉 여기서는 벡터 내에 존재하는 문자열 개수를 표현한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;논리형은 어떻게 출력될까?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;summary&lt;/span&gt;(xLog)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##    Mode   FALSE    TRUE 
## logical       2       2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 각 값의 따라 갯수로 출력되는 걸 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;4-벡터의-length-확인&#34;&gt;(4) 벡터의 length 확인&lt;/h3&gt;
&lt;p&gt;length는 일종의 데이터프레임에서 행의 개수와도 같다. 빠르게 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(xNum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-xmix-데이터는-어떻게-변할까&#34;&gt;(5) xMix 데이터는 어떻게 변할까?&lt;/h3&gt;
&lt;p&gt;아직까지 다루지 않은 내용에 대해 다룬다. 이러한 데이터는 데이터셋의 크기가 매우커서 전체를 확인하지 못할 때 종종 마주칠 수 있다. 데이터 입력값의 오류인데, 이러한 오류를 인지하지 못하면 분석은 원하는대로 가지 못하고 우왕좌왕 할 때가 많다.&lt;/p&gt;
&lt;p&gt;특히, 엑셀 데이터를 수집해서 하는 분석은 이러한 데이터 &lt;code&gt;Mix&lt;/code&gt;가 종종 일어나니, 꼭 주의해야 하는 경우다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xMix)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot;        &amp;quot;TRUE&amp;quot;     &amp;quot;Hello R!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각각의 값이 쌍따옴표 &lt;code&gt;&amp;quot;값&amp;quot;&lt;/code&gt;이 붙어있는 것을 봐서는 문자열로 변했다. 이상하지 않은가? 원래 의도한 입력값은 숫자형이었기 때문이다.&lt;/p&gt;
&lt;p&gt;그런데, 만약 이 때 &lt;code&gt;1&lt;/code&gt;에 1을 더해서 2로 바꾸고 싶다면 어떻게 해야할까?&lt;/p&gt;
&lt;h3 id=&#34;6-인덱싱과-형변환&#34;&gt;(6) 인덱싱과 형변환&lt;/h3&gt;
&lt;p&gt;인덱싱은 일종의 각 요소에 대해 접근하는 방법이다. 어려운 건 아니다. 우선 1에 접근을 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMix[1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;xMin[접근하고 싶은 위치의 숫자]&lt;/code&gt;를 입력하면 원하는 데이터를 확보할 수 있다. 그럼, 이제 데이터 타입을 변환해서 숫자형으로 바꿔본다. 이것 역시 어떤 함수가 쓰이는지 확인하는 것으로 이해하기를 바란다. 이 때에는 &lt;code&gt;왜, 이 함수를 쓰는가?&lt;/code&gt; 보다는, &lt;code&gt;아, 이 함수를 쓰면 바뀌는구나&lt;/code&gt; 것으로 이해하기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;보시다시피 &lt;code&gt;1&lt;/code&gt;사이에 쌍따옴표가 사라졌다. 이제 1을 더해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;바뀌었다. 이제 바뀐 값을 적용하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;xMix[1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(xMix[1]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(xMix)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2&amp;quot;        &amp;quot;TRUE&amp;quot;     &amp;quot;Hello R!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;2&lt;/code&gt;로 바뀐 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-reference&#34;&gt;2. Reference&lt;/h2&gt;
&lt;p&gt;Chapman, C., &amp;amp; Feit, E. M. D. (2015). R for marketing research and analytics. Cham: Springer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Round 함수 - digits</title>
      <link>https://chloevan.github.io/r/basics/round/</link>
      <pubDate>Fri, 17 Apr 2020 10:38:15 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/basics/round/</guid>
      <description>&lt;h2 id=&#34;round-함수-소개&#34;&gt;Round 함수 소개&lt;/h2&gt;
&lt;p&gt;round 함수는 대개 소수점 자리에서 반올림 할 때 자주 쓰는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.56&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(test, digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 1.2 2.4 3.6 4.6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;digits = 1&lt;/code&gt;의 의미는 소수점 첫번째 자리에서 반올림 하라는 뜻이다.&lt;/p&gt;
&lt;p&gt;그런데 &lt;code&gt;digits = -1&lt;/code&gt;을 하게 되면 어떻게 될까?&lt;/p&gt;
&lt;h2 id=&#34;정수-반올림&#34;&gt;정수 반올림&lt;/h2&gt;
&lt;p&gt;빠르게 실습을 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(test2, digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] -10 -30  10  30  40 120 250
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;digits = -1&lt;/code&gt;을 하게되면 정수의 첫번째 자리에서 반올림한다.&lt;/p&gt;
&lt;p&gt;매우 기본적인 것이지만, 자주 쓰지 않으면 잘 모르는 기본함수 사용 요령법이다.&lt;/p&gt;
&lt;p&gt;Just Reminder&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 08 - HTML, CSS 적용</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_08/</link>
      <pubDate>Sun, 05 Apr 2020 11:30:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_08/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_07/&#34;&gt;shiny tutorial 07 - flexdashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-html-css-jquery-소개&#34;&gt;II. HTML, CSS, JQuery 소개&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;에서 &lt;code&gt;Shiny&lt;/code&gt;와 &lt;code&gt;HTML&lt;/code&gt; 문법 사이에는 여러 공통점이 있다는 것을 확인 했다. 여기에서는 &lt;code&gt;HTML&lt;/code&gt;의 내용보다는 &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;JQuery&lt;/code&gt;에 대해서 다루도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선, 처음 접하는 &lt;code&gt;CSS&lt;/code&gt;와 &lt;code&gt;JQuery&lt;/code&gt;에 대해 간단하게 정리하면 아래와 같을 것이다 (김진성, 2018, p.678).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시맨틱 태그, 디자인 속성 비 권장&lt;/li&gt;
&lt;li&gt;CSS 대체 태그 중단(center, frame, font 등)&lt;/li&gt;
&lt;li&gt;웹 개발용 API 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 문서 작성 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML문서를 대상으로 디자인 적용&lt;/li&gt;
&lt;li&gt;디자인 소프트웨어(Photoshop) 일부 기능 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 디자인 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최신 자바스크립트&lt;/li&gt;
&lt;li&gt;문서 객체 처리, 이벤트 핸들링, 애니메이션&lt;/li&gt;
&lt;li&gt;ajax 등의 개발에 필요한 라이브러리 제공&lt;/li&gt;
&lt;li&gt;주요 기능: 동적 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;읽고나면, 딱히 정리되는 건 아니다. 역시 직접 실행해보고 해봐야 안다. &lt;code&gt;CSS&lt;/code&gt;부터 적용한 &lt;code&gt;Shiny&lt;/code&gt;가 어떻게 달라지는지 확인해보자.&lt;/p&gt;
&lt;p&gt;이번 &lt;code&gt;Tutorial&lt;/code&gt; 부터는 &lt;code&gt;ui.R&lt;/code&gt; &amp;amp; &lt;code&gt;server.R&lt;/code&gt; 두 파일로 구분할 것이다. 실제 프로젝트에서도 그렇게 진행한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-css-적용&#34;&gt;III. CSS 적용&lt;/h2&gt;
&lt;h2 id=&#34;1-css-파일-다운-받기&#34;&gt;(1) CSS 파일 다운 받기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;빠르게 대시보드를 작성해야 하는 것이 선결과제이기 때문에, 처음부터 하나씩 만들 생각을 하면 곤란하다.&lt;/li&gt;
&lt;li&gt;CSS파일 부트스트랩: &lt;a href=&#34;https://bootswatch.com/&#34;&gt;https://bootswatch.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 싸이트에 들어가면 마음에 드는 테마를 클릭하여 &lt;code&gt;CSS&lt;/code&gt;파일을 다운로드 받는다. 강사는 &lt;code&gt;Darkly&lt;/code&gt;를 선택했다.&lt;/p&gt;
&lt;h2 id=&#34;2-r-shiny-project-시작&#34;&gt;(2) R Shiny Project 시작&lt;/h2&gt;
&lt;p&gt;새롭게 R Shiny Project를 시작해본다. [&lt;code&gt;File&lt;/code&gt;] - [&lt;code&gt;New File&lt;/code&gt;] - [&lt;code&gt;Shiny Web App&lt;/code&gt;]을 클릭하면 아래와 같은 팝업이 나오는데, 여기에서 반드시, &lt;code&gt;Multiple File (ui.R/server.R)&lt;/code&gt;을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;디렉토리 &lt;code&gt;tree&lt;/code&gt;구조를 살펴보면 아래와 같다. 특히 &lt;code&gt;css&lt;/code&gt;파일이 어떤 폴더 안에 있는지를 확인한다. 반드시, &lt;code&gt;www folder&lt;/code&gt;안에 &lt;code&gt;css&lt;/code&gt; 파일이 있어야 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree
├── server.R
├── ui.R
└── www
    └── bootstrap.min.css
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-app-화면-비교&#34;&gt;(3) App 화면 비교&lt;/h2&gt;
&lt;p&gt;기본적으로 제공되는 &lt;code&gt;ui.R&lt;/code&gt;와 &lt;code&gt;server.R&lt;/code&gt; 소스코드를 그대로 활용했다. 실제로는 각자 준비한 소스코드가 있어야 하기 때문에, 실제 다운로드 받은 &lt;code&gt;css&lt;/code&gt; 파일 적용할 때에는 조금 달라질 수 있음을 유의한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 기본 &lt;code&gt;Shiny App&lt;/code&gt; 화면이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본 소스코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is the user-interface definition of a Shiny web application. You can&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# run the application by clicking &amp;#39;Run App&amp;#39; above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyUI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(


    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이번에는, &lt;code&gt;CSS&lt;/code&gt; 파일을 적용한 &lt;code&gt;Shiny App&lt;/code&gt; 화면이다. 여기에서 주의 깊게 봐야하는 것은 어떻게 &lt;code&gt;Shiny&lt;/code&gt;에서 &lt;code&gt;CSS File&lt;/code&gt;이 적용되는지의 여부다. 우선, 화면부터 확인해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;배경색이 바뀐것을 확인할 수 있다. 여기에서 &lt;code&gt;css&lt;/code&gt;경로가 들어간 &lt;code&gt;코드 한줄&lt;/code&gt; 만 입력하면 된다. (# css 테마 적용, 코드 참조)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is the user-interface definition of a Shiny web application. You can&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# run the application by clicking &amp;#39;Run App&amp;#39; above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyUI&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

    &lt;span style=&#34;color:#75715e&#34;&gt;# css 테마 적용&lt;/span&gt;
    tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;(rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;, href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bootstrap.min.css&amp;#34;&lt;/span&gt;)
    ),
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기본 화면으로만 구성하니, 약간 멋이 없다. 이럴 때는 shiny gallery에서 응용해보자. 마찬가지로, 강사는 소스코드를 그대로 사용할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;4-다른-앱의-적용-실습&#34;&gt;(4) 다른 앱의 적용 (실습)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny Gallery&lt;/code&gt;에서 &lt;a href=&#34;https://shiny.rstudio.com/gallery/retirement-simulation.html&#34;&gt;Retirement: simulating wealth with random returns, inflation and withdrawals&lt;/a&gt; &lt;code&gt;소스코드(ui.R / server.R)&lt;/code&gt;를 전체 &lt;code&gt;Copy&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;p&gt;그 후에, 아래 코드를&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;css&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;테마&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;적용&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slate.css&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ui.R&lt;/code&gt; 적당한 곳에 놓고 적용해본다. 그러면, &lt;code&gt;shiny Gallery&lt;/code&gt;에서 보던 것과 다른 색상이 나타날 것이다. (&lt;code&gt;slate.css&lt;/code&gt; 적용)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-css-shiny에-직접-적용-제목-수정&#34;&gt;(5) CSS Shiny에 직접 적용 (제목 수정)&lt;/h2&gt;
&lt;p&gt;막상 전체를 해놓고 보니, 배경은 바뀌었으나, 특히 제목(&lt;code&gt;Retirement: simulating wealth with random returns, inflation and withdrawals&lt;/code&gt;)글씨크기가 작아졌다. 또한 폰트도 바꾸고 싶은 충동이 느껴졌다. 이럴 때는, 전체 수정이 아닌 부분 수정의 개념으로 접근해서 입력해야 한다. (역시 Web Design은 힘들다!)&lt;/p&gt;
&lt;p&gt;우선 아래 두개의 소스코드를 기억해두자. 아래 소스코드를 기존의 &lt;code&gt;css&lt;/code&gt;파일과 적용하면 된다.&lt;/p&gt;
&lt;p&gt;다른 소스코드는 만지지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원 소스코드 (&lt;code&gt;ui.R&lt;/code&gt;)는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(theme&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simplex.min.css&amp;#34;&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label {font-size: 12px;}&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.recalculating {opacity: 1.0;}&amp;#34;&lt;/span&gt;
  ),

  &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retirement: simulating wealth with random returns, inflation and withdrawals&amp;#34;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;바뀐 소스코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# css 테마 적용&lt;/span&gt;
    tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;(rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;, href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slate.css&amp;#34;&lt;/span&gt;), 
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;HTML&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      @import url(&amp;#39;//fonts.googleapis.com/css?family=Lobster|Cabin:400,700&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&lt;/span&gt;)),
        tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;(type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label {font-size: 12px;}&amp;#34;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.recalculating {opacity: 1.0;}&amp;#34;&lt;/span&gt;, 
        )
    ),
    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# h1 폰트 수정하는 코드 &lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;h1&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retirement: simulating wealth with random returns, inflation and withdrawals&amp;#34;&lt;/span&gt;, 
       style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-family: &amp;#39;Lobster&amp;#39;, cursive;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        font-weight: 1000; line-height: 1.1; 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        color: 	#FFFFFF;&amp;#34;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_08/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;바뀐 폰트와 제목이 커진 것을 확인할 수 있다. 이와 같이 미세하게 적용하려면 해당 &lt;code&gt;tag&lt;/code&gt;, 이를테면, &lt;code&gt;h1&lt;/code&gt;에 적용한 예의 경우처럼 직접적으로 적용해야 한다. 다시 느끼시겠지만, shiny를 시각적으로 잘 구현하려면, &lt;code&gt;HTML&lt;/code&gt;과 &lt;code&gt;CSS&lt;/code&gt;을 잘 알고 있어야 함을 이해했을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-결론&#34;&gt;IV. 결론&lt;/h2&gt;
&lt;p&gt;지금까지 &lt;code&gt;shiny&lt;/code&gt;에 &lt;code&gt;css&lt;/code&gt;코드를 입력하는 방법을 배웠다. 어려운 내용은 아니지만, 처음에는 어떻게 적용을 해야할지 모르는 경우가 많다. 그러한 분들에게 도움이 되기를 바라며.. 특히 잊지 말아야 하는 것은 &lt;code&gt;css&lt;/code&gt; 파일을 생성 후 shiny에 적용하려면 &lt;code&gt;www&lt;/code&gt; 폴더의 위치 즉 트리구조를 지키는 것을 만드는 것을 잊지 말아야 한다.&lt;/p&gt;
&lt;h2 id=&#34;v-더-알아보기&#34;&gt;V. 더 알아보기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JQuery&lt;/code&gt;와 &lt;code&gt;JavaScript&lt;/code&gt;를 연동하는 예제는 수강생들의 개별적인 과제로 남겨두겠다. 어려운 내용은 아니지만, 역시 어떻게 적용되는지는 실제로 해봐야 안다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/53944084/shiny-with-jquery-ui&#34;&gt;JQuery 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.listendata.com/2018/12/javascript-shiny-r.html&#34;&gt;JavaScript 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;특히 &lt;code&gt;shiny&lt;/code&gt;는 다양한 &lt;code&gt;JavaScript&lt;/code&gt;를 쉽게 응용할 수 있도록 &lt;code&gt;shinyjs&lt;/code&gt;라는 패키지를 직접 만들었는데, 다양한 예제들이 있으니, 한번 확인해보면 좋다. 간단한 &lt;code&gt;JavaScript&lt;/code&gt;는 &lt;a href=&#34;https://deanattali.com/shinyjs/&#34;&gt;shinyjs&lt;/a&gt;에서 활용하라는 뜻이기도 하다.&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;김진성. (2018). 빅데이터 분석을 위한 R 프로그래밍. 서울: 가메출판사.&lt;/p&gt;
&lt;p&gt;Grolemund, Garrett. and Cheng, Joe., (2014). Style your apps with CSS Retrieved April 5, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/css.html&#34;&gt;https://shiny.rstudio.com/articles/css.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Application of CSS in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 07 - flexdashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_07/</link>
      <pubDate>Thu, 02 Apr 2020 21:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_07/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_06/&#34;&gt;shiny tutorial 06 - shinydashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-flexdashboard-패키지의-개요&#34;&gt;II. flexdashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;기존의 &lt;code&gt;shinydashboard&lt;/code&gt;와의 가장 큰 차이점은 &lt;code&gt;flexdashboard&lt;/code&gt;의 패키지는 &lt;code&gt;R Markdown&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 형식을 지원한다는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식문서에 따르면, flexdashabord는 R에서 제공하는 다양한 형태의 &lt;code&gt;htmlwidgets&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;lattice&lt;/code&gt;, &lt;code&gt;grid graphics&lt;/code&gt;, &lt;code&gt;tabular data&lt;/code&gt;, &lt;code&gt;gauges and value boxes&lt;/code&gt;, and &lt;code&gt;text annotations&lt;/code&gt; 등을 지원한다 (거의 대부분 기능을 제공한다는 뜻으로 읽힘).&lt;/li&gt;
&lt;li&gt;기존의 &lt;code&gt;shiny tutorial&lt;/code&gt;를 잘 따라해왔다면, 대부분 느끼겠지만, 대시보드의 &lt;code&gt;열&lt;/code&gt;과 &lt;code&gt;행&lt;/code&gt;을 맞추는 건 쉽지가 않다. PC환경의 대시보드 형태로 구현이 되기 때문에, 모바일로 화면 전환이 쉽지가 않은데, &lt;code&gt;flexdashboard&lt;/code&gt;는 이러한 기능도 제공한다.&lt;/li&gt;
&lt;li&gt;기본적으로 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지는 &lt;code&gt;static&lt;/code&gt;한 대시보드인데, &lt;code&gt;dynamic&lt;/code&gt;하게 앱을 작성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 설치한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;flexdashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;패키지를 설치하고 나면, [&lt;code&gt;File&lt;/code&gt;] - [&lt;code&gt;New File&lt;/code&gt;] - [&lt;code&gt;R Markdown&lt;/code&gt;] - [&lt;code&gt;From Template&lt;/code&gt;] 순서대로 클릭하면 아래와 같이 &lt;code&gt;Flex Dashboard&lt;/code&gt; 파일이 활성화 되는데, 이 파일을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;클릭과 함께 아래와 같은 형태의 코드가 준비된 것을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서 &lt;code&gt;shiny dashboard&lt;/code&gt; 형태로 구현하려면 간단하게 &lt;code&gt;runtime: shiny&lt;/code&gt;를 &lt;code&gt;YAML header&lt;/code&gt;에 추가하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Single Column (Scrolling)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;flexdashboard::flex_dashboard&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;vertical_layout&lt;/span&gt;: scroll
&lt;span style=&#34;color:#66d9ef&#34;&gt;runtime&lt;/span&gt;: shiny
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-sample&#34;&gt;(1) Sample&lt;/h2&gt;
&lt;p&gt;아래 샘플 소스코드를 작성하여 실행한다. 아래 소스 코드 실행의 주요 목적은 &lt;code&gt;R Markdown&lt;/code&gt;과 &lt;code&gt;R Shiny&lt;/code&gt;가 어떻게 조금씩 다른지 확인하는 차원의 소스 코드이다. Sample 코드는 &lt;a href=&#34;https://beta.rstudioconnect.com/jjallaire/shiny-embedding/&#34;&gt;flexdashboard: Shiny Embedding&lt;/a&gt; 에서 가져와서 응용 했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;flexdashboard: Shiny Embedding&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    vertical_layout: scroll
runtime: shiny
---

```{r global, include=FALSE}
# 데이터를 &amp;#39;global&amp;#39; chunk에 넣고, 대시보드의 모든 사용자가 데이터를 공유할 수 있도록 지원하는 소스 코드
library(datasets)
data(WorldPhones)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
Module
=======================================================================

### Embedding a Shiny Module

```{r, include=FALSE}
# Shiny module definition (would typically be defined in a separate R script)

# UI function
worldPhonesUI &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  fillCol(height = 600, flex = c(NA, 1), 
    inputPanel(
      selectInput(ns(&amp;#34;region&amp;#34;), &amp;#34;Region:&amp;#34;, choices = colnames(WorldPhones))
    ),
    plotOutput(ns(&amp;#34;phonePlot&amp;#34;), height = &amp;#34;100%&amp;#34;)
  )
}

# Server function
worldPhones &amp;lt;- function(input, output, session) {
  output$phonePlot &amp;lt;- renderPlot({
    barplot(WorldPhones[,input$region]*1000, 
            ylab = &amp;#34;Number of Telephones&amp;#34;, xlab = &amp;#34;Year&amp;#34;)
  })
}
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;

```{r}
# Include the module
worldPhonesUI(&amp;#34;phones&amp;#34;)
callModule(worldPhones, &amp;#34;phones&amp;#34;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 파일을 실행하면 아래와 같이 화면이 구성되면 완성이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 &lt;code&gt;flexdashabord&lt;/code&gt;의 구조는&lt;code&gt;R Markdown&lt;/code&gt;의 목차 및 내용을 구성하는 방식과 비슷하다. 차이점이 있다면, R chunk &lt;code&gt;{r, include=FALSE} &lt;/code&gt;안에 &lt;code&gt;shiny code&lt;/code&gt;를 진행할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;본 소스코드에서는 &lt;code&gt;Modularizing&lt;/code&gt;이 적용되었는데, 튜토리얼의 마지막 즈음에 복잡한 &lt;code&gt;shiny app&lt;/code&gt;을 만들기 위한 가이드라인의 차원에서 다루도록 한다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;이제 각각의 Layouts 대해 간단하게 설명하도록 해보자.&lt;/p&gt;
&lt;h2 id=&#34;iv-layouts&#34;&gt;IV. Layouts&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Layouts&lt;/code&gt;의 구성요소는 크게 3가지로 구분된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Orientation&lt;/code&gt;: 행과 열로 구분한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scrolling Layout&lt;/code&gt;: 만약에 차트가 많다면 한 화면에 다 넣을 수 없기 때문에 이때에는 스크롤 기능을 추가해주는 것이 좋다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tabsets&lt;/code&gt;: 강사가 제일 좋아하는 기능이다. 이유는 간단한다. 다양한 그래프와 정보를 한 화면에서 볼 수 있도록 넣을 수 있고, &lt;code&gt;Tab&lt;/code&gt; 클릭만으로 정보 제공이 가능하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;본 포스트에서는 &lt;code&gt;Tabsets&lt;/code&gt; 기준으로 작성하였는데, 이 글을 보는 사람들도 가급적 아래와 같은 형식으로 기본 &lt;code&gt;Format&lt;/code&gt;을 설정하는 것을 권유한다. 여기에서 주의해야 할 점은 어떤 시점에 &lt;code&gt;{.tabset}&lt;/code&gt;을 코드 작성 하느냐에 따라 디자인이 달라지기 때문에 수시로 확인해서 점검한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no free lunch, Open Source is free but hardworking is required. - ChloEvan -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-column&#34;&gt;(1) Column&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Column&amp;#34;
output: flexdashboard::flex_dashboard
---
    
Column 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Column {.tabset}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;실행된 화면에서 &lt;code&gt;Chart 2&lt;/code&gt;와 &lt;code&gt;Chart 3&lt;/code&gt;를 교대로 클릭하며 내용을 확인해본다. 이번에는 Rows를 기준으로 작업하는데, 사실상 달라지는 건 기존의 소스코드와 없다.&lt;/p&gt;
&lt;h2 id=&#34;2-rows&#34;&gt;(2) Rows&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)
```   
 
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;{.tabset-fade}&lt;/code&gt; 속성값은 탭이 변환될 때마다 Fade in/out 효과를 적용하여 준다. 실제로 아래와 같이 나오는지 코드 작성을 통해 확인해본다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-components&#34;&gt;V. Components&lt;/h2&gt;
&lt;p&gt;개요 페이지에서 언급했던 것처럼 &lt;code&gt;flexdashboard&lt;/code&gt;는 다양한 &lt;code&gt;Componets&lt;/code&gt;를 제공한다. &lt;code&gt;shiny&lt;/code&gt;와 &lt;code&gt;R Markdown&lt;/code&gt; 내용과 중복되는 예를 들면, &lt;code&gt;R graphics&lt;/code&gt;, &lt;code&gt;Tabular Data&lt;/code&gt; 등은 생략한다. 즉, 기존에 알고 있는 코드 문법과 차이가 없다는 뜻이기도 하다. 본 포스트에서는 &lt;code&gt;HTML Widgets&lt;/code&gt;(사실, 이것도 shiny &amp;amp; shinydashboard에서도 사용은 가능하다!) &lt;code&gt;Navigation Bar&lt;/code&gt;만 언급하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-html-widgets&#34;&gt;(1) HTML Widgets&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CRAN&lt;/code&gt;에 등록되어 있는 &lt;code&gt;30&lt;/code&gt;개 이상의 패키지는 &lt;code&gt;HTML Widgets&lt;/code&gt;을 제공한다. 즉, 이러한 &lt;code&gt;Widgets&lt;/code&gt;들은 모두 본 패키지에서 작성이 가능하다. 향후 코로나 프로젝트를 위해 지도 패키지인 &lt;code&gt;leaflets&lt;/code&gt;의 간단 예제로 간단하게 소스 코드를 구현해본다. 소스코드보다는 어떻게 대시보드화가 되는지 결과 위주로 보기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chart 2&lt;/code&gt; 섹션에 지도화면이 정상적으로 출력된다면 완성이다. &lt;code&gt;Chart 1&lt;/code&gt;에는 어떤 내용을 추가할지, &lt;code&gt;Chart 3&lt;/code&gt;에는 어떤 내용을 추가할지 보여줘야 할지 고민해야 하며, Dynamic하게 모든 차트가 동시에 적용되게 하려면, 결국엔 &lt;code&gt;데이터셋&lt;/code&gt;이 모듈화처럼 움직여야 한다 (일단, Pass!!, 본 프로젝트에 들어가면 자세히 소개하기로 한다!)&lt;/p&gt;
&lt;h2 id=&#34;2-navigation-bar&#34;&gt;(2) Navigation Bar&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Navigation Bar&lt;/code&gt;는 다중페이지가 만들어질 때 보통 사용된다. 대시 보드에 다중 페이지가 있으면 &lt;code&gt;Navigation Bar&lt;/code&gt;의 왼쪽에 다중 페이지와 링크로 연결되게 되며, 이 때에는 소셜 링크와 대시 보드의 소스 코드를 볼 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;leaflet&lt;/code&gt;을 활용하여 만들었던 기존 소스코드에 &lt;code&gt;Navigation Bar&lt;/code&gt;, &lt;code&gt;social&lt;/code&gt;, &lt;code&gt;source code&lt;/code&gt; 기능을 추가 하도록 하겠다. 어디에 어떻게 구현이 되는지 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
title: &amp;#34;name_of_your_project&amp;#34;
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    navbar:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;-&lt;/span&gt; { title: &amp;#34;About&amp;#34;, href: &amp;#34;https://chloevan.github.io/about/&amp;#34; }
    social: [ &amp;#34;twitter&amp;#34;, &amp;#34;facebook&amp;#34;, &amp;#34;menu&amp;#34;, &amp;#34;linkedin&amp;#34; ]
    source_code: embed
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
&lt;span style=&#34;color:#e6db74&#34;&gt;```
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
---
title: &amp;#34;Tabset Rows&amp;#34;
output: flexdashboard::flex_dashboard:
    orientation: rows
---
    
Row 
-------------------------------------
    
### Chart 1
    
```{r}
h1(&amp;#39;Chart 1&amp;#39;)
&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
   
Row {.tabset .tabset-fade}
-------------------------------------
   
&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
```{r}
h1(&amp;#39;Chart 2&amp;#39;)

library(leaflet)
leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  addMarkers(lng=174.768, lat=-36.852, popup=&amp;#34;The birthplace of R&amp;#34;)
```   

&lt;span style=&#34;color:#75715e&#34;&gt;### Chart 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
```{r}
h1(&amp;#39;Chart 3&amp;#39;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;우측 상단에 보면, &lt;code&gt;About&lt;/code&gt; 버튼, 각각의 &lt;code&gt;Social Network&lt;/code&gt; 기능, 특히 &lt;code&gt;Facebook&lt;/code&gt;, &lt;code&gt;Twitter&lt;/code&gt;, &lt;code&gt;Linkedin&lt;/code&gt;과 같이 대시보드를 공유할 수 있는 기능들이 있는 것을 볼 수 있다. 이러한 기능들은 현재  &lt;code&gt;Corona-19&lt;/code&gt; 대시보드와 같이 빅데이터를 활용하여 시각화로 &lt;code&gt;Insight&lt;/code&gt;를 줄 때, 매우 유용한 기능이다.&lt;/p&gt;
&lt;p&gt;마지막으로 &lt;code&gt;source code&lt;/code&gt;는 현재 보고 있는 화면에 대한 전체 &lt;code&gt;source code&lt;/code&gt;를 보여주는 기능인데, 이 부분 역시 소스코드 공유를 통해 커뮤니티에 기여하고 싶을 때 넣어주면 좋다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_07/shiny07.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;vii-shinydashboard-vs-flexdashboard의-활용에-관한-개인적인-단상&#34;&gt;VII. shinydashboard Vs. flexdashboard의 활용에 관한 개인적인 단상&lt;/h2&gt;
&lt;p&gt;각 패키지마다 장단점이 있지만, 굳이 두가지 중에서 한 패키지를 먼저 배워야 한다면 강사는 &lt;code&gt;flexdashboard&lt;/code&gt;로 우선 작업하는 것을 권유한다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;code&gt;shinydashboard Vs. flexdashboard&lt;/code&gt;에 대한 &lt;a href=&#34;https://shiny.rstudio.com/articles/dashboards.html&#34;&gt;비교 글&lt;/a&gt;에 대한 원문을 읽어보는 것을 권한다. (사실 그렇게 큰 내용은 없다.)&lt;/p&gt;
&lt;p&gt;일단 간단하게 요약하면, &lt;code&gt;shinydashboard&lt;/code&gt;는 입문자들이 접근하기에는 조금 어려운 점이 있다. 물론, 추후에 &lt;code&gt;HTML &amp;amp; CSS&lt;/code&gt;와 같은 기능에 대한 필요성이 느껴진다면, &lt;code&gt;shinydashboard&lt;/code&gt;에 자바스크립트 등 복잡성 있게 구현이 가능하겠지만.. 추천하지는 않는다 (왜 꼭 R로 그렇게 해야하는가? 복잡성 있게 구현한다면 나는 차라리 유료 BI Tool을 쓰자고 할 것 같다!) 하는 의문점이 늘 있어왔다. 다년간 R 커뮤니티를 관찰한 결과 &lt;code&gt;R&lt;/code&gt;을 활용하는 사람들의 대부분(특히 국내 R 유저의 특성상)의 사실상 프로그래밍에 익숙하지 않은 사람들이 대부분인 것을 추정하기 때문에 &lt;code&gt;R Shiny&lt;/code&gt;를 하는 사람들에게 &lt;code&gt;R Markdown&lt;/code&gt; 보고서를 빠르게 웹으로 구현하는 일련의 과정이 훨씬 빠르고 간결하기 때문에 추천한다. (지극히 개인적인 생각)&lt;/p&gt;
&lt;h2 id=&#34;viii-다루지-못한-것들&#34;&gt;VIII. 다루지 못한 것들&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;와 &lt;code&gt;flexdashboard&lt;/code&gt;에 다양한 기능들을 접해봤지만, 아직 다루지 못한 그러나 중요한 기능이 하나 있다. &lt;code&gt;Mobile&lt;/code&gt;의 접근성이다. 이 부분은 향후 프로젝트를 진행하면서 한번 짚고 넘어가도록 하겠다.&lt;/p&gt;
&lt;p&gt;이제 기본적인 이론 중 마지막 한가지가 남아있다. &lt;code&gt;shiny&lt;/code&gt;에서 &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;Javascript&lt;/code&gt; 연동이다.&lt;/p&gt;
&lt;p&gt;이제 미니 프로젝트의 시작점이 얼마 남지 않았다. 고지를 향해 조금만 더 달려가보자!&lt;/p&gt;
&lt;h2 id=&#34;ix-reference&#34;&gt;IX. Reference&lt;/h2&gt;
&lt;p&gt;flexdashboard, (2020). flexdashboard Retrieved April 2, 2020, from &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;https://rmarkdown.rstudio.com/flexdashboard/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered flexdashboard in Shiny&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ChloEvan. (2020, March 18). R Markdown Introduction. Retrieved April 2, 2020, from &lt;a href=&#34;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&#34;&gt;https://chloevan.github.io/r/rmarkdown/rmarkdownintro/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;웹개발 개발경력이 되신 분들은 shiny 홈페이지에 게재된 &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modularizing Shiny app code&lt;/a&gt;을 자세히 읽어보기를 권한다. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 06 - shinydashboard package</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_06/</link>
      <pubDate>Wed, 01 Apr 2020 17:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_06/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_05/&#34;&gt;shiny tutorial 05 - Sharing Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shinydashboard-패키지의-개요&#34;&gt;II. shinydashboard 패키지의 개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HTML content&lt;/code&gt;와 &lt;code&gt;Layouts&lt;/code&gt; 조작하는 것이 편해지면 대시보드를 만들 수 있다. 그런데, 문제는 대시보드 개발을 처음부터 하는 것과 어느정도 정해진 포맷을 활용하여 작성하는 것은 다르다. 반복해서 말하지만, 데이터분석가가 처음부터 개발해서 &lt;code&gt;사내 내부용 보고서&lt;/code&gt;를 꼭 작성해서 만들어야 하는가?하는가? 글쎄. 개인적으로 동의하기 어렵다. 핵심적인 내용의 지표만 산출 및 작성 요약하여 보고하는 것이 데이터 분석가의 기본적인 업무이자 핵심적인 업무이기 때문에, 다양한 대시보드를 빠르게 그러나 가독성있게 만드는 것이 중요하다. 어차피, 이러한 대시보드 역시, 시간이 지나면 결국엔 보는 사람만 본다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt; 패키지와 그리고 다음 장에서 설명할 &lt;code&gt;flexdashboard&lt;/code&gt; 패키지를 활용하여 대시보드를 빠르게 만들어봄으로써 shiny 개발 &amp;amp; 배포를 빠르게 반복적으로 진행하며 학습하는 것을 권한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-get-started&#34;&gt;III. Get Started&lt;/h2&gt;
&lt;p&gt;다른 R의 패키지처럼, &lt;code&gt;shinydashboard&lt;/code&gt; 패키지를 설치한다. &lt;code&gt;shiny&lt;/code&gt; 패키지가 설치가 되어 있지 않거나 &lt;code&gt;shiny Version (&amp;gt;=0.11)&lt;/code&gt;이 낮은 경우, 설치 에러가 날 수 있으니 주의 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;shinydashboard&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1-shinydashboard-구조&#34;&gt;(1) shinydashboard 구조&lt;/h2&gt;
&lt;p&gt;Shiny의 기본구조는 &lt;code&gt;ui&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt;으로 구성되어 있음을 알고 있다. shinydashboard 패키지를 사용시, 이 때의 &lt;code&gt;ui&lt;/code&gt; 문법이 조금 달라진다. 어렵지는 않다. 그냥 제공하는 함수가 다를 뿐이다.&lt;/p&gt;
&lt;p&gt;일단 간단하게 소스와 결과를 확인해 보자! 아래 소스코드를 따라하면서 연습할 때는 &lt;code&gt;app.R&lt;/code&gt; 파일을 생성한 뒤 아래 코드를 작성하도록 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;shinydashboard&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:graphics&#39;:
## 
##     box
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:3474
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardPage()&lt;/code&gt; 안에 &lt;code&gt;Header()&lt;/code&gt;, &lt;code&gt;Sidebar()&lt;/code&gt;, &lt;code&gt;Body()&lt;/code&gt;가 만들어진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;위 대시보드는 &lt;code&gt;default&lt;/code&gt;로 만들어진 것이고, 여기에서 이제 각각의 구성품을 채워넣는 작업을 할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-basic-dashboard&#34;&gt;IV. Basic Dashboard&lt;/h2&gt;
&lt;h2 id=&#34;1-dashboardheader&#34;&gt;(1) dashboardHeader()&lt;/h2&gt;
&lt;p&gt;먼저 제목부터 달아보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:4095
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;왼쪽 상단에 &lt;code&gt;첫번째 대시보드&lt;/code&gt; 글자가 보일 것이다. 만약, &lt;code&gt;dashboardHeader(disable = TRUE)&lt;/code&gt;를 하게 되면 불필요해 보이는 &lt;code&gt;header&lt;/code&gt; 공간은 사라지고 &lt;code&gt;Sidebar&lt;/code&gt;와 &lt;code&gt;Body&lt;/code&gt; 공간만 남게 된다.&lt;/p&gt;
&lt;h2 id=&#34;2-dashboardsidebar&#34;&gt;(2) dashboardSidebar()&lt;/h2&gt;
&lt;p&gt;Sidebar의 주 활용 용도는 메뉴 구성과 같은 개념으로 파악하면 좋다. 아래 소스코드를 활용해서 실습하기를 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    )
  ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;()
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { }

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7315
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dashboardSidebar()&lt;/code&gt; 안에 &lt;code&gt;sidebarMenu()&lt;/code&gt; 메뉴 구성을 만든다. 그 이후에 &lt;code&gt;menuItem()&lt;/code&gt;을 입력하는데, 다양한 &lt;code&gt;Arguments&lt;/code&gt;들이 있는 것을 확인할 수 있다. 각 &lt;code&gt;Arguments&lt;/code&gt; 사용 설명서는 &lt;code&gt;?menuItem&lt;/code&gt;를 실행한 후, 확인하는 것을 추천한다. 각각의 &lt;code&gt;Arguments&lt;/code&gt;들은 일종의 대시보드 화면을 좀 더 &lt;code&gt;Interactive&lt;/code&gt;하게 만들어주는 옵션이기 때문에, 다양한 방법으로 시도하는 것을 권유한다.&lt;/p&gt;
&lt;h2 id=&#34;3-dashboardbody&#34;&gt;(3) dashboardBody()&lt;/h2&gt;
&lt;p&gt;기존 shiny에서 작업했던 &lt;code&gt;inputId&lt;/code&gt;, &lt;code&gt;outputId&lt;/code&gt; 값이 일치한 것을 기억했으면 좋겠다. 마찬가지로 &lt;code&gt;menuItem() tabName&lt;/code&gt;값은 &lt;code&gt;Body() tabName&lt;/code&gt;값과 일치해야 한다.&lt;/p&gt;
&lt;p&gt;이유는 간단하다. &lt;code&gt;menuItem&lt;/code&gt;의 각 메뉴들을 클릭할 때마다, 다른 화면이 나타나게끔 하려고 하는 것이 &lt;code&gt;menuItem&lt;/code&gt;을 사용하는 목적이기 때문이다. 일종의 &lt;code&gt;Key&lt;/code&gt;값이라고 하면 적정한 표현일까?&lt;/p&gt;
&lt;p&gt;아래 소스를 통해서 한번 더 확인해본다. &lt;code&gt;Body&lt;/code&gt; 안에 들어가는 소스코드도 중요하지만, 여기에서는 &lt;code&gt;tabName&lt;/code&gt;을 유심히 관찰할 필요가 있다. 처음에 발생하는 에러의 대부분은 &lt;code&gt;ID&lt;/code&gt;가 일치하지 않아 발생하는 경우가 대부분이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shinydashboard)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardHeader&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;첫번째 대시보드&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardSidebar&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;# 사이드바 메뉴 구성&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarMenu&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;menuItem&lt;/span&gt;(text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯&amp;#34;&lt;/span&gt;, tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;, icon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;icon&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;))
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# sidebarMenu&lt;/span&gt;
  ), &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardSidebar&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardBody&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItems&lt;/span&gt;(
      &lt;span style=&#34;color:#75715e&#34;&gt;# First tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대시보드 탭 내용&amp;#34;&lt;/span&gt;), 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidRow&lt;/span&gt;(
          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plot1&amp;#34;&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;)),

          &lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt;(
            title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Controls&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slider&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of observations:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
          ) &lt;span style=&#34;color:#75715e&#34;&gt;# box&lt;/span&gt;
        ) &lt;span style=&#34;color:#75715e&#34;&gt;# fluidRow&lt;/span&gt;
      ), &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem(tabName = &amp;#34;dashboard&amp;#34;)&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Second tab content&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;tabItem&lt;/span&gt;(tabName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;widgets&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;위젯 탭 내용&amp;#34;&lt;/span&gt;)
      ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItem&lt;/span&gt;
    ) &lt;span style=&#34;color:#75715e&#34;&gt;# tabItems&lt;/span&gt;
  ) &lt;span style=&#34;color:#75715e&#34;&gt;# dashboardBody&lt;/span&gt;
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) { 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;set.seed&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;)
  histdata &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; histdata&lt;span style=&#34;color:#a6e22e&#34;&gt;[seq_len&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;slider)]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(data)
  })
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui, server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8129
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dashboardBody()&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItems&lt;/code&gt; &amp;ndash; &lt;code&gt;tabItem&lt;/code&gt; 순서대로 코드를 작성하는데, 가장 많이 실수하는 곳은 예상할 수 있겠지만 &lt;code&gt;tabItems&lt;/code&gt;와 &lt;code&gt;tabItem&lt;/code&gt; 오기하는 것이 많기 때문에 주의 하기 바란다.&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;대시보드 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;아래 그림은 &lt;code&gt;위젯 탭&lt;/code&gt;을 클릭했을 때 나타나는 화면이다.
&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_06/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;v-더-알아보기&#34;&gt;V. 더 알아보기&lt;/h2&gt;
&lt;p&gt;지금까지 작성한 내용은 매우 기초적인 부분에서만 접근을 한 것이기 때문에, 더 많은 기능은 직접 해봐야 알 수 있다. shinydashboard 패키지에 대한 구체적인 내용들은  &lt;a href=&#34;https://rstudio.github.io/shinydashboard/structure.html&#34;&gt;Structure&lt;/a&gt;, &lt;a href=&#34;https://rstudio.github.io/shinydashboard/appearance.html&#34;&gt;Apperance&lt;/a&gt; 등을 참조하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;vi-sample&#34;&gt;VI. Sample&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shinydashboard&lt;/code&gt;를 활용한 예제코드를 보면서 &lt;code&gt;필사&lt;/code&gt; 하는 것을 추천한다. 그리고 전반적인 과정을 이해하면, 그 후에 약간의 코드 수정으로 응용하여 배포하는 것을 권유한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/086-bus-dashboard/&#34;&gt;Twin Cities Buses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/087-crandash/&#34;&gt;crandash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinydashboard., (2020). shinydashboard. Retrieved April 1, 2020, from &lt;a href=&#34;https://rstudio.github.io/shinydashboard/index.html/&#34;&gt;https://rstudio.github.io/shinydashboard/index.html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered shinydashboard in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 05 - Sharing Apps</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_05/</link>
      <pubDate>Tue, 31 Mar 2020 01:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_05/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_04/&#34;&gt;shiny tutorial 04 - Shiny Layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-shiny-deployment의-개요&#34;&gt;II. Shiny Deployment의 개요&lt;/h2&gt;
&lt;p&gt;이 영역은 웹개발자에게는 매우 쉬운 영역일 수도 있다. 그러나, 웹 환경에 익숙하지 않은 R 유저에게는 조금 버거울 수도 있다. 2-3번 정도만 반복하면 쉽게 작업하게 될 것이고, Shiny를 클라우드 서버를 통해 배포하는 방법도 익힐 수 있다.&lt;/p&gt;
&lt;p&gt;운이 좋게도, RStudio 에서는 무료로 매우 쉽게 배포를 할 수 있도록 하고 있다. 또한 On-Premise(사내 전용) 환경에서 배포할 수 있도록 오픈 소스도 제공하고 있다. 서버는 사실 경제적 비용이 발생하기 때문에, 클라우드로 배포할지, 도커(Docker) 및 오픈소스로 구현하여 배포할지, 고민할 필요는 있다. 배포에 관한 자세한 내용은 &lt;a href=&#34;https://shiny.rstudio.com/deploy/&#34;&gt;Hosting and Deployment&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;iii-shinyappsio&#34;&gt;III. Shinyapps.io&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;에서 소개한 Sample Dashboard는 모두 &lt;code&gt;Shinyapps.io&lt;/code&gt;에서 배포를 하는 중이다. 배포 하는 과정은 어렵지 않으니 간단히 그 과정만 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;1-회원가입&#34;&gt;(1) 회원가입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shinyapps.io/admin/#/login&#34;&gt;shinyapps.io&lt;/a&gt;에서 회원가입을 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 싸이트에서 회원가입을 진행하고 RStudio로 돌아온다.&lt;/p&gt;
&lt;h2 id=&#34;2-shiny-app-실행&#34;&gt;(2) Shiny App 실행&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단한 소스코드로 ShinyApp을 실행한다.&lt;/li&gt;
&lt;li&gt;소스코드는 Shiny User Case에 있는 &lt;a href=&#34;https://shiny.rstudio.com/gallery/kmeans-example.html&#34;&gt;Iris K-Means Clustering&lt;/a&gt;에서 가져왔다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.R&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
iris &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; iris
vars &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setdiff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(iris), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Species&amp;#34;&lt;/span&gt;)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pageWithSidebar&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;headerPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Iris k-means clustering&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xcol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X Variable&amp;#39;&lt;/span&gt;, vars),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ycol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y Variable&amp;#39;&lt;/span&gt;, vars, selected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[[2]]),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clusters&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cluster count&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
    ),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plot1&amp;#39;&lt;/span&gt;)
  )
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output, session) {

  &lt;span style=&#34;color:#75715e&#34;&gt;# Combine the selected variables into a new data frame&lt;/span&gt;
  selectedData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    iris[, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;xcol, input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;ycol)]
  })

  clusters &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;kmeans&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(), input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;clusters)
  })

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;palette&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#E41A1C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#377EB8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#4DAF4A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#984EA3&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FF7F00&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFFF33&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#A65628&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#F781BF&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#999999&amp;#34;&lt;/span&gt;))

    &lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedData&lt;/span&gt;(),
         col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;cluster,
         pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clusters&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;centers, pch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
  })

}

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the application &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:8977
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shiny App&lt;/code&gt;을 실행하고 난 후에 우측 상단의 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭한다.&lt;/li&gt;
&lt;li&gt;아래 그림 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-shinyappsio-연동&#34;&gt;(3) ShinyApps.io 연동&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 아래와 같은 팝업창이 활성화 될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;다음 메뉴에서 &lt;code&gt;ShinyApps.io&lt;/code&gt; 또는 &lt;code&gt;RStudio Connect&lt;/code&gt;를 선택하라는 팝업이 활성화 될 것이다. 여기에서 &lt;code&gt;ShinyApps.io&lt;/code&gt;를 선택한다. &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;는 일종의 유료 버전이기 때문에 여기에서는 다루지 않는다. 자세히 알아보고 싶다면 &lt;a href=&#34;https://rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;마지막 하단의 이미지에서 드디어 &lt;code&gt;Token&lt;/code&gt;값을 받아야 하는데, 이 &lt;code&gt;Token&lt;/code&gt;값은 &lt;code&gt;ShinyApps.io&lt;/code&gt; 싸이트에서 확인해야 한다. 아래 팝업창을 유지한채로 웹사이트로 이동한다. 이동할 웹사이트는 친절하게 &lt;code&gt;Go to&lt;/code&gt; &lt;a href=&#34;http://www.shinyapps.io/&#34;&gt;&lt;code&gt;your account on Shiny Apps&lt;/code&gt;&lt;/a&gt;로 클릭할 수 연동되어 있으니 클릭해주면 된다. 클릭 후 우측 상단의 Dashboard 메뉴를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny04.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;이제 &lt;code&gt;Tokens&lt;/code&gt;을 찾아야 하는데, &lt;code&gt;Tokens&lt;/code&gt;는 왼쪽 메뉴에 &lt;code&gt;[Account]&lt;/code&gt;-&lt;code&gt;[Tokens]&lt;/code&gt;-&lt;code&gt;[Add Token]&lt;/code&gt;를 순서대로 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny05.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;그러면 Token &amp;amp; Secret에 값이 생성 될 것인데, 이 때 [&lt;code&gt;show&lt;/code&gt;] 버튼을 클릭하면 다음과 같은 이미지에서 [&lt;code&gt;Show Secret&lt;/code&gt;] 버튼을 클릭한 후 전체 소스코드를 복사한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_05/shiny06.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;복사한 소스코드는 &lt;code&gt;Connect ShinyApps.io Account&lt;/code&gt;에 붙여넣기 한후 &lt;code&gt;Connect Account&lt;/code&gt;를 실행한뒤 &lt;code&gt;Publish to Server&lt;/code&gt; 팝업창에서 &lt;code&gt;Publish&lt;/code&gt; 버튼을 클릭하면 연동이 완료된다. 이 때 &lt;code&gt;Shiny Project Title&lt;/code&gt;은 URL에 적용되므로 참고하기를 바란다. 강사는 &lt;code&gt;shinyProject_Test&lt;/code&gt; 이름으로 &lt;code&gt;Title&lt;/code&gt;을 적용했다.&lt;/p&gt;
&lt;p&gt;Publishing을 진행하면 Deploy창이 활성화되면서 아래와 같은 메시지가 출력이 되기 시작할 것이다. App이 무거우면 배포하는데도 시간이 소요되므로 이 부분은 참고하기를 바란다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Preparing to deploy application...DONE
Uploading bundle for application: 2027237...DONE
Deploying bundle: 2948176 for application: 2027237 ...
Waiting for task: 709961221
  building: Building image: 3271985
  building: Installing packages
  building: Installing files
  building: Pushing image: 3271985
  deploying: Starting instances
  success: Stopping old instances
Application successfully deployed to https://chloevan.shinyapps.io/shinyProject_Test/
Deployment completed: https://chloevan.shinyapps.io/shinyProject_Test/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;참고로 이왕 배포하는 시간에 대해 굳이 비교하자면, 확실히 &lt;code&gt;RStudio&lt;/code&gt;에서 배포하는 속도는 강사가 블로그를 작성하는 &lt;code&gt;go&lt;/code&gt;언어 기반으로 작성된 &lt;code&gt;hugo + github.io&lt;/code&gt;보다 속도는 체감적으로 많이 느린감이 있다.&lt;/p&gt;
&lt;h2 id=&#34;iv-배포-확인&#34;&gt;IV. 배포 확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;방금 전에 구현한 &lt;code&gt;App&lt;/code&gt;이 다음 URL에서 확인 할 수 있을 것이다.   &lt;a href=&#34;https://chloevan.shinyapps.io/shinyProject_Test/&#34;&gt;https://chloevan.shinyapps.io/shinyProject_Test/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;RStudio를 활용하면 무료로 배포를 하는데, 간단한 클릭만으로도 배포를 할 수 있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;어떤 수강생들이 이런 질문을 한적이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux에서 배포를 하고 싶어요, 클라우드에서 배포를 하고 싶어요, 도커에서 배포를 하고 싶어요,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;결론부터 말하면 모두 가능하다. Shiny를 개발단에서 확인하고 싶다면, 정식문서를 참고하기를 바란다. &lt;a href=&#34;https://docs.rstudio.com/shiny-server/&#34;&gt;공식문서: Shiny Server Professional v1.5.13 Administrator&amp;rsquo;s Guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;도커에서 배포 예제: &lt;a href=&#34;https://www.bjoern-bos.de/post/learn-how-to-dockerize-a-shinyapp-in-7-steps/&#34;&gt;Learn How to Dockerize a ShinyApp in 7 Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS 배포 예제: &lt;a href=&#34;https://abndistro.com/post/2019/07/06/deploying-a-shiny-app-with-shiny-server-on-an-aws-ec2-instance/&#34;&gt;Deploying a Shiny App with Shiny Server on an AWS EC2 Instance&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로, 강사는 GCP를 사랑한 나머지, GCP에 배포를 한적이 있다. 관련해서 배포 예제 글도 작성한 글이 있었는데, Tutorial 마지막에 정리해서 공유를 할 수 있을까? 하도록 노력하겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;shinyapps.io team., (2020, March 5). shinyapps.io user guide. Retrieved March 31, 2020, from &lt;a href=&#34;https://docs.rstudio.com/shinyapps.io/&#34;&gt;https://docs.rstudio.com/shinyapps.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Deployment in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 04 - Layouts</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_04/</link>
      <pubDate>Sun, 29 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_04/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_03/&#34;&gt;shiny tutorial 03 - HTML content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-layouts의-개요&#34;&gt;II. Layouts의 개요&lt;/h2&gt;
&lt;p&gt;이번 시간에는 &lt;code&gt;Shiny Layouts&lt;/code&gt; 개요에 대한 간략적인 소개를 하려고 한다. 영어가 편하거나 중고급 개발자 분들은 &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;Application layout guide&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;사실, 이 부분은 자세하게 다루기에는 부담이 존재한다. &lt;code&gt;Layouts&lt;/code&gt;에 대한 디자인은 굉장히 주관적일 뿐더러, 처음부터 만들어가려면 그만큼 시간도 오래 걸리기 때문이다. 우리가 잊지말아야 하는 것 중의 하나는 &lt;code&gt;Data Scientist&lt;/code&gt;는 &lt;code&gt;Web Developer&lt;/code&gt;는 아니다. 기존의 &lt;code&gt;Web Developer&lt;/code&gt;보다 대시보드를 시각적으로 더 잘 만들수는 없다. 그러나, 어떤 수집딘 데이터에서 어떤 &lt;code&gt;Insight&lt;/code&gt;를 클라이언트에게 전달하지는 &lt;code&gt;Web Developer&lt;/code&gt;보다는 더 나은 포지션에 있다.&lt;/p&gt;
&lt;p&gt;따라서, &lt;code&gt;Layout&lt;/code&gt;의 큰 개념만 잡는다면 다음부터는 &lt;code&gt;R&lt;/code&gt;에서 제공하는 주요 &lt;code&gt;Dashboard&lt;/code&gt; 패키지를 사용하는 것을 적극 권장한다.&lt;/p&gt;
&lt;h2 id=&#34;iii-main-functions&#34;&gt;III. Main Functions&lt;/h2&gt;
&lt;h2 id=&#34;예시-1-sidebar-layout&#34;&gt;예시 1. Sidebar Layout&lt;/h2&gt;
&lt;p&gt;이러한 &lt;code&gt;Layout&lt;/code&gt;은 보통 화면 왼쪽에는 (단, Mobile 화면 위쪽) &lt;code&gt;input&lt;/code&gt;에 관한 기능이 나온다면, 화면 오른쪽에는 &lt;code&gt;input&lt;/code&gt;에 따라 결과값이 나타나는 &lt;code&gt;output&lt;/code&gt;의 그래프, 표 등이 출력된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 패키지&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# ui 정의&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sidebar Layout 예시&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#75715e&#34;&gt;# 제목 Panel&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(
        inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;샘플사이즈&amp;#34;&lt;/span&gt;,
        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
      )
    ),

    &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hist&amp;#34;&lt;/span&gt;)
    )
  )
)

&lt;span style=&#34;color:#75715e&#34;&gt;# server 정의&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# output will be displayed&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;n))
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shinyApp 실행&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:6286
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;예시-2-grid-layout&#34;&gt;예시 2. Grid Layout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sidebarLayout()&lt;/code&gt;은 가장 낮은 수준의 grid layout을 제공하고 있는데, 본 예시에서는 조금 더 구체적으로 &lt;code&gt;Grid Layout&lt;/code&gt;을 지정하도록 한다. 여기서 알아두어야 할 핵심 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fluidRow()&lt;/code&gt;: 행과 관련이 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column()&lt;/code&gt;: 열과 관련이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Column의 너비는 은 &lt;a href=&#34;https://getbootstrap.com/docs/4.0/layout/grid/&#34;&gt;Bootstrp 12-wide grid system&lt;/a&gt;에 기초하며, 하나의 &lt;code&gt;fluidRow()&lt;/code&gt;안에는 12개의 &lt;code&gt;column()&lt;/code&gt;이 존재한다. (다시한번 느끼지만, Shiny를 잘할려면 HTML/CSS/JS를 잘해야 한다!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)

dataset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; diamonds

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;다이아몬드 데이터 탐색&amp;#34;&lt;/span&gt;,
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plot&amp;#39;&lt;/span&gt;),
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;hr&lt;/span&gt;(),

  &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidRow&lt;/span&gt;(
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;h4&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;다이아몬드 데이터 탐색&amp;#34;&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sampleSize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sample Size&amp;#39;&lt;/span&gt;, 
                  min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(dataset), value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(dataset)), 
                  step&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, round&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;br&lt;/span&gt;(),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;checkboxInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jitter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jitter&amp;#39;&lt;/span&gt;),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;checkboxInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smooth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Smooth&amp;#39;&lt;/span&gt;)
    ),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset), &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)[[2]]),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)))
    ),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;column&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;facet_row&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Facet Row&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(None&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset))),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;selectInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;facet_col&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Facet Column&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(None&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(dataset)))
    )
  )
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output){    

  dataset &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reactive&lt;/span&gt;({
    diamonds&lt;span style=&#34;color:#a6e22e&#34;&gt;[sample&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(diamonds), input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;sampleSize),]
  })

  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    
    p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dataset&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;()
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color)
    
    facets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;facet_row, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;, input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;facet_col)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(facets &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. ~ .&amp;#39;&lt;/span&gt;)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;facet_grid&lt;/span&gt;(facets)
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;jitter)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_jitter&lt;/span&gt;()
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;smooth)
      p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_smooth&lt;/span&gt;()
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(p)
    
  }, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:4447
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;예시-3-navbar-pages&#34;&gt;예시 3. Navbar Pages&lt;/h2&gt;
&lt;p&gt;일반적인 웹사이트 메뉴 구성도와 큰 차이가 없다. 메뉴를 구성하는데, Top 메뉴와 Secondary Navigation까지 지원이 가능하다.&lt;/p&gt;
&lt;p&gt;이 기능을 구현할 때는 사실상의 &lt;code&gt;Shiny Project&lt;/code&gt; 단계로 진입하기 때문에, 이 때에는 메뉴 구성도와 같은 &lt;code&gt;웹사이트 개발 지식&lt;/code&gt;이 수반되어야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;navbarPage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Application&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Component 1&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Component 2&amp;#34;&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;navbarMenu&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub-Component A&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tabPanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sub-Component B&amp;#34;&lt;/span&gt;))
)

server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7782
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_04/shiny03.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;지금까지 &lt;code&gt;Layouts&lt;/code&gt;의 기본 개요와 함께 주요 &lt;code&gt;Functions&lt;/code&gt;에 대해 간단하게 학습하는 시간을 가졌다. 여기에서는 &lt;code&gt;Layouts&lt;/code&gt;의 기본 개념만 알고 있으면 추후에 &lt;code&gt;Shiny&lt;/code&gt; 대시보드 디자인을 할 때, 보다 쉽게 구현이 가능하다.&lt;/p&gt;
&lt;p&gt;특히, Grid System에 대한 개념이 매우 중요하므로 &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;Application layout guide&lt;/a&gt;에서 추가 학습을 진행하는 것을 권장한다.&lt;/p&gt;
&lt;p&gt;다음 시간에는 Shiny App의 배포에 대해 작성하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Allaire. (2014, January 24). Application layout guide. Retrieved March 30, 2020, from &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;https://shiny.rstudio.com/articles/layout-guide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Layouts in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 03 - HTML content</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_03/</link>
      <pubDate>Fri, 27 Mar 2020 23:50:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_03/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-이전-글-소개&#34;&gt;I. 이전 글 소개&lt;/h2&gt;
&lt;p&gt;처음 shiny를 접하거나 shiny의 전체 튜토리얼이 궁금한 사람들을 위해 이전 글을 소개한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_02/&#34;&gt;shiny tutorial 02 - Shiny Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii-html-content-개요&#34;&gt;II. HTML Content 개요&lt;/h2&gt;
&lt;p&gt;이번 시간에는 HTML Content 개요에 대한 간략적인 소개를 하려고 한다. 영어가 편하거나 중고급 개발자 분들은 &lt;a href=&#34;https://shiny.rstudio.com/articles/html-tags.html&#34;&gt;Customize your UI with HTML&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;텍스트 및 이미지와 같은 HTML 콘텐츠를 사용하여 Shiny 앱의 모양을 사용자 지정할 수 있다. HTML은 다양한 태그의 조합으로 UI를 꾸미는 역할을 하며, Shiny의 문법역시 HTML 태그와 거의 유사하다. 예를 들면 아래와 같다. (Shiny: HTML)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;h1(): &lt;!-- raw HTML omitted --&gt; first level header,&lt;/li&gt;
&lt;li&gt;strong(): &lt;!-- raw HTML omitted --&gt; 글씨 굵게,&lt;/li&gt;
&lt;li&gt;em(): &lt;!-- raw HTML omitted --&gt; 글씨 이탤릭체,&lt;/li&gt;
&lt;li&gt;a(): &lt;!-- raw HTML omitted --&gt; web 페이지 연결,&lt;/li&gt;
&lt;li&gt;img(): &lt;!-- raw HTML omitted --&gt; 이미지 삽입,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shiny는 굉장히 HTML 지향적으로 구성되어 있다. 만약 더 많은 태그가 궁금한 사람들은 아래에서 다음과 같이 소스코드를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(tags)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;a&amp;quot;           &amp;quot;abbr&amp;quot;        &amp;quot;address&amp;quot;     &amp;quot;area&amp;quot;        &amp;quot;article&amp;quot;    
##   [6] &amp;quot;aside&amp;quot;       &amp;quot;audio&amp;quot;       &amp;quot;b&amp;quot;           &amp;quot;base&amp;quot;        &amp;quot;bdi&amp;quot;        
##  [11] &amp;quot;bdo&amp;quot;         &amp;quot;blockquote&amp;quot;  &amp;quot;body&amp;quot;        &amp;quot;br&amp;quot;          &amp;quot;button&amp;quot;     
##  [16] &amp;quot;canvas&amp;quot;      &amp;quot;caption&amp;quot;     &amp;quot;cite&amp;quot;        &amp;quot;code&amp;quot;        &amp;quot;col&amp;quot;        
##  [21] &amp;quot;colgroup&amp;quot;    &amp;quot;command&amp;quot;     &amp;quot;data&amp;quot;        &amp;quot;datalist&amp;quot;    &amp;quot;dd&amp;quot;         
##  [26] &amp;quot;del&amp;quot;         &amp;quot;details&amp;quot;     &amp;quot;dfn&amp;quot;         &amp;quot;dialog&amp;quot;      &amp;quot;div&amp;quot;        
##  [31] &amp;quot;dl&amp;quot;          &amp;quot;dt&amp;quot;          &amp;quot;em&amp;quot;          &amp;quot;embed&amp;quot;       &amp;quot;eventsource&amp;quot;
##  [36] &amp;quot;fieldset&amp;quot;    &amp;quot;figcaption&amp;quot;  &amp;quot;figure&amp;quot;      &amp;quot;footer&amp;quot;      &amp;quot;form&amp;quot;       
##  [41] &amp;quot;h1&amp;quot;          &amp;quot;h2&amp;quot;          &amp;quot;h3&amp;quot;          &amp;quot;h4&amp;quot;          &amp;quot;h5&amp;quot;         
##  [46] &amp;quot;h6&amp;quot;          &amp;quot;head&amp;quot;        &amp;quot;header&amp;quot;      &amp;quot;hgroup&amp;quot;      &amp;quot;hr&amp;quot;         
##  [51] &amp;quot;html&amp;quot;        &amp;quot;i&amp;quot;           &amp;quot;iframe&amp;quot;      &amp;quot;img&amp;quot;         &amp;quot;input&amp;quot;      
##  [56] &amp;quot;ins&amp;quot;         &amp;quot;kbd&amp;quot;         &amp;quot;keygen&amp;quot;      &amp;quot;label&amp;quot;       &amp;quot;legend&amp;quot;     
##  [61] &amp;quot;li&amp;quot;          &amp;quot;link&amp;quot;        &amp;quot;main&amp;quot;        &amp;quot;mark&amp;quot;        &amp;quot;map&amp;quot;        
##  [66] &amp;quot;menu&amp;quot;        &amp;quot;meta&amp;quot;        &amp;quot;meter&amp;quot;       &amp;quot;nav&amp;quot;         &amp;quot;noscript&amp;quot;   
##  [71] &amp;quot;object&amp;quot;      &amp;quot;ol&amp;quot;          &amp;quot;optgroup&amp;quot;    &amp;quot;option&amp;quot;      &amp;quot;output&amp;quot;     
##  [76] &amp;quot;p&amp;quot;           &amp;quot;param&amp;quot;       &amp;quot;picture&amp;quot;     &amp;quot;pre&amp;quot;         &amp;quot;progress&amp;quot;   
##  [81] &amp;quot;q&amp;quot;           &amp;quot;rp&amp;quot;          &amp;quot;rt&amp;quot;          &amp;quot;ruby&amp;quot;        &amp;quot;s&amp;quot;          
##  [86] &amp;quot;samp&amp;quot;        &amp;quot;script&amp;quot;      &amp;quot;section&amp;quot;     &amp;quot;select&amp;quot;      &amp;quot;small&amp;quot;      
##  [91] &amp;quot;source&amp;quot;      &amp;quot;span&amp;quot;        &amp;quot;strong&amp;quot;      &amp;quot;style&amp;quot;       &amp;quot;sub&amp;quot;        
##  [96] &amp;quot;summary&amp;quot;     &amp;quot;sup&amp;quot;         &amp;quot;table&amp;quot;       &amp;quot;tbody&amp;quot;       &amp;quot;td&amp;quot;         
## [101] &amp;quot;template&amp;quot;    &amp;quot;textarea&amp;quot;    &amp;quot;tfoot&amp;quot;       &amp;quot;th&amp;quot;          &amp;quot;thead&amp;quot;      
## [106] &amp;quot;time&amp;quot;        &amp;quot;title&amp;quot;       &amp;quot;tr&amp;quot;          &amp;quot;track&amp;quot;       &amp;quot;u&amp;quot;          
## [111] &amp;quot;ul&amp;quot;          &amp;quot;var&amp;quot;         &amp;quot;video&amp;quot;       &amp;quot;wbr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;names(tags)&lt;/code&gt;는 총 114개의 함수로 구성되어 있고, 이 숫자 역시 shiny 패키지가 업데이트 될수록 함수가 늘어나는 양상을 띄고 있다. (예: Shiny 홈페이지에는 110개의 함수만 소개됨)&lt;/p&gt;
&lt;h2 id=&#34;iii-shiny-안에-tag-생성&#34;&gt;III. Shiny 안에 Tag 생성&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ui&lt;/code&gt; 내부에 별도로 &lt;code&gt;HTML tag&lt;/code&gt;를 생성하고 싶다면 아래와 같이 &lt;code&gt;tags&lt;/code&gt;를 활용하여 HTML 태그를 생성하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;예시-1-h1-tag&#34;&gt;예시 1. &lt;code&gt;h1 tag&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h1&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h1 tag&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;h1&amp;gt;h1 tag&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-2-div-tag-속성값-입력&#34;&gt;예시 2. &lt;code&gt;div tag 속성값 입력&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-3-div-태그-안에-p-태그-넣기&#34;&gt;예시 3. &lt;code&gt;div&lt;/code&gt; 태그 안에 &lt;code&gt;p&lt;/code&gt; 태그 넣기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;, checked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;p&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-4-div-태그-안에-p--a-태그-같이-넣기&#34;&gt;예시 4. &lt;code&gt;div&lt;/code&gt; 태그 안에 &lt;code&gt;p&lt;/code&gt; &amp;amp; &lt;code&gt;a&lt;/code&gt; 태그 같이 넣기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;, checked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
  tags&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;(href &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Do it. Click Here!&amp;#34;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;a href=&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&amp;gt;Let&amp;#39;s Do it. # Click Here!&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;예시-5-withtags-활용법&#34;&gt;예시 5. withTags 활용법&lt;/h2&gt;
&lt;p&gt;HTML tags를 활용하려면 지속적으로 &lt;code&gt;tags&lt;/code&gt;를 입력해야 하는 불편함이 있다. 그런데, &lt;code&gt;withTags&lt;/code&gt;를 활용하면 &lt;code&gt;tags&lt;/code&gt;를 중복적으로 사용하지 않아도 되는 장점이 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withTags&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;(class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;, checked&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is Shiny Tutorial easy to learn? If so&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;(href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Do it. Click Here!&amp;#34;&lt;/span&gt;)
  )
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;div class=&amp;#34;header&amp;#34; checked&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;lt;p&amp;gt;Is Shiny Tutorial easy to learn? If so&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;a href=&amp;#34;shiny.rstudio.com/tutorial&amp;#34;&amp;gt;Let&amp;#39;s Do it.  Click Here!&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;웹프로그래머에게는 사실 매우 간단한 작업일 수도 있지만, Web 환경에 익숙하지 않은 데이터 분석가에게는 조금은 어려울 수 있다. 그러나, 오픈소스로 대시보드를 작업해야 한다면, HTML은 매우 중요한 작업이 될 가능성이 크다. 시각적으로 좋은 디자인일 수록, 가독성이 높은 대시보드일수록 클라이언트 또는 상급자가 쉽게 의사결정을 할 수 있도록 도와줄 수 있기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;iv-reference&#34;&gt;IV. Reference&lt;/h2&gt;
&lt;p&gt;Grolemund, G., Cheng, J., &amp;amp; Cetinkaya-Rundel, M. (2017, August 9). Customize your UI with HTML. Retrieved from &lt;a href=&#34;https://shiny.rstudio.com/articles/html-tags.html&#34;&gt;https://shiny.rstudio.com/articles/html-tags.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered HTML content in Shiny&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 02 - Shiny Structure</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_02/</link>
      <pubDate>Sun, 22 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_02/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-소개&#34;&gt;I. Shiny 소개&lt;/h2&gt;
&lt;p&gt;지난시간에 Shiny에 관한 대략적인 소개를 했다. 처음 이 페이지를 방문한 사람들 위해 &lt;a href=&#34;https://chloevan.github.io/r/shiny/tutorial_01/&#34;&gt;shiny tutorial 01 - get started&lt;/a&gt; 에서 짧게 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-shiny-app-structure&#34;&gt;II. Shiny App Structure&lt;/h2&gt;
&lt;p&gt;아래 샘플 코드를 확인하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# load the shiny package&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# 화면 구성 (UI) - 프론트엔드&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample size&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hist&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# 서버 구성 - 벡엔드&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;n))
 
    &lt;span style=&#34;color:#75715e&#34;&gt;# 결과물을 만들어내는 코드 작성&lt;/span&gt;
    
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shiny app 호출&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 프로젝트 진행 시, 폴더 안에&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 파일명은 app.R 형태로 저장한다. &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:7908
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_02/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;의 기본 구조는 &lt;code&gt;UI&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt; 형태로 구성이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UI&lt;/code&gt;: 사용자 인터페이스, 즉 화면단을 만드는 작업을 진행한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Server&lt;/code&gt;: 사용자 인터페이스가 제대로 기능할 수 있도록 지원하며, &lt;code&gt;Server&lt;/code&gt;단에서, 데이터 전처리, 수집, 시각화 작업이 이루어진다. 즉, 이 때에는 R의 문법이 사용되는 것이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shinyApp&lt;/code&gt;: &lt;code&gt;UI&lt;/code&gt;와 &lt;code&gt;Server&lt;/code&gt;객체별로 저장이 되면, &lt;code&gt;shinyApp&lt;/code&gt;을 통해 호출하면서 실행이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 App이 복잡하면 복잡해질 수록 &lt;code&gt;UI&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;shinyApp&lt;/code&gt;의 파일로 재구현되어 관리가 될 수 있으며, &lt;code&gt;Modularizing&lt;/code&gt;의 개념도 함께 들어간다. 즉, 이 때부터는 웹개발 로직의 형태와 비슷하게 전개되는데, 이제 프로그래밍에 입문하는 사람들을 위해서는 추천하지 않는다. &lt;code&gt;Shiny&lt;/code&gt;를 추천하는 이유는 빠른 프로토타입이 가능해서이기 때문에, 가급적 이 원칙을 지켰으면 좋겠다. 냉정하게 말하면 복잡해질 것 같으면, 여기서부터는 고민해야 한다. BI Tool을 쓸것인가? 아니면 프론트개발자와 협업을 할 것인가?&lt;/p&gt;
&lt;p&gt;만약, 조금 더 복잡한 &lt;code&gt;ShinyApp&lt;/code&gt;을 개발하고 싶다면, 아래 글에서 추가적인 개념을 익혔으면 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modularizing Shiny app code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardata.fr/en/post/2019/02/11/why-using-modules/&#34;&gt;Shiny Modules (part 1) : Why using modules?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다시 추가로 말하자면, 여기서부터는 &lt;code&gt;데이터분석가(Data Analyst)&lt;/code&gt;의 역량보다는 &lt;code&gt;프론트엔드 개발자(Front-End Developer)&lt;/code&gt;의 역량의 성격이 훨씬 더 짙어진다. 이 부분은 꼭 참고하기를 바란다.&lt;/p&gt;
&lt;h3 id=&#34;1-ui-또는-uir&#34;&gt;(1) ui 또는 ui.R&lt;/h3&gt;
&lt;p&gt;사용자에게 보여주는 화면을 만들어주는 역할을 하며, 보통 &lt;code&gt;Input &amp;amp; Output&lt;/code&gt; function으로 통용된다. 대표적인 함수는 아래와 같다.&lt;/p&gt;
&lt;p&gt;대표적인 &lt;code&gt;Input&lt;/code&gt; 관련 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textInput()&lt;/code&gt;: 사용자가 텍스트를 입력할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dateRangeInput()&lt;/code&gt;: 사용자가 날짜 등을 입력할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileInput()&lt;/code&gt;: 사용자가 csv파일 등을 입력할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대표적인 &lt;code&gt;Output&lt;/code&gt; 관련 함수는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textOutput()&lt;/code&gt; : 입력한 텍스트가 출력된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tableOutput()&lt;/code&gt;: 데이터프레임 등이 출력된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imageOutput()&lt;/code&gt;: 이미지 등이 출력된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;조금 더 자세한 내용이 함수가 궁금하다면, 강사의 강의안을 참조하거나 또는 &lt;a href=&#34;https://shiny.rstudio.com/images/shiny-cheatsheet.pdf&#34;&gt;Shiny Cheet Sheet&lt;/a&gt;에서 확인하기를 바란다. 마지막으로 전체 함수가 궁금한 수강생들은 &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/1.0.5/&#34;&gt;Function Reference&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;p&gt;이 때 중요한 것은 각 함수 안에서 &lt;code&gt;inputId=your_inputId&lt;/code&gt; 또는 &lt;code&gt;outputId=your_outputId&lt;/code&gt;가 중요하다. 각각의 ID명을 매개로 Server단과 연결이 되기 때문이다. 초반에 많은 에러들은 사실 여기에서 발생이 된다.&lt;/p&gt;
&lt;p&gt;아래 샘플 코드를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ui &amp;lt;- fluidPage(
  Input(inputId = myinput, label = mylabel, ...)
  Output(outputId = myoutput, ...)
)

server &amp;lt;- function(input, output){
  output$myoutput &amp;lt;- render*({
    # code to build the output.
    # If it uses an input value (input$myinput),
    # the output will be rebuilt whenever
    # the input value changes
  })}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ui.R&lt;/code&gt;에 있는 &lt;code&gt;output&lt;/code&gt;의 &lt;code&gt;ID&lt;/code&gt;명과, &lt;code&gt;input&lt;/code&gt;의 &lt;code&gt;ID&lt;/code&gt;명이 &lt;code&gt;server.R&lt;/code&gt;의 그것과 동일해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;2-server-또는-serverr&#34;&gt;(2) server 또는 server.R&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ui&lt;/code&gt;에서 파라미터(&lt;code&gt;ex: outputId&lt;/code&gt;) 형태로 값이 넘어오면 파라미터를 받아서 처리하고 결과를 보여준다. &lt;code&gt;UI&lt;/code&gt;에 있는 &lt;code&gt;output()&lt;/code&gt;함수들의 각각의 구성요소는 &lt;code&gt;server&lt;/code&gt;에서 &lt;code&gt;render*()&lt;/code&gt; 함수와 연결이 된다. 예를 들면 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output$hist &amp;lt;- renderPlot({ 
    hist(rnorm(input$myinput)) 
  })
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;renderPlot()&lt;/code&gt;: 그래프 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderText()&lt;/code&gt;: 텍스트 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderTable()&lt;/code&gt;: 테이블 작성 결과를 출력하는 함수다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단하게 ui와 server 관계를 정리하면 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ui()&lt;/code&gt; 에서는 &lt;code&gt;plotOutput(outputId = &amp;quot;myoutput&amp;quot;)&lt;/code&gt;, &lt;code&gt;server()&lt;/code&gt;에서는 &lt;code&gt;output$myoutput &amp;lt;- renderPlot({...})&lt;/code&gt; 정리될 수 있고, 이 때 두 객체를 연결하는 인자는 &lt;code&gt;ouputId&lt;/code&gt;인 &lt;code&gt;myouput&lt;/code&gt;이다.&lt;/p&gt;
&lt;h2 id=&#34;samples&#34;&gt;Samples&lt;/h2&gt;
&lt;p&gt;매우 간단한 소스코드를 입력하면서 &lt;code&gt;ui&lt;/code&gt;와 &lt;code&gt;server&lt;/code&gt;가 서로 어떻게 연동이 되는지 확인한다. 다만 이 때에는 &lt;code&gt;numericInput&lt;/code&gt;의 &lt;code&gt;label&lt;/code&gt;을 영어가 아닌 한글로 &lt;code&gt;샘플수&lt;/code&gt;라 명명했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 패키지 로드&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# ui 디자인&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(
  &lt;span style=&#34;color:#a6e22e&#34;&gt;numericInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myNumber&amp;#34;&lt;/span&gt;, label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;샘플수&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;),
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(outputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myHist&amp;#34;&lt;/span&gt;)
)

&lt;span style=&#34;color:#75715e&#34;&gt;# 서버 개발&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# myHist와 myNumber를 꼭 확인한다. &lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {
  output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;myHist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;myNumber))
  })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# shinyApp에서 ui와 server를 호출한다. &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:6753
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_02/shiny02.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You Mastered Shiny Structure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shiny tutorial 01 - get started</title>
      <link>https://chloevan.github.io/r/shiny/tutorial_01/</link>
      <pubDate>Sat, 21 Mar 2020 12:33:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/shiny/tutorial_01/</guid>
      <description>&lt;h2 id=&#34;공지&#34;&gt;공지&lt;/h2&gt;
&lt;p&gt;이번에 준비한 튜토리얼은 제 강의를 듣는 과거-현재-미래 수강생분들을 위해 준비한 자료이다. 많은 도움이 되기를 바란다&lt;/p&gt;
&lt;p&gt;이번에 준비한 Tutorial 코로나 세계현황을 &lt;code&gt;Shiny Dashboard&lt;/code&gt;로 만들어 가는 과정을 담았다.&lt;/p&gt;
&lt;h2 id=&#34;i-shiny-소개&#34;&gt;I. Shiny 소개&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;는 &lt;code&gt;R&lt;/code&gt;에서 제공하는 일종의 &lt;code&gt;Web Framework&lt;/code&gt;이다. 기존 웹사이트와 다르게, 주요 목적은 데이터를 활용해서 대시보드를 만드는 것에 초점이 맞춰져 있다.&lt;/p&gt;
&lt;p&gt;가장 큰 장점은 &lt;code&gt;무료&lt;/code&gt;로 &lt;code&gt;빠른 프로토타입&lt;/code&gt;을 만들 수 있고, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;,  &lt;code&gt;Javascript&lt;/code&gt;와 직접적으로 호환이 되기 때문에 무한한 &lt;code&gt;확장성&lt;/code&gt;이 있다. 바로 중급 레벨에서 배우고 싶으시다면 &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;Intermediate Level&lt;/a&gt;을 클릭한다.&lt;/p&gt;
&lt;h2 id=&#34;1-유로-시각화-tool과-비교&#34;&gt;(1) 유로 시각화 Tool과 비교&lt;/h2&gt;
&lt;p&gt;기존에 시각화 Tool과 비교하는 가장 빠른 방법은 show room을 비교하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.powerbi.com/t5/Data-Stories-Gallery/bd-p/DataStoriesGallery&#34;&gt;Power BI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://public.tableau.com/en-us/gallery/?tab=viz-of-the-day&amp;amp;type=viz-of-the-day&#34;&gt;Tableau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/gallery/#user-showcase&#34;&gt;Shiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 차이는 있지만, &lt;code&gt;Shiny&lt;/code&gt;는 무료로 제작할 수가 있다. &lt;code&gt;Shiny&lt;/code&gt;는 꼭 알아두면 좋고, &lt;code&gt;Power BI&lt;/code&gt;와 &lt;code&gt;Tableau&lt;/code&gt;는 회사에서 도입하는 시스템을 따라가면 좋다. 참고로 강사가 사용했던 BI Tool은 &lt;code&gt;Power BI&lt;/code&gt;, &lt;code&gt;Google Data Studio&lt;/code&gt;가 있다. 그래도 &lt;code&gt;Shiny&lt;/code&gt;가 좋은 이유는 &lt;code&gt;HTML &amp;amp; CSS&lt;/code&gt;로 조금 더 미세한 작업을 가미할 수 있다는 점, 그리고 내가 원하는 그래프를 만들 수 있다는 점. 연구자 또는 개발자의 자유도가 높은 것이 &lt;code&gt;Shiny&lt;/code&gt;의 가장 큰 장점이다.&lt;/p&gt;
&lt;h2 id=&#34;2-어떤-역량을-키워야-할까&#34;&gt;(2) 어떤 역량을 키워야 할까?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Shiny&lt;/code&gt;를 잘할려면 R은 기본이지만, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, 그리고 &lt;code&gt;JavaScript&lt;/code&gt;를 더 공부를 많이 해야 한다. 기존에 &lt;code&gt;Front-End&lt;/code&gt; 개발자라면, &lt;code&gt;R&lt;/code&gt;을 배워두면 데이터쪽 관련 일도 겸업할 수 있을 것 같다. 데이터 분석의 마지막은 결국엔 대시보드 개발과 연관이 깊다.&lt;/p&gt;
&lt;h2 id=&#34;3-sample-dashboard&#34;&gt;(3) Sample Dashboard&lt;/h2&gt;
&lt;p&gt;간단하게 &lt;code&gt;Shiny Sample&lt;/code&gt;을 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/source/&#34;&gt;Movie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.shinyapps.io/corona_19/&#34;&gt;코로나&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-어떤-툴을-사용해야-할까&#34;&gt;(4) 어떤 툴을 사용해야 할까?&lt;/h2&gt;
&lt;p&gt;사실 답하기 어렵다. 회사에 처한 환경과 본인이 속한 팀에 따라 Tool의 사용법과 의도가 달라지기 때문이다.&lt;/p&gt;
&lt;p&gt;그러나, 객관적으로 볼 때, &lt;code&gt;Power BI&lt;/code&gt;와 같은 Tool을 사용할 때는 한번 만들어진 대시보드를 지속적으로 사용하거나, 또한 주 사용자들이 프로그래밍에 익숙하지 않은 분들이 많은데, 회사의 자원이 넉넉한 대기업 또는 유니콘 같은 기업의 경우 비용을 들이더라도 &lt;code&gt;Power BI&lt;/code&gt; 툴을 사용하는 것이 좋다.&lt;/p&gt;
&lt;p&gt;반대로, &lt;code&gt;Shiny&lt;/code&gt;와 같은 오픈소스를 사용하려면 중소기업 또는 스타트업인데 데이터의 접근성이 보다 쉬운 경우 간단한 프로토타입 제작 및 저 비용으로 최고의 성과를 올릴 수 있는 장점이 있다. 여기에서 업무성과가 지속적으로 나오고 &lt;code&gt;데이터 대시보드 개발 및 활용&lt;/code&gt;의  사내 분위기가 꾸준하게 조성이 되면  &lt;code&gt;Shiny Enterprise&lt;/code&gt; 또는 &lt;code&gt;Power BI&lt;/code&gt; 같은 유료 툴로 전환하는 것이다.&lt;/p&gt;
&lt;p&gt;Power BI Vs. R Shiny의 관점보다는 결국 &amp;lsquo;어떻게 대시보드를 활용할 것인가?&amp;lsquo;라는 기본적인 전제가 마련이 되면 무엇을 사용하더라도 조직의 성과에 기여할 것은 자명하다.&lt;/p&gt;
&lt;h2 id=&#34;ii-get-started&#34;&gt;II. Get Started&lt;/h2&gt;
&lt;p&gt;Shiny 프로젝트를 시작하는 것은 간단하다.&lt;/p&gt;
&lt;p&gt;[File] - [New Directory] - [Shiny Web Application] - [Working Directory] 순서대로 작업하면 된다.&lt;/p&gt;
&lt;p&gt;그러면 아래와 같은 폴더 구조(tree)가 되어 있을 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── app.R
└── test.Rproj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;app.R&lt;/code&gt; 파일을 열면 아래와 같은 Sample 소스코드가 있을 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is a Shiny web application. You can run the application by clicking&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the &amp;#39;Run App&amp;#39; button above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Find out more about building applications with Shiny here:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    http://shiny.rstudio.com/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define UI for application that draws a histogram&lt;/span&gt;
ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fluidPage&lt;/span&gt;(

    &lt;span style=&#34;color:#75715e&#34;&gt;# Application title&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;titlePanel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Old Faithful Geyser Data&amp;#34;&lt;/span&gt;),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidebar with a slider input for number of bins &lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarLayout&lt;/span&gt;(
        &lt;span style=&#34;color:#a6e22e&#34;&gt;sidebarPanel&lt;/span&gt;(
            &lt;span style=&#34;color:#a6e22e&#34;&gt;sliderInput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bins&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of bins:&amp;#34;&lt;/span&gt;,
                        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        ),

        &lt;span style=&#34;color:#75715e&#34;&gt;# Show a plot of the generated distribution&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mainPanel&lt;/span&gt;(
           &lt;span style=&#34;color:#a6e22e&#34;&gt;plotOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;distPlot&amp;#34;&lt;/span&gt;)
        )
    )
)

&lt;span style=&#34;color:#75715e&#34;&gt;# Define server logic required to draw a histogram&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(input, output) {

    output&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;distPlot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderPlot&lt;/span&gt;({
        &lt;span style=&#34;color:#75715e&#34;&gt;# generate bins based on input$bins from ui.R&lt;/span&gt;
        x    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; faithful[, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(x), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x), length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# draw the histogram with the specified number of bins&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;hist&lt;/span&gt;(x, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bins, col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;darkgray&amp;#39;&lt;/span&gt;, border &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;)
    })
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Run the application &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;shinyApp&lt;/span&gt;(ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui, server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## 
## Listening on http://127.0.0.1:3205
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;전체 소스코드를 실행하면 아래와 같은 이미지 형태의 그래프가 나오면 이제 여러분들도 Shiny App을 만든 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/shiny/tutorial_01/shiny01.png&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Congratulation!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R Markdown Introduction</title>
      <link>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</link>
      <pubDate>Wed, 18 Mar 2020 13:10:39 +0900</pubDate>
      
      <guid>https://chloevan.github.io/r/rmarkdown/rmarkdownintro/</guid>
      <description>&lt;h2 id=&#34;r-markdown-소개-및-환경설정&#34;&gt;R Markdown 소개 및 환경설정&lt;/h2&gt;
&lt;p&gt;데이터 분석가의 주요 업무 중의 하나는 향후에 참고자료로 활용하기 위해 작업결과를 문서화 해야 하는데, 상당량의 보고서를 작성해서 분석과정과 출력결과를 기술해야만 합니다.&lt;/p&gt;
&lt;p&gt;보통의 과정은 아래과 같을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1단계: 본인의 작업을 위해서 R 스크립트 작성&lt;/li&gt;
&lt;li&gt;2단계: 다양한 그래프가 첨부된 분석결과를 Word, PPT 분석결과를 기술해서 동료 또는 메신저로 분석결과 전송&lt;/li&gt;
&lt;li&gt;3단계: 분석결과 토의&lt;/li&gt;
&lt;li&gt;4단계: 각각의 그래프 결과 코드를 매칭하기 위한 작업이 토의 중 발생&lt;/li&gt;
&lt;li&gt;5단계: 혼란 및 불필요한 시간 소요 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데, 해당 작업물을 그 때 마다 웹페이지(HTML)을 생성하여 자체 서버내 구축할 수 있다면, 그러면 위 5단계의 과정을 3단계(&lt;strong&gt;소스코드 작성&lt;/strong&gt; -&amp;gt; &lt;strong&gt;웹 게시&lt;/strong&gt; -&amp;gt; &lt;strong&gt;분석결과 토의&lt;/strong&gt;)로 축소할 수가 있을 것이며 특히, 연구자가 분석 당시의 고민과 문제점들을 스크롤링과 함께 같이 고민할 수 있는 시간으로 빠져들 수 있도록 유도할 수 있습니다.&lt;/p&gt;
&lt;p&gt;데이터 분석 보고서는 보고서의 작성이 연구자의 끝이 아니기 때문에 분석의 과정과 결과물을 잘 정리하여 의사결정을 하는데 반드시 도움이 되어야 하는 일종의 제안서와 같습니다.&lt;/p&gt;
&lt;p&gt;본 게시물은 R을 처음 접하는 데이터 분석가를 위해서 작성하였습니다. 사내의 보고서 문화 혁신에 기여하기를 바라는 마음과 함께!!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-r-마크다운-파일-생성&#34;&gt;Step 1. R 마크다운 파일 생성&lt;/h2&gt;
&lt;p&gt;R 마크다운 파일 생성은 아래와 같이 생성할 수 있습니다.
RStudio에서 File -&amp;gt; New File -&amp;gt; R Markdown을 클릭하시면 아래와 같이 대화상자가 열립니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdown.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Title과 Author를 설정 한 후 HTML로 클릭합니다.&lt;/p&gt;
&lt;h2 id=&#34;step-2-r-마크다운-기본-구성요소&#34;&gt;Step 2. R 마크다운 기본 구성요소&lt;/h2&gt;
&lt;p&gt;기본 구조는 아래와 같이 확인 될 것입니다.
&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownbasic.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;구성-1-header&#34;&gt;구성 1. Header&lt;/h3&gt;
&lt;p&gt;초기 설정된 텍스트 덩어리에 R에 대한 지시사항이 담겨있다: 제목, 저자명, 날짜, html 출력물(다른 말로, 웹페이지)을 생성할지가 포함됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 필드는 임의 삭제가 가능하나, 경험적으로는 포함 시키는 것이 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;구성-2-r-코드-덩어리---set-up&#34;&gt;구성 2. R 코드 덩어리 - Set Up&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;위 구성은 R 마크다운 문서의 기본 Set Up 코드이기 때문에 유지하는 것을 원칙으로 합니다. 위 코드 상 옵션에 대한 설명은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup: 소스코드 덩어리에 대한 title이며, 다른 소스코드 덩어리와 중복 작성 시, 에러가 발생합니다.&lt;/li&gt;
&lt;li&gt;include=FALSE: 문서에는 포함시키지 않고, 몰래 실행할 수 있으며, 주로 최초 설정에 이용됩니다.&lt;/li&gt;
&lt;li&gt;knitr::opts_chunk$set에서 디폴트 옵션을 설정할 수 있으며, echo = TRUE는 코드를 보여줍니다. 그 외 옵션은 아래를 확인하여 주시기를 바랍니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eval = F&lt;/strong&gt;: 코드 실행하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo = F&lt;/strong&gt;: 코드를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;include=F&lt;/strong&gt;: 실행 결과를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;message=F&lt;/strong&gt;: 실행 때 나오는 메세지를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;warning=F&lt;/strong&gt;: 실행 때 나오는 경고를 보여주지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error=T&lt;/strong&gt;: 에러가 있어도 실행하고 에러코드를 보여준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.height=(number)&lt;/strong&gt;: R에서 작성한 그래프를 그림의 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.width=(number)&lt;/strong&gt;: R에서 작성한 그림의 넓이를 높이를 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fig.align=&#39;center&amp;rsquo;&lt;/strong&gt; : R에서 작성한 그림의 위치를 변경할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외 옵션을 확인하려면 아래와 같이 코드를 입력 후 실행하면 결과값이 나옵니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;구성-3-r-코드-덩어리---작업코드-예제&#34;&gt;구성 3. R 코드 덩어리 - 작업코드 예제&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;code&gt;knitr&lt;/code&gt;로 실행되면, R 코드 덩어리를 실행결과와 함께 나타납니다.&lt;/p&gt;
&lt;h2 id=&#34;step-3-마크다운markdown문법에-대한-이해&#34;&gt;Step 3. 마크다운(Markdown)문법에 대한 이해&lt;/h2&gt;
&lt;p&gt;마크다운은 2004년 12월에 처음 등장한 것으로 보입니다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 마크다운을 활용하여 작성된 문서는 보다 쉽고 빠르게 HTML 등 다른 문서 형태로 변환이 가능합니다. 특별히, R Markdown은 R사용자를 위한 Markdown으로 이해하시면 좋습니다.&lt;/p&gt;
&lt;h3 id=&#34;기본문법-1-bold--italic&#34;&gt;기본문법 1. Bold &amp;amp; Italic&lt;/h3&gt;
&lt;p&gt;별표&lt;code&gt;*&lt;/code&gt;를 활용하여 굵게 또는 이탤릭체로 변환할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;굵게&lt;/strong&gt;: &lt;code&gt;**굵게(bold)**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이탤릭&lt;/em&gt;: &lt;code&gt;*이탤릭(italic)*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;기본문법-2-구분점&#34;&gt;기본문법 2. 구분점&lt;/h3&gt;
&lt;p&gt;아래와 같이 하이픈&lt;code&gt;-&lt;/code&gt; 혹은 별표&lt;code&gt;*&lt;/code&gt;를 적용해서 구분점이 붙은 항목을 생성할 수 있습니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;혹은 아래와 같이 작성도 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;숫자 사용을 활용한 구분점도 아래와 같이 적용하면 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;코드 실행 시, 다음과 같이 웹페이지로 보여지게 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;위 그래프는 ~&lt;/li&gt;
&lt;li&gt;위 표는 ~&lt;/li&gt;
&lt;li&gt;따라서, ~&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;기본문법-3-섹션-제목-만들기&#34;&gt;기본문법 3. 섹션 제목 만들기&lt;/h3&gt;
&lt;p&gt;섹션 제목을 만들려면 &lt;code&gt;#&lt;/code&gt;  기호를 활용하여 각 라인 첫번째 적용하게 되면 다른 크기를 갖는 섹션 제목을 만들 수 있을 뿐만 아니라, 위 섹션이 목차로 재 활용될 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 첫번째 제목 (Title)
## 두번째 제목 (Main Section)
### 세번째 제목 (Sub-Section)
#### 네번째 제목 (Sub-sub section)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;첫번째-제목-title&#34;&gt;첫번째 제목 (Title)&lt;/h1&gt;
&lt;h2 id=&#34;두번째-제목-main-section&#34;&gt;두번째 제목 (Main Section)&lt;/h2&gt;
&lt;h3 id=&#34;세번째-제목-sub-section&#34;&gt;세번째 제목 (Sub-Section)&lt;/h3&gt;
&lt;h4 id=&#34;네번째-제목-sub-sub-section&#34;&gt;네번째 제목 (Sub-sub Section)&lt;/h4&gt;
&lt;h2 id=&#34;step-4-마크다운markdown-다양한-기능-사용&#34;&gt;Step 4. 마크다운(Markdown) 다양한 기능 사용&lt;/h2&gt;
&lt;h3 id=&#34;기능-1-하이퍼링크&#34;&gt;기능 1. 하이퍼링크&lt;/h3&gt;
&lt;p&gt;독립적으로 링크 코드를 입력하거나, 또는 문장 중간에 삽입이 가능합니다. 아래와 같은 방법으로 입력하시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: [text](링크)
예시: [네이버](https://www.naver.com)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;네이버 클릭하시면(&amp;amp;#8594) &lt;a href=&#34;https://www.naver.com&#34;&gt;네이버&lt;/a&gt; 네이버 메인 화면에 연결됩니다.&lt;/p&gt;
&lt;h3 id=&#34;기능-2-이미지-삽입&#34;&gt;기능 2. 이미지 삽입&lt;/h3&gt;
&lt;p&gt;아래와 같은 방법으로 이미지를 삽입할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;문법: ![caption](경로)
예시: ![rmarkdownlogo](./rmarkdownlogo.jpeg)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/rmarkdown/rmarkdownlogo.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;다만, image size 작업 조정을 직접 하려면 R 코드 덩어리에 아래와 같은 방법으로 작업할수도 있습니다. (예: out.width=&amp;quot;400px&amp;rdquo;, out.height=&amp;quot;400px&amp;rdquo;)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;다만, 경험적으로 봤을 때는 개별 이미지를 수정하려면 HTML 소스 코드 또는 소스코드를 직접 입력하는 것을 권장합니다.&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;
test.Rmd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial R Markdown document&amp;#34;&lt;/span&gt;
author&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Evan Jung&amp;#34;&lt;/span&gt;
date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10/4/2019&amp;#34;&lt;/span&gt;
output&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; html_document
css&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; test.css
&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;## Page with an image {#myImagePage}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[Image&lt;span style=&#34;color:#a6e22e&#34;&gt;]&lt;/span&gt;(path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;image)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;기능-3-latex-expression&#34;&gt;기능 3. LaTeX expression&lt;/h3&gt;
&lt;p&gt;수식작성법은 &lt;a href=&#34;https://www.latex-project.org/&#34;&gt;Latex&lt;/a&gt;라는 문법을 참조해서 작성할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$$	x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$&lt;/p&gt;
&lt;h3 id=&#34;기능-4-인라인inline-r-코드&#34;&gt;기능 4. 인라인(Inline) R 코드&lt;/h3&gt;
&lt;p&gt;인라인 R코드를 활용하는 가장 궁극적인 목적은 보고서의 모든 숫자를 재현가능하게 만들기 위해서입니다. 인라인 코드를 작성할 때 &lt;!-- raw HTML omitted --&gt;`r&lt;!-- raw HTML omitted --&gt;와 &lt;!-- raw HTML omitted --&gt;`&lt;!-- raw HTML omitted --&gt;을 사용합니다. 예를 들어, &lt;!-- raw HTML omitted --&gt;`r 2+2`&lt;!-- raw HTML omitted --&gt; 또는 &lt;!-- raw HTML omitted --&gt;`r round(some_value, 2)`&lt;!-- raw HTML omitted --&gt; . R 코드가 실행되어 코드가 결과 값으로 치환됩니다.&lt;/p&gt;
&lt;h2 id=&#34;step-5-다른-언어와의-호환성-고급&#34;&gt;Step 5. 다른 언어와의 호환성 (고급)&lt;/h2&gt;
&lt;p&gt;R과 함께 파이썬 또는 SQL을 다루는 머신러닝 개발자가 있다고 가정합니다. 그러면 R Markdown 안에서도 python 코드를 실행 후 작업할 수가 있습니다. 다만, 이때에는 코드 덩어리를 파이썬 또는 sql로 명명해야 적용이 가능합니다.&lt;/p&gt;
&lt;p&gt;예를 들면 아래와 같이 작성이 가능합니다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;option-더-공부하기&#34;&gt;(Option) 더 공부하기&lt;/h2&gt;
&lt;p&gt;위에서 제공한 자료를 가지고도 충분히 보고서를 작성하는데는 부족함이 없습니다. 다만, 보고서를 조금 더 풍성하게 만들고자 한다면 메뉴얼을 참고해서 보다 전문적으로 작성하는 권장합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown 공식 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34;&gt;R 마크다운 공식 메뉴얼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf&#34;&gt;R 마크다운 Cheet Sheet  PDF 파일 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;a href=&#34;mailto:j2hoon85@gmail.com&#34;&gt;j2hoon85@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;R Markdown 기초&amp;rdquo;, &amp;ldquo;Zarathu Official Blog&amp;rdquo;, 2019년 1월 3일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&#34;&gt;https://blog.zarathu.com/posts/2019-01-03-rmarkdown/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&amp;ldquo;Markdown&amp;rdquo;, &amp;ldquo;Daring Fireball&amp;rdquo;, 2004년 12월 17일 수정, 2019년 10월 4일 접속, &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;https://daringfireball.net/projects/markdown/&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>