<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Having on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/having/</link>
    <description>Recent content in Having on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Apr 2020 11:30:30 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/having/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ch06 SQL Aggregates</title>
      <link>https://chloevan.github.io/gcp/bigquery/02_basics/ch06_sql_aggregates/</link>
      <pubDate>Sun, 26 Apr 2020 11:30:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/02_basics/ch06_sql_aggregates/</guid>
      <description>&lt;h2 id=&#34;1-구글-클라우드-설정&#34;&gt;1. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, Python과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;2-사용자-계정-인증&#34;&gt;2. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate_user()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticated&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Authenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-쿼리-기본&#34;&gt;3. 쿼리 기본&lt;/h2&gt;
&lt;p&gt;빅쿼리는 기본적으로 데이터 웨어하우스의 기능을 가지고 있다. Structured(데이터프레임) &amp;amp; Semi-Structured(JSON)과 같은 DB를 지원하고 있다. Create, Read, Update, Delete 기능을 지원한다.&lt;/p&gt;
&lt;p&gt;빅쿼리는 데이터 분석을 위한 기본적인 도구이기 때문에, 웹/앱을 활용한 마케팅 분석이 필요한 업종에서는 어쩌면 반드시 가져가야할 일종의 언어이기도 하다.&lt;/p&gt;
&lt;p&gt;기본적으로 SQL문법을 지원하며, BigQuery 나름의 문법을 또한 구성하고 있다. 이제 본격적으로 코드를 작성해보자.&lt;/p&gt;
&lt;p&gt;현재 작성하는 모든 코드는 Python-BigQuery로 연동하여 작성하려고 한다. 이제 간단하게 쿼리를 작성해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials1/&#34;&gt;Ch05-Query_Essentials(1)&lt;/a&gt;에서는 &lt;code&gt;SELECT&lt;/code&gt;와 &lt;code&gt;AS&lt;/code&gt;에 대해 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials2/&#34;&gt;Ch05-Query_Essentials(2)&lt;/a&gt;에서는 &lt;code&gt;WHERE&lt;/code&gt;와 &lt;code&gt;EXCEPT&lt;/code&gt;, 그리고 &lt;code&gt;REPLACE&lt;/code&gt;에 대해 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials3/&#34;&gt;Ch05-Query_Essentials(3)&lt;/a&gt;에서는 &lt;code&gt;SubQuery&lt;/code&gt;에 대해서 집중적으로 배우는 시간을 가졌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오늘 포스트에서는 &lt;code&gt;Aggregates&lt;/code&gt;, 일반적인 집계함수 처리법에 대해 학습하도록 한다.&lt;/p&gt;
&lt;h3 id=&#34;1-group-by&#34;&gt;(1) Group By&lt;/h3&gt;
&lt;p&gt;SQL에서 평균을 구해보자. SQL이 일반적으로 조회기능만 가지고 있다고 생각하면 안된다. 기본적으로 SQL에서 처리할 수 있는 단순한 계산들은 Database에서 해주는 것이 많은 도움이 된다.&lt;/p&gt;
&lt;p&gt;평균을 구하려는 건, 다름이 아니라 남성 이용자들의 평균 &lt;code&gt;tripduration&lt;/code&gt; 시간을 알아보자는 데 있다. 어떻게 해야할까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bigquery
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate

project_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your_project_id&amp;#39;&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bigquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project_id)

temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    AVG(tripduration / 60) as avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE gender = &amp;#39;male&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipe&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;WARNING:google.auth._default:No project ID could be determined. Consider running `gcloud config set project` or setting the GOOGLE_CLOUD_PROJECT environment variable


|    |   avg_trip_duration |
|---:|--------------------:|
|  0 |             13.4156 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다른 구문은 지난시간에 계속 배운 것이기 때문에 익숙하지만, &lt;code&gt;AVG()&lt;/code&gt; 함수가 사용되었다.&lt;/p&gt;
&lt;p&gt;이번에는 조금 더 업그레이드를 해본다. 실무에서 전체 평균은 그렇게 중요하지 않다. 각 속성별로 &lt;code&gt;gender&lt;/code&gt;를 그룹화 해서 비교하는 것을 기본 원칙으로 삼는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender, AVG(tripduration / 60) AS avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE tripduration is not NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  GROUP BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;| 0       |       1 |
|:--------|--------:|
| male    | 13.4156 |
| female  | 15.9775 |
| unknown | 31.4395 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 구문을 이해하는데 있어서 &lt;code&gt;GROUP BY&lt;/code&gt;를 주의해서 봐야한다. 그룹화 하려는 Column명을 &lt;code&gt;SELECT&lt;/code&gt;다음에 명시를 해줘야 한 뒤, 작성해야줘야 한다. 만약 &lt;code&gt;SELECT&lt;/code&gt;문에 &lt;code&gt;gender&lt;/code&gt;가 없으면 그룹별 값은 구해지지만, &lt;code&gt;gender&lt;/code&gt;가 없기 때문에 불완전한 쿼리 결과물이 나온다. 빠르게 확인해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    AVG(tripduration / 60) AS avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE tripduration is not NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  GROUP BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|       0 |
|--------:|
| 13.4156 |
| 15.9775 |
| 31.4395 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;두 구문을 비교해서, 어떻게 &lt;code&gt;GROUP BY&lt;/code&gt;를 써야 할지 확인해본다.&lt;/p&gt;
&lt;h3 id=&#34;2-having&#34;&gt;(2) HAVING&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Having&lt;/code&gt;은 언제 쓸까? 영어 동사를 알고 있다면 이해하는데 큰 어려움이 없을 것이다. 간단하게 설명하면, Having은 &lt;code&gt;WHERE&lt;/code&gt;절과 비슷한 기능을 갖는 일종의 필터링을 한다. &lt;code&gt;male&lt;/code&gt;, &lt;code&gt;female&lt;/code&gt;, &lt;code&gt;unknown&lt;/code&gt; 값이 나온 것에서 평균 15이하인 것을 제거한다고 해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender, AVG(tripduration / 60) AS avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE tripduration is not NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  GROUP BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  HAVING avg_trip_duration &amp;gt; 14
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;| 0       |       1 |
|:--------|--------:|
| female  | 15.9775 |
| unknown | 31.4395 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;15이하였던 &lt;code&gt;male&lt;/code&gt;이 사라진 것을 확인할 수 있다. 그런데, 이 때, &lt;code&gt;HAVING&lt;/code&gt;절의 위치가 중요하다. &lt;code&gt;HAVING&lt;/code&gt;절이 &lt;code&gt;ORDER BY&lt;/code&gt;앞에 명시가 되고 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;만약 &lt;code&gt;HAVING&lt;/code&gt;절이 &lt;code&gt;ORDER BY&lt;/code&gt;뒤에 오면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender, AVG(tripduration / 60) AS avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE tripduration is not NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  GROUP BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ORDER BY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    avg_trip_duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  HAVING avg_trip_duration &amp;gt; 14
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

BadRequest                                Traceback (most recent call last)

&amp;lt;ipython-input-13-3a9913fbbf59&amp;gt; in &amp;lt;module&amp;gt;()
     11   &#39;&#39;&#39;)
     12 
---&amp;gt; 13 print(tabulate(temp, tablefmt=&#39;pipe&#39;, headers=&#39;keys&#39;))


/usr/local/lib/python3.6/dist-packages/tabulate.py in tabulate(tabular_data, headers, tablefmt, floatfmt, numalign, stralign, missingval, showindex, disable_numparse, colalign)
   1425         tabular_data = []
   1426     list_of_lists, headers = _normalize_tabular_data(
-&amp;gt; 1427         tabular_data, headers, showindex=showindex
   1428     )
   1429 


/usr/local/lib/python3.6/dist-packages/tabulate.py in _normalize_tabular_data(tabular_data, headers, showindex)
   1023 
   1024     else:  # it&#39;s a usual an iterable of iterables, or a NumPy array
-&amp;gt; 1025         rows = list(tabular_data)
   1026 
   1027         if headers == &amp;quot;keys&amp;quot; and not rows:


/usr/local/lib/python3.6/dist-packages/google/cloud/bigquery/job.py in __iter__(self)
   3110 
   3111     def __iter__(self):
-&amp;gt; 3112         return iter(self.result())
   3113 
   3114 


/usr/local/lib/python3.6/dist-packages/google/cloud/bigquery/job.py in result(self, timeout, page_size, retry, max_results)
   2972         &amp;quot;&amp;quot;&amp;quot;
   2973         try:
-&amp;gt; 2974             super(QueryJob, self).result(timeout=timeout)
   2975 
   2976             # Return an iterator instead of returning the job.


/usr/local/lib/python3.6/dist-packages/google/cloud/bigquery/job.py in result(self, timeout, retry)
    766             self._begin(retry=retry)
    767         # TODO: modify PollingFuture so it can pass a retry argument to done().
--&amp;gt; 768         return super(_AsyncJob, self).result(timeout=timeout)
    769 
    770     def cancelled(self):


/usr/local/lib/python3.6/dist-packages/google/api_core/future/polling.py in result(self, timeout)
    125             # pylint: disable=raising-bad-type
    126             # Pylint doesn&#39;t recognize that this is valid in this case.
--&amp;gt; 127             raise self._exception
    128 
    129         return self._result


BadRequest: 400 Syntax error: Unexpected keyword HAVING at [10:3]

(job ID: 96ceb51a-9673-479f-be00-22c50a047e24)

                  -----Query Job SQL Follows-----                  

    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:
   2:  SELECT
   3:    gender, AVG(tripduration / 60) AS avg_trip_duration
   4:  FROM `bigquery-public-data.new_york_citibike.citibike_trips`
   5:  WHERE tripduration is not NULL
   6:  GROUP BY
   7:    gender
   8:  ORDER BY
   9:    avg_trip_duration
  10:  HAVING avg_trip_duration &amp;gt; 14
  11:  
    |    .    |    .    |    .    |    .    |    .    |    .    |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;보다시피, 에러가 나타나는데, 에러 메시지는 &lt;code&gt;400 Syntax error: Unexpected keyword HAVING at [10:3]&lt;/code&gt; 즉, 문법에 맞지 않다는 뜻이다. 이런 SQL구문을 처음 접하는 사람에게는 어려울 수 있지만, 기본 문법은 문법이기 때문에 명시적으로 암기해서 작성하는 것이 좋다.&lt;/p&gt;
&lt;h3 id=&#34;3-distinct&#34;&gt;(3) DISTINCT&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DISTINCT&lt;/code&gt;는 특정 그룹에서 &lt;code&gt;구별되다, 따로 분리되다 등&lt;/code&gt; 해석되고는 합니다. 각 문자열의 각 &lt;code&gt;Column&lt;/code&gt;들은 특정 값들이 반복해서 나타나게 되는데, 이 때, &lt;code&gt;DISTINCT&lt;/code&gt;를 사용하면 반복되는 값들을 빠르게 확인할 수 있습니다. 코드를 통해서 결과를 확인해봅니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT DISTINCT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     usertype
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | usertype   |
|---:|:-----------|
|  0 | Subscriber |
|  1 | Customer   |
|  2 |            |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과를 조회해보니, 4개가 출력되었다. 왜 4개일까? 결과적으로 말하면 공백이 있다는 뜻이다. 실무에서 이런경우는 매우 많이 벌어진다. 또한, 처음 업무에 투입하면 들어오는 데이터를 모르는 경우가 많기 때문에 SQL에서 여러 조회를 하다보면, 이런 결과값이 나오는 것이 부지기수다. 이럴 때 당황할 필요 없이 다음 SQL문을 실행해보면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    bikeid,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    tripduration,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    usertype
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE gender= &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  LIMIT 5
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | bikeid   | tripduration   | usertype   |
|---:|:---------|:---------------|:-----------|
|  0 |          |                |            |
|  1 |          |                |            |
|  2 |          |                |            |
|  3 |          |                |            |
|  4 |          |                |            |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;공백으로 나타내는 것을 확인할 수 있다. python jupyter notebook에서는 나타나고 있지 않지만, 이를 &lt;a href=&#34;https://console.cloud.google.com/bigquery&#34;&gt;BigQuery GUI&lt;/a&gt;에서 위 쿼리문을 다시 실행하면 NULL 값을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;문제는 이 다음이다. 어떻게 처리해야 할까? 당연히 조회값으로는 적정하지 않으니, 이를 연산자를 통해 제거한다. (WHERE절에서 작성)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT DISTINCT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gender, usertype
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    `bigquery-public-data.new_york_citibike.citibike_trips`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WHERE gender != &amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(tabulate(temp, tablefmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipe&amp;#39;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;|    | gender   | usertype   |
|---:|:---------|:-----------|
|  0 | male     | Subscriber |
|  1 | female   | Subscriber |
|  2 | male     | Customer   |
|  3 | unknown  | Subscriber |
|  4 | female   | Customer   |
|  5 | unknown  | Customer   |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 원하는 대로 공백값이 지워지고 각각 매칭되도록 결과값이 나온 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 &lt;code&gt;GROUP&lt;/code&gt;를 활용한 &lt;code&gt;HAVING&lt;/code&gt; 그리고 &lt;code&gt;DISTINCT&lt;/code&gt; 대해서 배웠는데, 도움이 되었기를 바란다.&lt;/p&gt;
&lt;p&gt;다음 포스트에서는 &lt;code&gt;Arrays &amp;amp; Structs&lt;/code&gt;에 대해 학습하도록 하겠다. 이 부분이 사실 기초 파트에서는 매우 중요한 포인트가 될 것 같다!&lt;/p&gt;
&lt;h2 id=&#34;4-reference&#34;&gt;4. Reference&lt;/h2&gt;
&lt;p&gt;Lakshmanan, V., &amp;amp; Tigani, J. (2020). Google BigQuery: the definitive guide: data warehousing, analytics, and machine learning at scale. Beijing: OReilly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>