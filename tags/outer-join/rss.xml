<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Outer Join on Data Science | ChloEvan</title>
    <link>https://chloevan.github.io/tags/outer-join/</link>
    <description>Recent content in Outer Join on Data Science | ChloEvan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 07:30:30 +0900</lastBuildDate>
    
        <atom:link href="https://chloevan.github.io/tags/outer-join/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ch15 Outer Join</title>
      <link>https://chloevan.github.io/gcp/bigquery/02_basics/ch15_outer_join/</link>
      <pubDate>Tue, 19 May 2020 07:30:30 +0900</pubDate>
      
      <guid>https://chloevan.github.io/gcp/bigquery/02_basics/ch15_outer_join/</guid>
      <description>&lt;h2 id=&#34;i-구글-클라우드-설정&#34;&gt;I. 구글 클라우드 설정&lt;/h2&gt;
&lt;p&gt;본격적인 빅쿼리 실습에 앞서서, Python과 연동하는 예제를 준비하였다. 빅쿼리 시작에 앞서서 선행적으로 클라우드 사용을 해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 GCP 프로젝트가 없다면, 계정을 연동한다. Go to &lt;a href=&#34;https://console.cloud.google.com/cloud-resource-manager&#34;&gt;Cloud Resource Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;그리고, 비용결제를 위한 카드를 등록한다. &lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;Enable billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막으로 BigQuery API를 사용해야 하기 때문에 빅쿼리 API 사용허가를 내준다.&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=bigquery&#34;&gt;Enable BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 API를 이용하지 않으면 &lt;code&gt;Python&lt;/code&gt; 또는 &lt;code&gt;R&lt;/code&gt;과 연동해서 사용할 수는 없다. 자주 쓰는것이 아니라면 비용은 거의 발생하지 않으니 염려하지 않아도 된다. 비용관리에 대한 자세한 내용은 &lt;a href=&#34;https://cloud.google.com/bigquery/docs/best-practices-costs?hl=ko&#34;&gt;BigQuery 권장사항: 비용 관리&lt;/a&gt;에서 확인하기를 바란다.&lt;/p&gt;
&lt;h2 id=&#34;ii-사용자-계정-인증&#34;&gt;II. 사용자 계정 인증&lt;/h2&gt;
&lt;p&gt;구글 코랩을 사용해서 인증 절차를 밟도록 한다. 아래 소스코드는 변경시키지 않는다. 아래 절차대로 진행하면 된다. &lt;code&gt;Gmail&lt;/code&gt; 인증 절차와 비슷하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate_user()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticated&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Authenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-쿼리-기본&#34;&gt;III. 쿼리 기본&lt;/h2&gt;
&lt;p&gt;빅쿼리는 기본적으로 데이터 웨어하우스의 기능을 가지고 있다. Structured(데이터프레임) &amp;amp; Semi-Structured(JSON)과 같은 DB를 지원하고 있다. Create, Read, Update, Delete 기능을 지원한다.&lt;/p&gt;
&lt;p&gt;빅쿼리는 데이터 분석을 위한 기본적인 도구이기 때문에, 웹/앱을 활용한 마케팅 분석이 필요한 업종에서는 어쩌면 반드시 가져가야할 일종의 언어이기도 하다.&lt;/p&gt;
&lt;p&gt;기본적으로 SQL문법을 지원하며, BigQuery 나름의 문법을 또한 구성하고 있다. 이제 본격적으로 코드를 작성해보자.&lt;/p&gt;
&lt;p&gt;현재 작성하는 모든 코드는 Python-BigQuery로 연동하여 작성하려고 한다. 이제 간단하게 쿼리를 작성해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials1/&#34;&gt;Ch05-Query_Essentials(1)&lt;/a&gt;에서는 &lt;code&gt;SELECT&lt;/code&gt;와 &lt;code&gt;AS&lt;/code&gt;에 대해 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials2/&#34;&gt;Ch05-Query_Essentials(2)&lt;/a&gt;에서는 &lt;code&gt;WHERE&lt;/code&gt;와 &lt;code&gt;EXCEPT&lt;/code&gt;, 그리고 &lt;code&gt;REPLACE&lt;/code&gt;에 대해 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch05_query_essentials3/&#34;&gt;Ch05-Query_Essentials(3)&lt;/a&gt;에서는 &lt;code&gt;SubQuery&lt;/code&gt;에 대해서 집중적으로 배우는 시간을 가졌다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch06_sql_aggregates/&#34;&gt;Ch06 SQL Aggregates&lt;/a&gt;에서는 집계함수를 사용해서 데이터를 조금 더 디테일하게 요약하는 것을 배웠다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch07_split_unnest/&#34;&gt;Ch07 Arrays &amp;amp; Structs&lt;/a&gt;에서는 빅쿼리에서 가상의 테이블과 그리고 배열을 만드는 법을 익혔다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch08_creating_arrays_with_array_agg/&#34;&gt;Ch08_Creating_Arrays_with_Array_AGG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch09_struct_and_tuple/&#34;&gt;Ch09_Array_Of_Struct&lt;/a&gt; Struct을 활용하여 독특한 쿼리 결과문을 확인하였다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch10_unnest_an_array/&#34;&gt;Ch10 UNNEST an Array&lt;/a&gt; 에서, &lt;code&gt;Struct&lt;/code&gt;을 만든 임시 테이블을 보다 가독성 좋게 필드로 구분한 것을 확인하였다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch11_powerful_sql_pattern/&#34;&gt;Ch11 Powerful SQL Pattern&lt;/a&gt;에서 &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;UNNEST&lt;/code&gt;을 활용하여 &lt;code&gt;Powerful&lt;/code&gt;한 쿼리를 작성하였습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch12_join_explained/&#34;&gt;Ch12 Join Explained&lt;/a&gt;에서 처음으로 두개의 다른 조직에서 온 데이터를 합쳐서 의미있는 데이터를 만들어가는 과정을 진행하였습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch13_inner_join/&#34;&gt;Ch13 Inner Join&lt;/a&gt;에서 Table Join에 대해 학습하는 시간을 가졌습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chloevan.github.io/gcp/bigquery/02_basics/ch14_cross_join/&#34;&gt;Ch14 Cross Join&lt;/a&gt;을 통해서 두 테이블의 모든 경우의 수를 조회하는 방식에 대해서 배웠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv-outer-join&#34;&gt;IV. Outer Join&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;조인하는 여러테이블에서 한 쪽에는 데이터가 있고, 한 쪽에는 데이터가 없는 경우, 데이터가 있는 쪽 테이블의 내용을 모두 출력한다.&lt;/li&gt;
&lt;li&gt;즉, 조건에 맞지 않아도 해당하는 행을 출력하고 싶을 때 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-outer-join의-종류&#34;&gt;(1) Outer Join의 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Outer Join&lt;/code&gt;에는 크게 3가지의 조인 종류가 있다. (&lt;code&gt;Full Outer Join&lt;/code&gt;, &lt;code&gt;Left Outer Join&lt;/code&gt;, &lt;code&gt;Right Outer Join&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;순차적으로 확인해보도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-full-outer-join&#34;&gt;(2) Full Outer Join&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.cloud &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bigquery
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tabulate &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tabulate
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

project_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bigquerytutorial-274406&amp;#39;&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bigquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Client(project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;project_id)

temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH winners AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;John&amp;#39; as person, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Hiroshi&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Sita&amp;#39;, &amp;#39;400m&amp;#39;, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Kwame&amp;#39;, &amp;#39;50m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  gifts AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;Google Home&amp;#39; as gift, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Hub&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Pixel3&amp;#39;, &amp;#39;400m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Mini&amp;#39;, &amp;#39;5000m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT person, gift
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM winners
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FULL OUTER JOIN gifts on winners.event = gifts.event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;WARNING:google.auth._default:No project ID could be determined. Consider running `gcloud config set project` or setting the GOOGLE_CLOUD_PROJECT environment variable


    person         gift
0     John  Google Home
1  Hiroshi   Google Hub
2     Sita       Pixel3
3    Kwame         None
4     None  Google Mini
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;각 컬럼마다 &lt;code&gt;None&lt;/code&gt;값을 볼 수 있는데, 이는 조건이 맞지 않아도 조회됨을 의미힌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-left-outer-join&#34;&gt;(3) Left Outer Join&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Winners&lt;/code&gt; table은 모두 조회가 되지만, 조건에 맞지 않는 &lt;code&gt;gifts&lt;/code&gt;는 버리게 됨을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH winners AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;John&amp;#39; as person, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Hiroshi&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Sita&amp;#39;, &amp;#39;400m&amp;#39;, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Kwame&amp;#39;, &amp;#39;50m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  gifts AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;Google Home&amp;#39; as gift, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Hub&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Pixel3&amp;#39;, &amp;#39;400m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Mini&amp;#39;, &amp;#39;5000m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT person, gift
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM winners
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  LEFT OUTER JOIN gifts on winners.event = gifts.event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    person         gift
0     John  Google Home
1  Hiroshi   Google Hub
2     Sita       Pixel3
3    Kwame         None
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-right-outer-join&#34;&gt;(4) Right Outer Join&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에는 반대로 모든 &lt;code&gt;gifts&lt;/code&gt;의 값이 조회되고, 조건에 만족하지 않는 &lt;code&gt;winners&lt;/code&gt;는 조회되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH winners AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;John&amp;#39; as person, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Hiroshi&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Sita&amp;#39;, &amp;#39;400m&amp;#39;, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Kwame&amp;#39;, &amp;#39;50m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  gifts AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;Google Home&amp;#39; as gift, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Hub&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Pixel3&amp;#39;, &amp;#39;400m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Mini&amp;#39;, &amp;#39;5000m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT person, gift
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM winners
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  RIGHT OUTER JOIN gifts on winners.event = gifts.event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    person         gift
0     John  Google Home
1  Hiroshi   Google Hub
2     Sita       Pixel3
3     None  Google Mini
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-inner-join&#34;&gt;V. Inner Join&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inner Join은 두 테이블의 조건이 맞는 값만 추출된다. 위 &lt;code&gt;Outer Join&lt;/code&gt;과의 차이점에 대해 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  WITH winners AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;John&amp;#39; as person, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Hiroshi&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Sita&amp;#39;, &amp;#39;400m&amp;#39;, 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Kwame&amp;#39;, &amp;#39;50m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  gifts AS (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    SELECT &amp;#39;Google Home&amp;#39; as gift, &amp;#39;100m&amp;#39; as event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Hub&amp;#39;, &amp;#39;200m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Pixel3&amp;#39;, &amp;#39;400m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    UNION ALL SELECT &amp;#39;Google Mini&amp;#39;, &amp;#39;5000m&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  SELECT person, gift
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  FROM winners
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  INNER JOIN gifts on winners.event = gifts.event
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dataframe()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(temp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    person         gift
0     John  Google Home
1  Hiroshi   Google Hub
2     Sita       Pixel3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;v-결론&#34;&gt;V. 결론&lt;/h2&gt;
&lt;p&gt;지금까지 테이블 조인에 대해 배웠다. 그리고 그 외의 다양한 방식은 아래 그림을 참조하기를 바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chloevan.github.io/img/gcp/bigquery/ch15_outer/SQL_Join.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;vi-reference&#34;&gt;VI. Reference&lt;/h2&gt;
&lt;p&gt;Lakshmanan, V., &amp;amp; Tigani, J. (2020). Google BigQuery: the definitive guide: data warehousing, analytics, and machine learning at scale. Beijing: OReilly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>